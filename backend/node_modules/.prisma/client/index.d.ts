
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Team
 * 
 */
export type Team = $Result.DefaultSelection<Prisma.$TeamPayload>
/**
 * Model Player
 * 
 */
export type Player = $Result.DefaultSelection<Prisma.$PlayerPayload>
/**
 * Model Event
 * 
 */
export type Event = $Result.DefaultSelection<Prisma.$EventPayload>
/**
 * Model Game
 * 
 */
export type Game = $Result.DefaultSelection<Prisma.$GamePayload>
/**
 * Model PlayerGameStats
 * 
 */
export type PlayerGameStats = $Result.DefaultSelection<Prisma.$PlayerGameStatsPayload>
/**
 * Model Substitution
 * 
 */
export type Substitution = $Result.DefaultSelection<Prisma.$SubstitutionPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.team`: Exposes CRUD operations for the **Team** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teams
    * const teams = await prisma.team.findMany()
    * ```
    */
  get team(): Prisma.TeamDelegate<ExtArgs>;

  /**
   * `prisma.player`: Exposes CRUD operations for the **Player** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Players
    * const players = await prisma.player.findMany()
    * ```
    */
  get player(): Prisma.PlayerDelegate<ExtArgs>;

  /**
   * `prisma.event`: Exposes CRUD operations for the **Event** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.event.findMany()
    * ```
    */
  get event(): Prisma.EventDelegate<ExtArgs>;

  /**
   * `prisma.game`: Exposes CRUD operations for the **Game** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Games
    * const games = await prisma.game.findMany()
    * ```
    */
  get game(): Prisma.GameDelegate<ExtArgs>;

  /**
   * `prisma.playerGameStats`: Exposes CRUD operations for the **PlayerGameStats** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlayerGameStats
    * const playerGameStats = await prisma.playerGameStats.findMany()
    * ```
    */
  get playerGameStats(): Prisma.PlayerGameStatsDelegate<ExtArgs>;

  /**
   * `prisma.substitution`: Exposes CRUD operations for the **Substitution** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Substitutions
    * const substitutions = await prisma.substitution.findMany()
    * ```
    */
  get substitution(): Prisma.SubstitutionDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Team: 'Team',
    Player: 'Player',
    Event: 'Event',
    Game: 'Game',
    PlayerGameStats: 'PlayerGameStats',
    Substitution: 'Substitution'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "team" | "player" | "event" | "game" | "playerGameStats" | "substitution"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Team: {
        payload: Prisma.$TeamPayload<ExtArgs>
        fields: Prisma.TeamFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findFirst: {
            args: Prisma.TeamFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findMany: {
            args: Prisma.TeamFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          create: {
            args: Prisma.TeamCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          createMany: {
            args: Prisma.TeamCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeamCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          delete: {
            args: Prisma.TeamDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          update: {
            args: Prisma.TeamUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          deleteMany: {
            args: Prisma.TeamDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TeamUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          aggregate: {
            args: Prisma.TeamAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeam>
          }
          groupBy: {
            args: Prisma.TeamGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamCountArgs<ExtArgs>
            result: $Utils.Optional<TeamCountAggregateOutputType> | number
          }
        }
      }
      Player: {
        payload: Prisma.$PlayerPayload<ExtArgs>
        fields: Prisma.PlayerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlayerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlayerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          findFirst: {
            args: Prisma.PlayerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlayerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          findMany: {
            args: Prisma.PlayerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>[]
          }
          create: {
            args: Prisma.PlayerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          createMany: {
            args: Prisma.PlayerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlayerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>[]
          }
          delete: {
            args: Prisma.PlayerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          update: {
            args: Prisma.PlayerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          deleteMany: {
            args: Prisma.PlayerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlayerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PlayerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          aggregate: {
            args: Prisma.PlayerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlayer>
          }
          groupBy: {
            args: Prisma.PlayerGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlayerGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlayerCountArgs<ExtArgs>
            result: $Utils.Optional<PlayerCountAggregateOutputType> | number
          }
        }
      }
      Event: {
        payload: Prisma.$EventPayload<ExtArgs>
        fields: Prisma.EventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findFirst: {
            args: Prisma.EventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findMany: {
            args: Prisma.EventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          create: {
            args: Prisma.EventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          createMany: {
            args: Prisma.EventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          delete: {
            args: Prisma.EventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          update: {
            args: Prisma.EventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          deleteMany: {
            args: Prisma.EventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.EventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          aggregate: {
            args: Prisma.EventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEvent>
          }
          groupBy: {
            args: Prisma.EventGroupByArgs<ExtArgs>
            result: $Utils.Optional<EventGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventCountArgs<ExtArgs>
            result: $Utils.Optional<EventCountAggregateOutputType> | number
          }
        }
      }
      Game: {
        payload: Prisma.$GamePayload<ExtArgs>
        fields: Prisma.GameFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GameFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          findFirst: {
            args: Prisma.GameFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          findMany: {
            args: Prisma.GameFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>[]
          }
          create: {
            args: Prisma.GameCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          createMany: {
            args: Prisma.GameCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.GameCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>[]
          }
          delete: {
            args: Prisma.GameDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          update: {
            args: Prisma.GameUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          deleteMany: {
            args: Prisma.GameDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GameUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GameUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GamePayload>
          }
          aggregate: {
            args: Prisma.GameAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGame>
          }
          groupBy: {
            args: Prisma.GameGroupByArgs<ExtArgs>
            result: $Utils.Optional<GameGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameCountArgs<ExtArgs>
            result: $Utils.Optional<GameCountAggregateOutputType> | number
          }
        }
      }
      PlayerGameStats: {
        payload: Prisma.$PlayerGameStatsPayload<ExtArgs>
        fields: Prisma.PlayerGameStatsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlayerGameStatsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerGameStatsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlayerGameStatsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerGameStatsPayload>
          }
          findFirst: {
            args: Prisma.PlayerGameStatsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerGameStatsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlayerGameStatsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerGameStatsPayload>
          }
          findMany: {
            args: Prisma.PlayerGameStatsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerGameStatsPayload>[]
          }
          create: {
            args: Prisma.PlayerGameStatsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerGameStatsPayload>
          }
          createMany: {
            args: Prisma.PlayerGameStatsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlayerGameStatsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerGameStatsPayload>[]
          }
          delete: {
            args: Prisma.PlayerGameStatsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerGameStatsPayload>
          }
          update: {
            args: Prisma.PlayerGameStatsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerGameStatsPayload>
          }
          deleteMany: {
            args: Prisma.PlayerGameStatsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlayerGameStatsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PlayerGameStatsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerGameStatsPayload>
          }
          aggregate: {
            args: Prisma.PlayerGameStatsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlayerGameStats>
          }
          groupBy: {
            args: Prisma.PlayerGameStatsGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlayerGameStatsGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlayerGameStatsCountArgs<ExtArgs>
            result: $Utils.Optional<PlayerGameStatsCountAggregateOutputType> | number
          }
        }
      }
      Substitution: {
        payload: Prisma.$SubstitutionPayload<ExtArgs>
        fields: Prisma.SubstitutionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubstitutionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubstitutionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubstitutionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubstitutionPayload>
          }
          findFirst: {
            args: Prisma.SubstitutionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubstitutionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubstitutionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubstitutionPayload>
          }
          findMany: {
            args: Prisma.SubstitutionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubstitutionPayload>[]
          }
          create: {
            args: Prisma.SubstitutionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubstitutionPayload>
          }
          createMany: {
            args: Prisma.SubstitutionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SubstitutionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubstitutionPayload>[]
          }
          delete: {
            args: Prisma.SubstitutionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubstitutionPayload>
          }
          update: {
            args: Prisma.SubstitutionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubstitutionPayload>
          }
          deleteMany: {
            args: Prisma.SubstitutionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubstitutionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SubstitutionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubstitutionPayload>
          }
          aggregate: {
            args: Prisma.SubstitutionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubstitution>
          }
          groupBy: {
            args: Prisma.SubstitutionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubstitutionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubstitutionCountArgs<ExtArgs>
            result: $Utils.Optional<SubstitutionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type TeamCountOutputType
   */

  export type TeamCountOutputType = {
    players: number
    homeGames: number
    awayGames: number
  }

  export type TeamCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    players?: boolean | TeamCountOutputTypeCountPlayersArgs
    homeGames?: boolean | TeamCountOutputTypeCountHomeGamesArgs
    awayGames?: boolean | TeamCountOutputTypeCountAwayGamesArgs
  }

  // Custom InputTypes
  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamCountOutputType
     */
    select?: TeamCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountPlayersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountHomeGamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountAwayGamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
  }


  /**
   * Count Type PlayerCountOutputType
   */

  export type PlayerCountOutputType = {
    stats: number
    substitutionsIn: number
    substitutionsOut: number
    activeInGames: number
  }

  export type PlayerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stats?: boolean | PlayerCountOutputTypeCountStatsArgs
    substitutionsIn?: boolean | PlayerCountOutputTypeCountSubstitutionsInArgs
    substitutionsOut?: boolean | PlayerCountOutputTypeCountSubstitutionsOutArgs
    activeInGames?: boolean | PlayerCountOutputTypeCountActiveInGamesArgs
  }

  // Custom InputTypes
  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerCountOutputType
     */
    select?: PlayerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeCountStatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerGameStatsWhereInput
  }

  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeCountSubstitutionsInArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubstitutionWhereInput
  }

  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeCountSubstitutionsOutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubstitutionWhereInput
  }

  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeCountActiveInGamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
  }


  /**
   * Count Type EventCountOutputType
   */

  export type EventCountOutputType = {
    games: number
  }

  export type EventCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    games?: boolean | EventCountOutputTypeCountGamesArgs
  }

  // Custom InputTypes
  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EventCountOutputType
     */
    select?: EventCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EventCountOutputType without action
   */
  export type EventCountOutputTypeCountGamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
  }


  /**
   * Count Type GameCountOutputType
   */

  export type GameCountOutputType = {
    stats: number
    substitutions: number
    activePlayers: number
  }

  export type GameCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stats?: boolean | GameCountOutputTypeCountStatsArgs
    substitutions?: boolean | GameCountOutputTypeCountSubstitutionsArgs
    activePlayers?: boolean | GameCountOutputTypeCountActivePlayersArgs
  }

  // Custom InputTypes
  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCountOutputType
     */
    select?: GameCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountStatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerGameStatsWhereInput
  }

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountSubstitutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubstitutionWhereInput
  }

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountActivePlayersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    email: string | null
    passwordHash: string | null
    rol: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    email: string | null
    passwordHash: string | null
    rol: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    nombre: number
    email: number
    passwordHash: number
    rol: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    nombre?: true
    email?: true
    passwordHash?: true
    rol?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    nombre?: true
    email?: true
    passwordHash?: true
    rol?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    nombre?: true
    email?: true
    passwordHash?: true
    rol?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    nombre: string
    email: string
    passwordHash: string
    rol: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    email?: boolean
    passwordHash?: boolean
    rol?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    email?: boolean
    passwordHash?: boolean
    rol?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    nombre?: boolean
    email?: boolean
    passwordHash?: boolean
    rol?: boolean
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      email: string
      passwordHash: string
      rol: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly nombre: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly passwordHash: FieldRef<"User", 'String'>
    readonly rol: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
  }


  /**
   * Model Team
   */

  export type AggregateTeam = {
    _count: TeamCountAggregateOutputType | null
    _avg: TeamAvgAggregateOutputType | null
    _sum: TeamSumAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  export type TeamAvgAggregateOutputType = {
    id: number | null
  }

  export type TeamSumAggregateOutputType = {
    id: number | null
  }

  export type TeamMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    logo: string | null
  }

  export type TeamMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    logo: string | null
  }

  export type TeamCountAggregateOutputType = {
    id: number
    nombre: number
    logo: number
    _all: number
  }


  export type TeamAvgAggregateInputType = {
    id?: true
  }

  export type TeamSumAggregateInputType = {
    id?: true
  }

  export type TeamMinAggregateInputType = {
    id?: true
    nombre?: true
    logo?: true
  }

  export type TeamMaxAggregateInputType = {
    id?: true
    nombre?: true
    logo?: true
  }

  export type TeamCountAggregateInputType = {
    id?: true
    nombre?: true
    logo?: true
    _all?: true
  }

  export type TeamAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Team to aggregate.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teams
    **/
    _count?: true | TeamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeamAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeamSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamMaxAggregateInputType
  }

  export type GetTeamAggregateType<T extends TeamAggregateArgs> = {
        [P in keyof T & keyof AggregateTeam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeam[P]>
      : GetScalarType<T[P], AggregateTeam[P]>
  }




  export type TeamGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamWhereInput
    orderBy?: TeamOrderByWithAggregationInput | TeamOrderByWithAggregationInput[]
    by: TeamScalarFieldEnum[] | TeamScalarFieldEnum
    having?: TeamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamCountAggregateInputType | true
    _avg?: TeamAvgAggregateInputType
    _sum?: TeamSumAggregateInputType
    _min?: TeamMinAggregateInputType
    _max?: TeamMaxAggregateInputType
  }

  export type TeamGroupByOutputType = {
    id: number
    nombre: string
    logo: string | null
    _count: TeamCountAggregateOutputType | null
    _avg: TeamAvgAggregateOutputType | null
    _sum: TeamSumAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  type GetTeamGroupByPayload<T extends TeamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamGroupByOutputType[P]>
            : GetScalarType<T[P], TeamGroupByOutputType[P]>
        }
      >
    >


  export type TeamSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    logo?: boolean
    players?: boolean | Team$playersArgs<ExtArgs>
    homeGames?: boolean | Team$homeGamesArgs<ExtArgs>
    awayGames?: boolean | Team$awayGamesArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["team"]>

  export type TeamSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    logo?: boolean
  }, ExtArgs["result"]["team"]>

  export type TeamSelectScalar = {
    id?: boolean
    nombre?: boolean
    logo?: boolean
  }

  export type TeamInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    players?: boolean | Team$playersArgs<ExtArgs>
    homeGames?: boolean | Team$homeGamesArgs<ExtArgs>
    awayGames?: boolean | Team$awayGamesArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TeamIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TeamPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Team"
    objects: {
      players: Prisma.$PlayerPayload<ExtArgs>[]
      homeGames: Prisma.$GamePayload<ExtArgs>[]
      awayGames: Prisma.$GamePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      logo: string | null
    }, ExtArgs["result"]["team"]>
    composites: {}
  }

  type TeamGetPayload<S extends boolean | null | undefined | TeamDefaultArgs> = $Result.GetResult<Prisma.$TeamPayload, S>

  type TeamCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TeamFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TeamCountAggregateInputType | true
    }

  export interface TeamDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Team'], meta: { name: 'Team' } }
    /**
     * Find zero or one Team that matches the filter.
     * @param {TeamFindUniqueArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamFindUniqueArgs>(args: SelectSubset<T, TeamFindUniqueArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Team that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TeamFindUniqueOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Team that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamFindFirstArgs>(args?: SelectSubset<T, TeamFindFirstArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Team that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Teams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teams
     * const teams = await prisma.team.findMany()
     * 
     * // Get first 10 Teams
     * const teams = await prisma.team.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamWithIdOnly = await prisma.team.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeamFindManyArgs>(args?: SelectSubset<T, TeamFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Team.
     * @param {TeamCreateArgs} args - Arguments to create a Team.
     * @example
     * // Create one Team
     * const Team = await prisma.team.create({
     *   data: {
     *     // ... data to create a Team
     *   }
     * })
     * 
     */
    create<T extends TeamCreateArgs>(args: SelectSubset<T, TeamCreateArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Teams.
     * @param {TeamCreateManyArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const team = await prisma.team.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamCreateManyArgs>(args?: SelectSubset<T, TeamCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Teams and returns the data saved in the database.
     * @param {TeamCreateManyAndReturnArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const team = await prisma.team.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Teams and only return the `id`
     * const teamWithIdOnly = await prisma.team.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeamCreateManyAndReturnArgs>(args?: SelectSubset<T, TeamCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Team.
     * @param {TeamDeleteArgs} args - Arguments to delete one Team.
     * @example
     * // Delete one Team
     * const Team = await prisma.team.delete({
     *   where: {
     *     // ... filter to delete one Team
     *   }
     * })
     * 
     */
    delete<T extends TeamDeleteArgs>(args: SelectSubset<T, TeamDeleteArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Team.
     * @param {TeamUpdateArgs} args - Arguments to update one Team.
     * @example
     * // Update one Team
     * const team = await prisma.team.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamUpdateArgs>(args: SelectSubset<T, TeamUpdateArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Teams.
     * @param {TeamDeleteManyArgs} args - Arguments to filter Teams to delete.
     * @example
     * // Delete a few Teams
     * const { count } = await prisma.team.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamDeleteManyArgs>(args?: SelectSubset<T, TeamDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teams
     * const team = await prisma.team.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamUpdateManyArgs>(args: SelectSubset<T, TeamUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Team.
     * @param {TeamUpsertArgs} args - Arguments to update or create a Team.
     * @example
     * // Update or create a Team
     * const team = await prisma.team.upsert({
     *   create: {
     *     // ... data to create a Team
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Team we want to update
     *   }
     * })
     */
    upsert<T extends TeamUpsertArgs>(args: SelectSubset<T, TeamUpsertArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamCountArgs} args - Arguments to filter Teams to count.
     * @example
     * // Count the number of Teams
     * const count = await prisma.team.count({
     *   where: {
     *     // ... the filter for the Teams we want to count
     *   }
     * })
    **/
    count<T extends TeamCountArgs>(
      args?: Subset<T, TeamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamAggregateArgs>(args: Subset<T, TeamAggregateArgs>): Prisma.PrismaPromise<GetTeamAggregateType<T>>

    /**
     * Group by Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamGroupByArgs['orderBy'] }
        : { orderBy?: TeamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Team model
   */
  readonly fields: TeamFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Team.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    players<T extends Team$playersArgs<ExtArgs> = {}>(args?: Subset<T, Team$playersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findMany"> | Null>
    homeGames<T extends Team$homeGamesArgs<ExtArgs> = {}>(args?: Subset<T, Team$homeGamesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findMany"> | Null>
    awayGames<T extends Team$awayGamesArgs<ExtArgs> = {}>(args?: Subset<T, Team$awayGamesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Team model
   */ 
  interface TeamFieldRefs {
    readonly id: FieldRef<"Team", 'Int'>
    readonly nombre: FieldRef<"Team", 'String'>
    readonly logo: FieldRef<"Team", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Team findUnique
   */
  export type TeamFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findUniqueOrThrow
   */
  export type TeamFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findFirst
   */
  export type TeamFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findFirstOrThrow
   */
  export type TeamFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findMany
   */
  export type TeamFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Teams to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team create
   */
  export type TeamCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to create a Team.
     */
    data: XOR<TeamCreateInput, TeamUncheckedCreateInput>
  }

  /**
   * Team createMany
   */
  export type TeamCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teams.
     */
    data: TeamCreateManyInput | TeamCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Team createManyAndReturn
   */
  export type TeamCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Teams.
     */
    data: TeamCreateManyInput | TeamCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Team update
   */
  export type TeamUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to update a Team.
     */
    data: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
    /**
     * Choose, which Team to update.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team updateMany
   */
  export type TeamUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teams.
     */
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     */
    where?: TeamWhereInput
  }

  /**
   * Team upsert
   */
  export type TeamUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The filter to search for the Team to update in case it exists.
     */
    where: TeamWhereUniqueInput
    /**
     * In case the Team found by the `where` argument doesn't exist, create a new Team with this data.
     */
    create: XOR<TeamCreateInput, TeamUncheckedCreateInput>
    /**
     * In case the Team was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
  }

  /**
   * Team delete
   */
  export type TeamDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter which Team to delete.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team deleteMany
   */
  export type TeamDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teams to delete
     */
    where?: TeamWhereInput
  }

  /**
   * Team.players
   */
  export type Team$playersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    where?: PlayerWhereInput
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    cursor?: PlayerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * Team.homeGames
   */
  export type Team$homeGamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    where?: GameWhereInput
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    cursor?: GameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Team.awayGames
   */
  export type Team$awayGamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    where?: GameWhereInput
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    cursor?: GameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Team without action
   */
  export type TeamDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
  }


  /**
   * Model Player
   */

  export type AggregatePlayer = {
    _count: PlayerCountAggregateOutputType | null
    _avg: PlayerAvgAggregateOutputType | null
    _sum: PlayerSumAggregateOutputType | null
    _min: PlayerMinAggregateOutputType | null
    _max: PlayerMaxAggregateOutputType | null
  }

  export type PlayerAvgAggregateOutputType = {
    id: number | null
    numero: number | null
    teamId: number | null
  }

  export type PlayerSumAggregateOutputType = {
    id: number | null
    numero: number | null
    teamId: number | null
  }

  export type PlayerMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    apellido: string | null
    numero: number | null
    posicion: string | null
    teamId: number | null
  }

  export type PlayerMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    apellido: string | null
    numero: number | null
    posicion: string | null
    teamId: number | null
  }

  export type PlayerCountAggregateOutputType = {
    id: number
    nombre: number
    apellido: number
    numero: number
    posicion: number
    teamId: number
    _all: number
  }


  export type PlayerAvgAggregateInputType = {
    id?: true
    numero?: true
    teamId?: true
  }

  export type PlayerSumAggregateInputType = {
    id?: true
    numero?: true
    teamId?: true
  }

  export type PlayerMinAggregateInputType = {
    id?: true
    nombre?: true
    apellido?: true
    numero?: true
    posicion?: true
    teamId?: true
  }

  export type PlayerMaxAggregateInputType = {
    id?: true
    nombre?: true
    apellido?: true
    numero?: true
    posicion?: true
    teamId?: true
  }

  export type PlayerCountAggregateInputType = {
    id?: true
    nombre?: true
    apellido?: true
    numero?: true
    posicion?: true
    teamId?: true
    _all?: true
  }

  export type PlayerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Player to aggregate.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Players
    **/
    _count?: true | PlayerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlayerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlayerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlayerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlayerMaxAggregateInputType
  }

  export type GetPlayerAggregateType<T extends PlayerAggregateArgs> = {
        [P in keyof T & keyof AggregatePlayer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlayer[P]>
      : GetScalarType<T[P], AggregatePlayer[P]>
  }




  export type PlayerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerWhereInput
    orderBy?: PlayerOrderByWithAggregationInput | PlayerOrderByWithAggregationInput[]
    by: PlayerScalarFieldEnum[] | PlayerScalarFieldEnum
    having?: PlayerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlayerCountAggregateInputType | true
    _avg?: PlayerAvgAggregateInputType
    _sum?: PlayerSumAggregateInputType
    _min?: PlayerMinAggregateInputType
    _max?: PlayerMaxAggregateInputType
  }

  export type PlayerGroupByOutputType = {
    id: number
    nombre: string
    apellido: string
    numero: number
    posicion: string
    teamId: number
    _count: PlayerCountAggregateOutputType | null
    _avg: PlayerAvgAggregateOutputType | null
    _sum: PlayerSumAggregateOutputType | null
    _min: PlayerMinAggregateOutputType | null
    _max: PlayerMaxAggregateOutputType | null
  }

  type GetPlayerGroupByPayload<T extends PlayerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlayerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlayerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlayerGroupByOutputType[P]>
            : GetScalarType<T[P], PlayerGroupByOutputType[P]>
        }
      >
    >


  export type PlayerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    apellido?: boolean
    numero?: boolean
    posicion?: boolean
    teamId?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
    stats?: boolean | Player$statsArgs<ExtArgs>
    substitutionsIn?: boolean | Player$substitutionsInArgs<ExtArgs>
    substitutionsOut?: boolean | Player$substitutionsOutArgs<ExtArgs>
    activeInGames?: boolean | Player$activeInGamesArgs<ExtArgs>
    _count?: boolean | PlayerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["player"]>

  export type PlayerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    apellido?: boolean
    numero?: boolean
    posicion?: boolean
    teamId?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["player"]>

  export type PlayerSelectScalar = {
    id?: boolean
    nombre?: boolean
    apellido?: boolean
    numero?: boolean
    posicion?: boolean
    teamId?: boolean
  }

  export type PlayerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
    stats?: boolean | Player$statsArgs<ExtArgs>
    substitutionsIn?: boolean | Player$substitutionsInArgs<ExtArgs>
    substitutionsOut?: boolean | Player$substitutionsOutArgs<ExtArgs>
    activeInGames?: boolean | Player$activeInGamesArgs<ExtArgs>
    _count?: boolean | PlayerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PlayerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }

  export type $PlayerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Player"
    objects: {
      team: Prisma.$TeamPayload<ExtArgs>
      stats: Prisma.$PlayerGameStatsPayload<ExtArgs>[]
      substitutionsIn: Prisma.$SubstitutionPayload<ExtArgs>[]
      substitutionsOut: Prisma.$SubstitutionPayload<ExtArgs>[]
      activeInGames: Prisma.$GamePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      apellido: string
      numero: number
      posicion: string
      teamId: number
    }, ExtArgs["result"]["player"]>
    composites: {}
  }

  type PlayerGetPayload<S extends boolean | null | undefined | PlayerDefaultArgs> = $Result.GetResult<Prisma.$PlayerPayload, S>

  type PlayerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PlayerFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PlayerCountAggregateInputType | true
    }

  export interface PlayerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Player'], meta: { name: 'Player' } }
    /**
     * Find zero or one Player that matches the filter.
     * @param {PlayerFindUniqueArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlayerFindUniqueArgs>(args: SelectSubset<T, PlayerFindUniqueArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Player that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PlayerFindUniqueOrThrowArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlayerFindUniqueOrThrowArgs>(args: SelectSubset<T, PlayerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Player that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindFirstArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlayerFindFirstArgs>(args?: SelectSubset<T, PlayerFindFirstArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Player that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindFirstOrThrowArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlayerFindFirstOrThrowArgs>(args?: SelectSubset<T, PlayerFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Players that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Players
     * const players = await prisma.player.findMany()
     * 
     * // Get first 10 Players
     * const players = await prisma.player.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const playerWithIdOnly = await prisma.player.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlayerFindManyArgs>(args?: SelectSubset<T, PlayerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Player.
     * @param {PlayerCreateArgs} args - Arguments to create a Player.
     * @example
     * // Create one Player
     * const Player = await prisma.player.create({
     *   data: {
     *     // ... data to create a Player
     *   }
     * })
     * 
     */
    create<T extends PlayerCreateArgs>(args: SelectSubset<T, PlayerCreateArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Players.
     * @param {PlayerCreateManyArgs} args - Arguments to create many Players.
     * @example
     * // Create many Players
     * const player = await prisma.player.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlayerCreateManyArgs>(args?: SelectSubset<T, PlayerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Players and returns the data saved in the database.
     * @param {PlayerCreateManyAndReturnArgs} args - Arguments to create many Players.
     * @example
     * // Create many Players
     * const player = await prisma.player.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Players and only return the `id`
     * const playerWithIdOnly = await prisma.player.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlayerCreateManyAndReturnArgs>(args?: SelectSubset<T, PlayerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Player.
     * @param {PlayerDeleteArgs} args - Arguments to delete one Player.
     * @example
     * // Delete one Player
     * const Player = await prisma.player.delete({
     *   where: {
     *     // ... filter to delete one Player
     *   }
     * })
     * 
     */
    delete<T extends PlayerDeleteArgs>(args: SelectSubset<T, PlayerDeleteArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Player.
     * @param {PlayerUpdateArgs} args - Arguments to update one Player.
     * @example
     * // Update one Player
     * const player = await prisma.player.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlayerUpdateArgs>(args: SelectSubset<T, PlayerUpdateArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Players.
     * @param {PlayerDeleteManyArgs} args - Arguments to filter Players to delete.
     * @example
     * // Delete a few Players
     * const { count } = await prisma.player.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlayerDeleteManyArgs>(args?: SelectSubset<T, PlayerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Players.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Players
     * const player = await prisma.player.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlayerUpdateManyArgs>(args: SelectSubset<T, PlayerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Player.
     * @param {PlayerUpsertArgs} args - Arguments to update or create a Player.
     * @example
     * // Update or create a Player
     * const player = await prisma.player.upsert({
     *   create: {
     *     // ... data to create a Player
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Player we want to update
     *   }
     * })
     */
    upsert<T extends PlayerUpsertArgs>(args: SelectSubset<T, PlayerUpsertArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Players.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerCountArgs} args - Arguments to filter Players to count.
     * @example
     * // Count the number of Players
     * const count = await prisma.player.count({
     *   where: {
     *     // ... the filter for the Players we want to count
     *   }
     * })
    **/
    count<T extends PlayerCountArgs>(
      args?: Subset<T, PlayerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlayerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Player.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlayerAggregateArgs>(args: Subset<T, PlayerAggregateArgs>): Prisma.PrismaPromise<GetPlayerAggregateType<T>>

    /**
     * Group by Player.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlayerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlayerGroupByArgs['orderBy'] }
        : { orderBy?: PlayerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlayerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlayerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Player model
   */
  readonly fields: PlayerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Player.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlayerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    stats<T extends Player$statsArgs<ExtArgs> = {}>(args?: Subset<T, Player$statsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerGameStatsPayload<ExtArgs>, T, "findMany"> | Null>
    substitutionsIn<T extends Player$substitutionsInArgs<ExtArgs> = {}>(args?: Subset<T, Player$substitutionsInArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubstitutionPayload<ExtArgs>, T, "findMany"> | Null>
    substitutionsOut<T extends Player$substitutionsOutArgs<ExtArgs> = {}>(args?: Subset<T, Player$substitutionsOutArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubstitutionPayload<ExtArgs>, T, "findMany"> | Null>
    activeInGames<T extends Player$activeInGamesArgs<ExtArgs> = {}>(args?: Subset<T, Player$activeInGamesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Player model
   */ 
  interface PlayerFieldRefs {
    readonly id: FieldRef<"Player", 'Int'>
    readonly nombre: FieldRef<"Player", 'String'>
    readonly apellido: FieldRef<"Player", 'String'>
    readonly numero: FieldRef<"Player", 'Int'>
    readonly posicion: FieldRef<"Player", 'String'>
    readonly teamId: FieldRef<"Player", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Player findUnique
   */
  export type PlayerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player findUniqueOrThrow
   */
  export type PlayerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player findFirst
   */
  export type PlayerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Players.
     */
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * Player findFirstOrThrow
   */
  export type PlayerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Players.
     */
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * Player findMany
   */
  export type PlayerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Players to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * Player create
   */
  export type PlayerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * The data needed to create a Player.
     */
    data: XOR<PlayerCreateInput, PlayerUncheckedCreateInput>
  }

  /**
   * Player createMany
   */
  export type PlayerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Players.
     */
    data: PlayerCreateManyInput | PlayerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Player createManyAndReturn
   */
  export type PlayerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Players.
     */
    data: PlayerCreateManyInput | PlayerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Player update
   */
  export type PlayerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * The data needed to update a Player.
     */
    data: XOR<PlayerUpdateInput, PlayerUncheckedUpdateInput>
    /**
     * Choose, which Player to update.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player updateMany
   */
  export type PlayerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Players.
     */
    data: XOR<PlayerUpdateManyMutationInput, PlayerUncheckedUpdateManyInput>
    /**
     * Filter which Players to update
     */
    where?: PlayerWhereInput
  }

  /**
   * Player upsert
   */
  export type PlayerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * The filter to search for the Player to update in case it exists.
     */
    where: PlayerWhereUniqueInput
    /**
     * In case the Player found by the `where` argument doesn't exist, create a new Player with this data.
     */
    create: XOR<PlayerCreateInput, PlayerUncheckedCreateInput>
    /**
     * In case the Player was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlayerUpdateInput, PlayerUncheckedUpdateInput>
  }

  /**
   * Player delete
   */
  export type PlayerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter which Player to delete.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player deleteMany
   */
  export type PlayerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Players to delete
     */
    where?: PlayerWhereInput
  }

  /**
   * Player.stats
   */
  export type Player$statsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerGameStats
     */
    select?: PlayerGameStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerGameStatsInclude<ExtArgs> | null
    where?: PlayerGameStatsWhereInput
    orderBy?: PlayerGameStatsOrderByWithRelationInput | PlayerGameStatsOrderByWithRelationInput[]
    cursor?: PlayerGameStatsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlayerGameStatsScalarFieldEnum | PlayerGameStatsScalarFieldEnum[]
  }

  /**
   * Player.substitutionsIn
   */
  export type Player$substitutionsInArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Substitution
     */
    select?: SubstitutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubstitutionInclude<ExtArgs> | null
    where?: SubstitutionWhereInput
    orderBy?: SubstitutionOrderByWithRelationInput | SubstitutionOrderByWithRelationInput[]
    cursor?: SubstitutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubstitutionScalarFieldEnum | SubstitutionScalarFieldEnum[]
  }

  /**
   * Player.substitutionsOut
   */
  export type Player$substitutionsOutArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Substitution
     */
    select?: SubstitutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubstitutionInclude<ExtArgs> | null
    where?: SubstitutionWhereInput
    orderBy?: SubstitutionOrderByWithRelationInput | SubstitutionOrderByWithRelationInput[]
    cursor?: SubstitutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubstitutionScalarFieldEnum | SubstitutionScalarFieldEnum[]
  }

  /**
   * Player.activeInGames
   */
  export type Player$activeInGamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    where?: GameWhereInput
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    cursor?: GameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Player without action
   */
  export type PlayerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
  }


  /**
   * Model Event
   */

  export type AggregateEvent = {
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  export type EventAvgAggregateOutputType = {
    id: number | null
  }

  export type EventSumAggregateOutputType = {
    id: number | null
  }

  export type EventMinAggregateOutputType = {
    id: number | null
    nombre: string | null
    fechaInicio: Date | null
    fechaFin: Date | null
  }

  export type EventMaxAggregateOutputType = {
    id: number | null
    nombre: string | null
    fechaInicio: Date | null
    fechaFin: Date | null
  }

  export type EventCountAggregateOutputType = {
    id: number
    nombre: number
    fechaInicio: number
    fechaFin: number
    _all: number
  }


  export type EventAvgAggregateInputType = {
    id?: true
  }

  export type EventSumAggregateInputType = {
    id?: true
  }

  export type EventMinAggregateInputType = {
    id?: true
    nombre?: true
    fechaInicio?: true
    fechaFin?: true
  }

  export type EventMaxAggregateInputType = {
    id?: true
    nombre?: true
    fechaInicio?: true
    fechaFin?: true
  }

  export type EventCountAggregateInputType = {
    id?: true
    nombre?: true
    fechaInicio?: true
    fechaFin?: true
    _all?: true
  }

  export type EventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Event to aggregate.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Events
    **/
    _count?: true | EventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventMaxAggregateInputType
  }

  export type GetEventAggregateType<T extends EventAggregateArgs> = {
        [P in keyof T & keyof AggregateEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvent[P]>
      : GetScalarType<T[P], AggregateEvent[P]>
  }




  export type EventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
    orderBy?: EventOrderByWithAggregationInput | EventOrderByWithAggregationInput[]
    by: EventScalarFieldEnum[] | EventScalarFieldEnum
    having?: EventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventCountAggregateInputType | true
    _avg?: EventAvgAggregateInputType
    _sum?: EventSumAggregateInputType
    _min?: EventMinAggregateInputType
    _max?: EventMaxAggregateInputType
  }

  export type EventGroupByOutputType = {
    id: number
    nombre: string
    fechaInicio: Date
    fechaFin: Date
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  type GetEventGroupByPayload<T extends EventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventGroupByOutputType[P]>
            : GetScalarType<T[P], EventGroupByOutputType[P]>
        }
      >
    >


  export type EventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    fechaInicio?: boolean
    fechaFin?: boolean
    games?: boolean | Event$gamesArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nombre?: boolean
    fechaInicio?: boolean
    fechaFin?: boolean
  }, ExtArgs["result"]["event"]>

  export type EventSelectScalar = {
    id?: boolean
    nombre?: boolean
    fechaInicio?: boolean
    fechaFin?: boolean
  }

  export type EventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    games?: boolean | Event$gamesArgs<ExtArgs>
    _count?: boolean | EventCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $EventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Event"
    objects: {
      games: Prisma.$GamePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nombre: string
      fechaInicio: Date
      fechaFin: Date
    }, ExtArgs["result"]["event"]>
    composites: {}
  }

  type EventGetPayload<S extends boolean | null | undefined | EventDefaultArgs> = $Result.GetResult<Prisma.$EventPayload, S>

  type EventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EventFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EventCountAggregateInputType | true
    }

  export interface EventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Event'], meta: { name: 'Event' } }
    /**
     * Find zero or one Event that matches the filter.
     * @param {EventFindUniqueArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EventFindUniqueArgs>(args: SelectSubset<T, EventFindUniqueArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Event that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {EventFindUniqueOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EventFindUniqueOrThrowArgs>(args: SelectSubset<T, EventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Event that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EventFindFirstArgs>(args?: SelectSubset<T, EventFindFirstArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Event that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EventFindFirstOrThrowArgs>(args?: SelectSubset<T, EventFindFirstOrThrowArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.event.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.event.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const eventWithIdOnly = await prisma.event.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EventFindManyArgs>(args?: SelectSubset<T, EventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Event.
     * @param {EventCreateArgs} args - Arguments to create a Event.
     * @example
     * // Create one Event
     * const Event = await prisma.event.create({
     *   data: {
     *     // ... data to create a Event
     *   }
     * })
     * 
     */
    create<T extends EventCreateArgs>(args: SelectSubset<T, EventCreateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Events.
     * @param {EventCreateManyArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EventCreateManyArgs>(args?: SelectSubset<T, EventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Events and returns the data saved in the database.
     * @param {EventCreateManyAndReturnArgs} args - Arguments to create many Events.
     * @example
     * // Create many Events
     * const event = await prisma.event.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Events and only return the `id`
     * const eventWithIdOnly = await prisma.event.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EventCreateManyAndReturnArgs>(args?: SelectSubset<T, EventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Event.
     * @param {EventDeleteArgs} args - Arguments to delete one Event.
     * @example
     * // Delete one Event
     * const Event = await prisma.event.delete({
     *   where: {
     *     // ... filter to delete one Event
     *   }
     * })
     * 
     */
    delete<T extends EventDeleteArgs>(args: SelectSubset<T, EventDeleteArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Event.
     * @param {EventUpdateArgs} args - Arguments to update one Event.
     * @example
     * // Update one Event
     * const event = await prisma.event.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EventUpdateArgs>(args: SelectSubset<T, EventUpdateArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Events.
     * @param {EventDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.event.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EventDeleteManyArgs>(args?: SelectSubset<T, EventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EventUpdateManyArgs>(args: SelectSubset<T, EventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Event.
     * @param {EventUpsertArgs} args - Arguments to update or create a Event.
     * @example
     * // Update or create a Event
     * const event = await prisma.event.upsert({
     *   create: {
     *     // ... data to create a Event
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Event we want to update
     *   }
     * })
     */
    upsert<T extends EventUpsertArgs>(args: SelectSubset<T, EventUpsertArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.event.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends EventCountArgs>(
      args?: Subset<T, EventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventAggregateArgs>(args: Subset<T, EventAggregateArgs>): Prisma.PrismaPromise<GetEventAggregateType<T>>

    /**
     * Group by Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventGroupByArgs['orderBy'] }
        : { orderBy?: EventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Event model
   */
  readonly fields: EventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Event.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    games<T extends Event$gamesArgs<ExtArgs> = {}>(args?: Subset<T, Event$gamesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Event model
   */ 
  interface EventFieldRefs {
    readonly id: FieldRef<"Event", 'Int'>
    readonly nombre: FieldRef<"Event", 'String'>
    readonly fechaInicio: FieldRef<"Event", 'DateTime'>
    readonly fechaFin: FieldRef<"Event", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Event findUnique
   */
  export type EventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findUniqueOrThrow
   */
  export type EventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event findFirst
   */
  export type EventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findFirstOrThrow
   */
  export type EventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event findMany
   */
  export type EventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }

  /**
   * Event create
   */
  export type EventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to create a Event.
     */
    data: XOR<EventCreateInput, EventUncheckedCreateInput>
  }

  /**
   * Event createMany
   */
  export type EventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Event createManyAndReturn
   */
  export type EventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Event update
   */
  export type EventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to update a Event.
     */
    data: XOR<EventUpdateInput, EventUncheckedUpdateInput>
    /**
     * Choose, which Event to update.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event updateMany
   */
  export type EventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
  }

  /**
   * Event upsert
   */
  export type EventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The filter to search for the Event to update in case it exists.
     */
    where: EventWhereUniqueInput
    /**
     * In case the Event found by the `where` argument doesn't exist, create a new Event with this data.
     */
    create: XOR<EventCreateInput, EventUncheckedCreateInput>
    /**
     * In case the Event was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventUpdateInput, EventUncheckedUpdateInput>
  }

  /**
   * Event delete
   */
  export type EventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter which Event to delete.
     */
    where: EventWhereUniqueInput
  }

  /**
   * Event deleteMany
   */
  export type EventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Events to delete
     */
    where?: EventWhereInput
  }

  /**
   * Event.games
   */
  export type Event$gamesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    where?: GameWhereInput
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    cursor?: GameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Event without action
   */
  export type EventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EventInclude<ExtArgs> | null
  }


  /**
   * Model Game
   */

  export type AggregateGame = {
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  export type GameAvgAggregateOutputType = {
    id: number | null
    eventId: number | null
    teamHomeId: number | null
    teamAwayId: number | null
    gameTime: number | null
    homeScore: number | null
    awayScore: number | null
    currentQuarter: number | null
    quarterLength: number | null
    totalQuarters: number | null
    overtimeLength: number | null
    quarterTime: number | null
  }

  export type GameSumAggregateOutputType = {
    id: number | null
    eventId: number | null
    teamHomeId: number | null
    teamAwayId: number | null
    gameTime: number | null
    homeScore: number | null
    awayScore: number | null
    currentQuarter: number | null
    quarterLength: number | null
    totalQuarters: number | null
    overtimeLength: number | null
    quarterTime: number | null
  }

  export type GameMinAggregateOutputType = {
    id: number | null
    eventId: number | null
    teamHomeId: number | null
    teamAwayId: number | null
    fecha: Date | null
    estado: string | null
    gameTime: number | null
    homeScore: number | null
    awayScore: number | null
    currentQuarter: number | null
    quarterLength: number | null
    totalQuarters: number | null
    overtimeLength: number | null
    quarterTime: number | null
    isOvertime: boolean | null
  }

  export type GameMaxAggregateOutputType = {
    id: number | null
    eventId: number | null
    teamHomeId: number | null
    teamAwayId: number | null
    fecha: Date | null
    estado: string | null
    gameTime: number | null
    homeScore: number | null
    awayScore: number | null
    currentQuarter: number | null
    quarterLength: number | null
    totalQuarters: number | null
    overtimeLength: number | null
    quarterTime: number | null
    isOvertime: boolean | null
  }

  export type GameCountAggregateOutputType = {
    id: number
    eventId: number
    teamHomeId: number
    teamAwayId: number
    fecha: number
    estado: number
    gameTime: number
    homeScore: number
    awayScore: number
    currentQuarter: number
    quarterLength: number
    totalQuarters: number
    overtimeLength: number
    quarterTime: number
    isOvertime: number
    _all: number
  }


  export type GameAvgAggregateInputType = {
    id?: true
    eventId?: true
    teamHomeId?: true
    teamAwayId?: true
    gameTime?: true
    homeScore?: true
    awayScore?: true
    currentQuarter?: true
    quarterLength?: true
    totalQuarters?: true
    overtimeLength?: true
    quarterTime?: true
  }

  export type GameSumAggregateInputType = {
    id?: true
    eventId?: true
    teamHomeId?: true
    teamAwayId?: true
    gameTime?: true
    homeScore?: true
    awayScore?: true
    currentQuarter?: true
    quarterLength?: true
    totalQuarters?: true
    overtimeLength?: true
    quarterTime?: true
  }

  export type GameMinAggregateInputType = {
    id?: true
    eventId?: true
    teamHomeId?: true
    teamAwayId?: true
    fecha?: true
    estado?: true
    gameTime?: true
    homeScore?: true
    awayScore?: true
    currentQuarter?: true
    quarterLength?: true
    totalQuarters?: true
    overtimeLength?: true
    quarterTime?: true
    isOvertime?: true
  }

  export type GameMaxAggregateInputType = {
    id?: true
    eventId?: true
    teamHomeId?: true
    teamAwayId?: true
    fecha?: true
    estado?: true
    gameTime?: true
    homeScore?: true
    awayScore?: true
    currentQuarter?: true
    quarterLength?: true
    totalQuarters?: true
    overtimeLength?: true
    quarterTime?: true
    isOvertime?: true
  }

  export type GameCountAggregateInputType = {
    id?: true
    eventId?: true
    teamHomeId?: true
    teamAwayId?: true
    fecha?: true
    estado?: true
    gameTime?: true
    homeScore?: true
    awayScore?: true
    currentQuarter?: true
    quarterLength?: true
    totalQuarters?: true
    overtimeLength?: true
    quarterTime?: true
    isOvertime?: true
    _all?: true
  }

  export type GameAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Game to aggregate.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Games
    **/
    _count?: true | GameCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameMaxAggregateInputType
  }

  export type GetGameAggregateType<T extends GameAggregateArgs> = {
        [P in keyof T & keyof AggregateGame]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGame[P]>
      : GetScalarType<T[P], AggregateGame[P]>
  }




  export type GameGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
    orderBy?: GameOrderByWithAggregationInput | GameOrderByWithAggregationInput[]
    by: GameScalarFieldEnum[] | GameScalarFieldEnum
    having?: GameScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameCountAggregateInputType | true
    _avg?: GameAvgAggregateInputType
    _sum?: GameSumAggregateInputType
    _min?: GameMinAggregateInputType
    _max?: GameMaxAggregateInputType
  }

  export type GameGroupByOutputType = {
    id: number
    eventId: number
    teamHomeId: number
    teamAwayId: number
    fecha: Date
    estado: string
    gameTime: number
    homeScore: number
    awayScore: number
    currentQuarter: number
    quarterLength: number
    totalQuarters: number
    overtimeLength: number
    quarterTime: number
    isOvertime: boolean
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  type GetGameGroupByPayload<T extends GameGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GameGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameGroupByOutputType[P]>
            : GetScalarType<T[P], GameGroupByOutputType[P]>
        }
      >
    >


  export type GameSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    teamHomeId?: boolean
    teamAwayId?: boolean
    fecha?: boolean
    estado?: boolean
    gameTime?: boolean
    homeScore?: boolean
    awayScore?: boolean
    currentQuarter?: boolean
    quarterLength?: boolean
    totalQuarters?: boolean
    overtimeLength?: boolean
    quarterTime?: boolean
    isOvertime?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    teamHome?: boolean | TeamDefaultArgs<ExtArgs>
    teamAway?: boolean | TeamDefaultArgs<ExtArgs>
    stats?: boolean | Game$statsArgs<ExtArgs>
    substitutions?: boolean | Game$substitutionsArgs<ExtArgs>
    activePlayers?: boolean | Game$activePlayersArgs<ExtArgs>
    _count?: boolean | GameCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["game"]>

  export type GameSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventId?: boolean
    teamHomeId?: boolean
    teamAwayId?: boolean
    fecha?: boolean
    estado?: boolean
    gameTime?: boolean
    homeScore?: boolean
    awayScore?: boolean
    currentQuarter?: boolean
    quarterLength?: boolean
    totalQuarters?: boolean
    overtimeLength?: boolean
    quarterTime?: boolean
    isOvertime?: boolean
    event?: boolean | EventDefaultArgs<ExtArgs>
    teamHome?: boolean | TeamDefaultArgs<ExtArgs>
    teamAway?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["game"]>

  export type GameSelectScalar = {
    id?: boolean
    eventId?: boolean
    teamHomeId?: boolean
    teamAwayId?: boolean
    fecha?: boolean
    estado?: boolean
    gameTime?: boolean
    homeScore?: boolean
    awayScore?: boolean
    currentQuarter?: boolean
    quarterLength?: boolean
    totalQuarters?: boolean
    overtimeLength?: boolean
    quarterTime?: boolean
    isOvertime?: boolean
  }

  export type GameInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    teamHome?: boolean | TeamDefaultArgs<ExtArgs>
    teamAway?: boolean | TeamDefaultArgs<ExtArgs>
    stats?: boolean | Game$statsArgs<ExtArgs>
    substitutions?: boolean | Game$substitutionsArgs<ExtArgs>
    activePlayers?: boolean | Game$activePlayersArgs<ExtArgs>
    _count?: boolean | GameCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type GameIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    event?: boolean | EventDefaultArgs<ExtArgs>
    teamHome?: boolean | TeamDefaultArgs<ExtArgs>
    teamAway?: boolean | TeamDefaultArgs<ExtArgs>
  }

  export type $GamePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Game"
    objects: {
      event: Prisma.$EventPayload<ExtArgs>
      teamHome: Prisma.$TeamPayload<ExtArgs>
      teamAway: Prisma.$TeamPayload<ExtArgs>
      stats: Prisma.$PlayerGameStatsPayload<ExtArgs>[]
      substitutions: Prisma.$SubstitutionPayload<ExtArgs>[]
      activePlayers: Prisma.$PlayerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      eventId: number
      teamHomeId: number
      teamAwayId: number
      fecha: Date
      estado: string
      gameTime: number
      homeScore: number
      awayScore: number
      currentQuarter: number
      quarterLength: number
      totalQuarters: number
      overtimeLength: number
      quarterTime: number
      isOvertime: boolean
    }, ExtArgs["result"]["game"]>
    composites: {}
  }

  type GameGetPayload<S extends boolean | null | undefined | GameDefaultArgs> = $Result.GetResult<Prisma.$GamePayload, S>

  type GameCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<GameFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GameCountAggregateInputType | true
    }

  export interface GameDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Game'], meta: { name: 'Game' } }
    /**
     * Find zero or one Game that matches the filter.
     * @param {GameFindUniqueArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GameFindUniqueArgs>(args: SelectSubset<T, GameFindUniqueArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Game that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {GameFindUniqueOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GameFindUniqueOrThrowArgs>(args: SelectSubset<T, GameFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Game that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GameFindFirstArgs>(args?: SelectSubset<T, GameFindFirstArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Game that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GameFindFirstOrThrowArgs>(args?: SelectSubset<T, GameFindFirstOrThrowArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Games that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Games
     * const games = await prisma.game.findMany()
     * 
     * // Get first 10 Games
     * const games = await prisma.game.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameWithIdOnly = await prisma.game.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GameFindManyArgs>(args?: SelectSubset<T, GameFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Game.
     * @param {GameCreateArgs} args - Arguments to create a Game.
     * @example
     * // Create one Game
     * const Game = await prisma.game.create({
     *   data: {
     *     // ... data to create a Game
     *   }
     * })
     * 
     */
    create<T extends GameCreateArgs>(args: SelectSubset<T, GameCreateArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Games.
     * @param {GameCreateManyArgs} args - Arguments to create many Games.
     * @example
     * // Create many Games
     * const game = await prisma.game.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GameCreateManyArgs>(args?: SelectSubset<T, GameCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Games and returns the data saved in the database.
     * @param {GameCreateManyAndReturnArgs} args - Arguments to create many Games.
     * @example
     * // Create many Games
     * const game = await prisma.game.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Games and only return the `id`
     * const gameWithIdOnly = await prisma.game.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends GameCreateManyAndReturnArgs>(args?: SelectSubset<T, GameCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Game.
     * @param {GameDeleteArgs} args - Arguments to delete one Game.
     * @example
     * // Delete one Game
     * const Game = await prisma.game.delete({
     *   where: {
     *     // ... filter to delete one Game
     *   }
     * })
     * 
     */
    delete<T extends GameDeleteArgs>(args: SelectSubset<T, GameDeleteArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Game.
     * @param {GameUpdateArgs} args - Arguments to update one Game.
     * @example
     * // Update one Game
     * const game = await prisma.game.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GameUpdateArgs>(args: SelectSubset<T, GameUpdateArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Games.
     * @param {GameDeleteManyArgs} args - Arguments to filter Games to delete.
     * @example
     * // Delete a few Games
     * const { count } = await prisma.game.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GameDeleteManyArgs>(args?: SelectSubset<T, GameDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Games
     * const game = await prisma.game.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GameUpdateManyArgs>(args: SelectSubset<T, GameUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Game.
     * @param {GameUpsertArgs} args - Arguments to update or create a Game.
     * @example
     * // Update or create a Game
     * const game = await prisma.game.upsert({
     *   create: {
     *     // ... data to create a Game
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Game we want to update
     *   }
     * })
     */
    upsert<T extends GameUpsertArgs>(args: SelectSubset<T, GameUpsertArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCountArgs} args - Arguments to filter Games to count.
     * @example
     * // Count the number of Games
     * const count = await prisma.game.count({
     *   where: {
     *     // ... the filter for the Games we want to count
     *   }
     * })
    **/
    count<T extends GameCountArgs>(
      args?: Subset<T, GameCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameAggregateArgs>(args: Subset<T, GameAggregateArgs>): Prisma.PrismaPromise<GetGameAggregateType<T>>

    /**
     * Group by Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameGroupByArgs['orderBy'] }
        : { orderBy?: GameGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Game model
   */
  readonly fields: GameFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Game.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GameClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    event<T extends EventDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EventDefaultArgs<ExtArgs>>): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    teamHome<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    teamAway<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    stats<T extends Game$statsArgs<ExtArgs> = {}>(args?: Subset<T, Game$statsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerGameStatsPayload<ExtArgs>, T, "findMany"> | Null>
    substitutions<T extends Game$substitutionsArgs<ExtArgs> = {}>(args?: Subset<T, Game$substitutionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubstitutionPayload<ExtArgs>, T, "findMany"> | Null>
    activePlayers<T extends Game$activePlayersArgs<ExtArgs> = {}>(args?: Subset<T, Game$activePlayersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Game model
   */ 
  interface GameFieldRefs {
    readonly id: FieldRef<"Game", 'Int'>
    readonly eventId: FieldRef<"Game", 'Int'>
    readonly teamHomeId: FieldRef<"Game", 'Int'>
    readonly teamAwayId: FieldRef<"Game", 'Int'>
    readonly fecha: FieldRef<"Game", 'DateTime'>
    readonly estado: FieldRef<"Game", 'String'>
    readonly gameTime: FieldRef<"Game", 'Int'>
    readonly homeScore: FieldRef<"Game", 'Int'>
    readonly awayScore: FieldRef<"Game", 'Int'>
    readonly currentQuarter: FieldRef<"Game", 'Int'>
    readonly quarterLength: FieldRef<"Game", 'Int'>
    readonly totalQuarters: FieldRef<"Game", 'Int'>
    readonly overtimeLength: FieldRef<"Game", 'Int'>
    readonly quarterTime: FieldRef<"Game", 'Int'>
    readonly isOvertime: FieldRef<"Game", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Game findUnique
   */
  export type GameFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game findUniqueOrThrow
   */
  export type GameFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game findFirst
   */
  export type GameFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     */
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game findFirstOrThrow
   */
  export type GameFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     */
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game findMany
   */
  export type GameFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Games to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: GameOrderByWithRelationInput | GameOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    distinct?: GameScalarFieldEnum | GameScalarFieldEnum[]
  }

  /**
   * Game create
   */
  export type GameCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The data needed to create a Game.
     */
    data: XOR<GameCreateInput, GameUncheckedCreateInput>
  }

  /**
   * Game createMany
   */
  export type GameCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Games.
     */
    data: GameCreateManyInput | GameCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Game createManyAndReturn
   */
  export type GameCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Games.
     */
    data: GameCreateManyInput | GameCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Game update
   */
  export type GameUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The data needed to update a Game.
     */
    data: XOR<GameUpdateInput, GameUncheckedUpdateInput>
    /**
     * Choose, which Game to update.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game updateMany
   */
  export type GameUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Games.
     */
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyInput>
    /**
     * Filter which Games to update
     */
    where?: GameWhereInput
  }

  /**
   * Game upsert
   */
  export type GameUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The filter to search for the Game to update in case it exists.
     */
    where: GameWhereUniqueInput
    /**
     * In case the Game found by the `where` argument doesn't exist, create a new Game with this data.
     */
    create: XOR<GameCreateInput, GameUncheckedCreateInput>
    /**
     * In case the Game was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameUpdateInput, GameUncheckedUpdateInput>
  }

  /**
   * Game delete
   */
  export type GameDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter which Game to delete.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game deleteMany
   */
  export type GameDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Games to delete
     */
    where?: GameWhereInput
  }

  /**
   * Game.stats
   */
  export type Game$statsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerGameStats
     */
    select?: PlayerGameStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerGameStatsInclude<ExtArgs> | null
    where?: PlayerGameStatsWhereInput
    orderBy?: PlayerGameStatsOrderByWithRelationInput | PlayerGameStatsOrderByWithRelationInput[]
    cursor?: PlayerGameStatsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlayerGameStatsScalarFieldEnum | PlayerGameStatsScalarFieldEnum[]
  }

  /**
   * Game.substitutions
   */
  export type Game$substitutionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Substitution
     */
    select?: SubstitutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubstitutionInclude<ExtArgs> | null
    where?: SubstitutionWhereInput
    orderBy?: SubstitutionOrderByWithRelationInput | SubstitutionOrderByWithRelationInput[]
    cursor?: SubstitutionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubstitutionScalarFieldEnum | SubstitutionScalarFieldEnum[]
  }

  /**
   * Game.activePlayers
   */
  export type Game$activePlayersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    where?: PlayerWhereInput
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    cursor?: PlayerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * Game without action
   */
  export type GameDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GameInclude<ExtArgs> | null
  }


  /**
   * Model PlayerGameStats
   */

  export type AggregatePlayerGameStats = {
    _count: PlayerGameStatsCountAggregateOutputType | null
    _avg: PlayerGameStatsAvgAggregateOutputType | null
    _sum: PlayerGameStatsSumAggregateOutputType | null
    _min: PlayerGameStatsMinAggregateOutputType | null
    _max: PlayerGameStatsMaxAggregateOutputType | null
  }

  export type PlayerGameStatsAvgAggregateOutputType = {
    id: number | null
    gameId: number | null
    playerId: number | null
    puntos: number | null
    rebotes: number | null
    asistencias: number | null
    robos: number | null
    tapones: number | null
    tirosIntentados: number | null
    tirosAnotados: number | null
    tiros3Intentados: number | null
    tiros3Anotados: number | null
    minutos: number | null
    plusMinus: number | null
  }

  export type PlayerGameStatsSumAggregateOutputType = {
    id: number | null
    gameId: number | null
    playerId: number | null
    puntos: number | null
    rebotes: number | null
    asistencias: number | null
    robos: number | null
    tapones: number | null
    tirosIntentados: number | null
    tirosAnotados: number | null
    tiros3Intentados: number | null
    tiros3Anotados: number | null
    minutos: number | null
    plusMinus: number | null
  }

  export type PlayerGameStatsMinAggregateOutputType = {
    id: number | null
    gameId: number | null
    playerId: number | null
    puntos: number | null
    rebotes: number | null
    asistencias: number | null
    robos: number | null
    tapones: number | null
    tirosIntentados: number | null
    tirosAnotados: number | null
    tiros3Intentados: number | null
    tiros3Anotados: number | null
    minutos: number | null
    plusMinus: number | null
  }

  export type PlayerGameStatsMaxAggregateOutputType = {
    id: number | null
    gameId: number | null
    playerId: number | null
    puntos: number | null
    rebotes: number | null
    asistencias: number | null
    robos: number | null
    tapones: number | null
    tirosIntentados: number | null
    tirosAnotados: number | null
    tiros3Intentados: number | null
    tiros3Anotados: number | null
    minutos: number | null
    plusMinus: number | null
  }

  export type PlayerGameStatsCountAggregateOutputType = {
    id: number
    gameId: number
    playerId: number
    puntos: number
    rebotes: number
    asistencias: number
    robos: number
    tapones: number
    tirosIntentados: number
    tirosAnotados: number
    tiros3Intentados: number
    tiros3Anotados: number
    minutos: number
    plusMinus: number
    _all: number
  }


  export type PlayerGameStatsAvgAggregateInputType = {
    id?: true
    gameId?: true
    playerId?: true
    puntos?: true
    rebotes?: true
    asistencias?: true
    robos?: true
    tapones?: true
    tirosIntentados?: true
    tirosAnotados?: true
    tiros3Intentados?: true
    tiros3Anotados?: true
    minutos?: true
    plusMinus?: true
  }

  export type PlayerGameStatsSumAggregateInputType = {
    id?: true
    gameId?: true
    playerId?: true
    puntos?: true
    rebotes?: true
    asistencias?: true
    robos?: true
    tapones?: true
    tirosIntentados?: true
    tirosAnotados?: true
    tiros3Intentados?: true
    tiros3Anotados?: true
    minutos?: true
    plusMinus?: true
  }

  export type PlayerGameStatsMinAggregateInputType = {
    id?: true
    gameId?: true
    playerId?: true
    puntos?: true
    rebotes?: true
    asistencias?: true
    robos?: true
    tapones?: true
    tirosIntentados?: true
    tirosAnotados?: true
    tiros3Intentados?: true
    tiros3Anotados?: true
    minutos?: true
    plusMinus?: true
  }

  export type PlayerGameStatsMaxAggregateInputType = {
    id?: true
    gameId?: true
    playerId?: true
    puntos?: true
    rebotes?: true
    asistencias?: true
    robos?: true
    tapones?: true
    tirosIntentados?: true
    tirosAnotados?: true
    tiros3Intentados?: true
    tiros3Anotados?: true
    minutos?: true
    plusMinus?: true
  }

  export type PlayerGameStatsCountAggregateInputType = {
    id?: true
    gameId?: true
    playerId?: true
    puntos?: true
    rebotes?: true
    asistencias?: true
    robos?: true
    tapones?: true
    tirosIntentados?: true
    tirosAnotados?: true
    tiros3Intentados?: true
    tiros3Anotados?: true
    minutos?: true
    plusMinus?: true
    _all?: true
  }

  export type PlayerGameStatsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlayerGameStats to aggregate.
     */
    where?: PlayerGameStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerGameStats to fetch.
     */
    orderBy?: PlayerGameStatsOrderByWithRelationInput | PlayerGameStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlayerGameStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerGameStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerGameStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlayerGameStats
    **/
    _count?: true | PlayerGameStatsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlayerGameStatsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlayerGameStatsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlayerGameStatsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlayerGameStatsMaxAggregateInputType
  }

  export type GetPlayerGameStatsAggregateType<T extends PlayerGameStatsAggregateArgs> = {
        [P in keyof T & keyof AggregatePlayerGameStats]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlayerGameStats[P]>
      : GetScalarType<T[P], AggregatePlayerGameStats[P]>
  }




  export type PlayerGameStatsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerGameStatsWhereInput
    orderBy?: PlayerGameStatsOrderByWithAggregationInput | PlayerGameStatsOrderByWithAggregationInput[]
    by: PlayerGameStatsScalarFieldEnum[] | PlayerGameStatsScalarFieldEnum
    having?: PlayerGameStatsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlayerGameStatsCountAggregateInputType | true
    _avg?: PlayerGameStatsAvgAggregateInputType
    _sum?: PlayerGameStatsSumAggregateInputType
    _min?: PlayerGameStatsMinAggregateInputType
    _max?: PlayerGameStatsMaxAggregateInputType
  }

  export type PlayerGameStatsGroupByOutputType = {
    id: number
    gameId: number
    playerId: number
    puntos: number
    rebotes: number
    asistencias: number
    robos: number
    tapones: number
    tirosIntentados: number
    tirosAnotados: number
    tiros3Intentados: number
    tiros3Anotados: number
    minutos: number
    plusMinus: number
    _count: PlayerGameStatsCountAggregateOutputType | null
    _avg: PlayerGameStatsAvgAggregateOutputType | null
    _sum: PlayerGameStatsSumAggregateOutputType | null
    _min: PlayerGameStatsMinAggregateOutputType | null
    _max: PlayerGameStatsMaxAggregateOutputType | null
  }

  type GetPlayerGameStatsGroupByPayload<T extends PlayerGameStatsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlayerGameStatsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlayerGameStatsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlayerGameStatsGroupByOutputType[P]>
            : GetScalarType<T[P], PlayerGameStatsGroupByOutputType[P]>
        }
      >
    >


  export type PlayerGameStatsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    gameId?: boolean
    playerId?: boolean
    puntos?: boolean
    rebotes?: boolean
    asistencias?: boolean
    robos?: boolean
    tapones?: boolean
    tirosIntentados?: boolean
    tirosAnotados?: boolean
    tiros3Intentados?: boolean
    tiros3Anotados?: boolean
    minutos?: boolean
    plusMinus?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
    player?: boolean | PlayerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playerGameStats"]>

  export type PlayerGameStatsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    gameId?: boolean
    playerId?: boolean
    puntos?: boolean
    rebotes?: boolean
    asistencias?: boolean
    robos?: boolean
    tapones?: boolean
    tirosIntentados?: boolean
    tirosAnotados?: boolean
    tiros3Intentados?: boolean
    tiros3Anotados?: boolean
    minutos?: boolean
    plusMinus?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
    player?: boolean | PlayerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["playerGameStats"]>

  export type PlayerGameStatsSelectScalar = {
    id?: boolean
    gameId?: boolean
    playerId?: boolean
    puntos?: boolean
    rebotes?: boolean
    asistencias?: boolean
    robos?: boolean
    tapones?: boolean
    tirosIntentados?: boolean
    tirosAnotados?: boolean
    tiros3Intentados?: boolean
    tiros3Anotados?: boolean
    minutos?: boolean
    plusMinus?: boolean
  }

  export type PlayerGameStatsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
    player?: boolean | PlayerDefaultArgs<ExtArgs>
  }
  export type PlayerGameStatsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
    player?: boolean | PlayerDefaultArgs<ExtArgs>
  }

  export type $PlayerGameStatsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PlayerGameStats"
    objects: {
      game: Prisma.$GamePayload<ExtArgs>
      player: Prisma.$PlayerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      gameId: number
      playerId: number
      puntos: number
      rebotes: number
      asistencias: number
      robos: number
      tapones: number
      tirosIntentados: number
      tirosAnotados: number
      tiros3Intentados: number
      tiros3Anotados: number
      minutos: number
      plusMinus: number
    }, ExtArgs["result"]["playerGameStats"]>
    composites: {}
  }

  type PlayerGameStatsGetPayload<S extends boolean | null | undefined | PlayerGameStatsDefaultArgs> = $Result.GetResult<Prisma.$PlayerGameStatsPayload, S>

  type PlayerGameStatsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PlayerGameStatsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PlayerGameStatsCountAggregateInputType | true
    }

  export interface PlayerGameStatsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlayerGameStats'], meta: { name: 'PlayerGameStats' } }
    /**
     * Find zero or one PlayerGameStats that matches the filter.
     * @param {PlayerGameStatsFindUniqueArgs} args - Arguments to find a PlayerGameStats
     * @example
     * // Get one PlayerGameStats
     * const playerGameStats = await prisma.playerGameStats.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlayerGameStatsFindUniqueArgs>(args: SelectSubset<T, PlayerGameStatsFindUniqueArgs<ExtArgs>>): Prisma__PlayerGameStatsClient<$Result.GetResult<Prisma.$PlayerGameStatsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one PlayerGameStats that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PlayerGameStatsFindUniqueOrThrowArgs} args - Arguments to find a PlayerGameStats
     * @example
     * // Get one PlayerGameStats
     * const playerGameStats = await prisma.playerGameStats.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlayerGameStatsFindUniqueOrThrowArgs>(args: SelectSubset<T, PlayerGameStatsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlayerGameStatsClient<$Result.GetResult<Prisma.$PlayerGameStatsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first PlayerGameStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerGameStatsFindFirstArgs} args - Arguments to find a PlayerGameStats
     * @example
     * // Get one PlayerGameStats
     * const playerGameStats = await prisma.playerGameStats.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlayerGameStatsFindFirstArgs>(args?: SelectSubset<T, PlayerGameStatsFindFirstArgs<ExtArgs>>): Prisma__PlayerGameStatsClient<$Result.GetResult<Prisma.$PlayerGameStatsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first PlayerGameStats that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerGameStatsFindFirstOrThrowArgs} args - Arguments to find a PlayerGameStats
     * @example
     * // Get one PlayerGameStats
     * const playerGameStats = await prisma.playerGameStats.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlayerGameStatsFindFirstOrThrowArgs>(args?: SelectSubset<T, PlayerGameStatsFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlayerGameStatsClient<$Result.GetResult<Prisma.$PlayerGameStatsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more PlayerGameStats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerGameStatsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlayerGameStats
     * const playerGameStats = await prisma.playerGameStats.findMany()
     * 
     * // Get first 10 PlayerGameStats
     * const playerGameStats = await prisma.playerGameStats.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const playerGameStatsWithIdOnly = await prisma.playerGameStats.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlayerGameStatsFindManyArgs>(args?: SelectSubset<T, PlayerGameStatsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerGameStatsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a PlayerGameStats.
     * @param {PlayerGameStatsCreateArgs} args - Arguments to create a PlayerGameStats.
     * @example
     * // Create one PlayerGameStats
     * const PlayerGameStats = await prisma.playerGameStats.create({
     *   data: {
     *     // ... data to create a PlayerGameStats
     *   }
     * })
     * 
     */
    create<T extends PlayerGameStatsCreateArgs>(args: SelectSubset<T, PlayerGameStatsCreateArgs<ExtArgs>>): Prisma__PlayerGameStatsClient<$Result.GetResult<Prisma.$PlayerGameStatsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many PlayerGameStats.
     * @param {PlayerGameStatsCreateManyArgs} args - Arguments to create many PlayerGameStats.
     * @example
     * // Create many PlayerGameStats
     * const playerGameStats = await prisma.playerGameStats.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlayerGameStatsCreateManyArgs>(args?: SelectSubset<T, PlayerGameStatsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PlayerGameStats and returns the data saved in the database.
     * @param {PlayerGameStatsCreateManyAndReturnArgs} args - Arguments to create many PlayerGameStats.
     * @example
     * // Create many PlayerGameStats
     * const playerGameStats = await prisma.playerGameStats.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PlayerGameStats and only return the `id`
     * const playerGameStatsWithIdOnly = await prisma.playerGameStats.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlayerGameStatsCreateManyAndReturnArgs>(args?: SelectSubset<T, PlayerGameStatsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerGameStatsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a PlayerGameStats.
     * @param {PlayerGameStatsDeleteArgs} args - Arguments to delete one PlayerGameStats.
     * @example
     * // Delete one PlayerGameStats
     * const PlayerGameStats = await prisma.playerGameStats.delete({
     *   where: {
     *     // ... filter to delete one PlayerGameStats
     *   }
     * })
     * 
     */
    delete<T extends PlayerGameStatsDeleteArgs>(args: SelectSubset<T, PlayerGameStatsDeleteArgs<ExtArgs>>): Prisma__PlayerGameStatsClient<$Result.GetResult<Prisma.$PlayerGameStatsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one PlayerGameStats.
     * @param {PlayerGameStatsUpdateArgs} args - Arguments to update one PlayerGameStats.
     * @example
     * // Update one PlayerGameStats
     * const playerGameStats = await prisma.playerGameStats.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlayerGameStatsUpdateArgs>(args: SelectSubset<T, PlayerGameStatsUpdateArgs<ExtArgs>>): Prisma__PlayerGameStatsClient<$Result.GetResult<Prisma.$PlayerGameStatsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more PlayerGameStats.
     * @param {PlayerGameStatsDeleteManyArgs} args - Arguments to filter PlayerGameStats to delete.
     * @example
     * // Delete a few PlayerGameStats
     * const { count } = await prisma.playerGameStats.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlayerGameStatsDeleteManyArgs>(args?: SelectSubset<T, PlayerGameStatsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlayerGameStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerGameStatsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlayerGameStats
     * const playerGameStats = await prisma.playerGameStats.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlayerGameStatsUpdateManyArgs>(args: SelectSubset<T, PlayerGameStatsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PlayerGameStats.
     * @param {PlayerGameStatsUpsertArgs} args - Arguments to update or create a PlayerGameStats.
     * @example
     * // Update or create a PlayerGameStats
     * const playerGameStats = await prisma.playerGameStats.upsert({
     *   create: {
     *     // ... data to create a PlayerGameStats
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlayerGameStats we want to update
     *   }
     * })
     */
    upsert<T extends PlayerGameStatsUpsertArgs>(args: SelectSubset<T, PlayerGameStatsUpsertArgs<ExtArgs>>): Prisma__PlayerGameStatsClient<$Result.GetResult<Prisma.$PlayerGameStatsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of PlayerGameStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerGameStatsCountArgs} args - Arguments to filter PlayerGameStats to count.
     * @example
     * // Count the number of PlayerGameStats
     * const count = await prisma.playerGameStats.count({
     *   where: {
     *     // ... the filter for the PlayerGameStats we want to count
     *   }
     * })
    **/
    count<T extends PlayerGameStatsCountArgs>(
      args?: Subset<T, PlayerGameStatsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlayerGameStatsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlayerGameStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerGameStatsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlayerGameStatsAggregateArgs>(args: Subset<T, PlayerGameStatsAggregateArgs>): Prisma.PrismaPromise<GetPlayerGameStatsAggregateType<T>>

    /**
     * Group by PlayerGameStats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerGameStatsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlayerGameStatsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlayerGameStatsGroupByArgs['orderBy'] }
        : { orderBy?: PlayerGameStatsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlayerGameStatsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlayerGameStatsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PlayerGameStats model
   */
  readonly fields: PlayerGameStatsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PlayerGameStats.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlayerGameStatsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    game<T extends GameDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameDefaultArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    player<T extends PlayerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlayerDefaultArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PlayerGameStats model
   */ 
  interface PlayerGameStatsFieldRefs {
    readonly id: FieldRef<"PlayerGameStats", 'Int'>
    readonly gameId: FieldRef<"PlayerGameStats", 'Int'>
    readonly playerId: FieldRef<"PlayerGameStats", 'Int'>
    readonly puntos: FieldRef<"PlayerGameStats", 'Int'>
    readonly rebotes: FieldRef<"PlayerGameStats", 'Int'>
    readonly asistencias: FieldRef<"PlayerGameStats", 'Int'>
    readonly robos: FieldRef<"PlayerGameStats", 'Int'>
    readonly tapones: FieldRef<"PlayerGameStats", 'Int'>
    readonly tirosIntentados: FieldRef<"PlayerGameStats", 'Int'>
    readonly tirosAnotados: FieldRef<"PlayerGameStats", 'Int'>
    readonly tiros3Intentados: FieldRef<"PlayerGameStats", 'Int'>
    readonly tiros3Anotados: FieldRef<"PlayerGameStats", 'Int'>
    readonly minutos: FieldRef<"PlayerGameStats", 'Int'>
    readonly plusMinus: FieldRef<"PlayerGameStats", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * PlayerGameStats findUnique
   */
  export type PlayerGameStatsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerGameStats
     */
    select?: PlayerGameStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerGameStatsInclude<ExtArgs> | null
    /**
     * Filter, which PlayerGameStats to fetch.
     */
    where: PlayerGameStatsWhereUniqueInput
  }

  /**
   * PlayerGameStats findUniqueOrThrow
   */
  export type PlayerGameStatsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerGameStats
     */
    select?: PlayerGameStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerGameStatsInclude<ExtArgs> | null
    /**
     * Filter, which PlayerGameStats to fetch.
     */
    where: PlayerGameStatsWhereUniqueInput
  }

  /**
   * PlayerGameStats findFirst
   */
  export type PlayerGameStatsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerGameStats
     */
    select?: PlayerGameStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerGameStatsInclude<ExtArgs> | null
    /**
     * Filter, which PlayerGameStats to fetch.
     */
    where?: PlayerGameStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerGameStats to fetch.
     */
    orderBy?: PlayerGameStatsOrderByWithRelationInput | PlayerGameStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlayerGameStats.
     */
    cursor?: PlayerGameStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerGameStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerGameStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlayerGameStats.
     */
    distinct?: PlayerGameStatsScalarFieldEnum | PlayerGameStatsScalarFieldEnum[]
  }

  /**
   * PlayerGameStats findFirstOrThrow
   */
  export type PlayerGameStatsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerGameStats
     */
    select?: PlayerGameStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerGameStatsInclude<ExtArgs> | null
    /**
     * Filter, which PlayerGameStats to fetch.
     */
    where?: PlayerGameStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerGameStats to fetch.
     */
    orderBy?: PlayerGameStatsOrderByWithRelationInput | PlayerGameStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlayerGameStats.
     */
    cursor?: PlayerGameStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerGameStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerGameStats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlayerGameStats.
     */
    distinct?: PlayerGameStatsScalarFieldEnum | PlayerGameStatsScalarFieldEnum[]
  }

  /**
   * PlayerGameStats findMany
   */
  export type PlayerGameStatsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerGameStats
     */
    select?: PlayerGameStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerGameStatsInclude<ExtArgs> | null
    /**
     * Filter, which PlayerGameStats to fetch.
     */
    where?: PlayerGameStatsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlayerGameStats to fetch.
     */
    orderBy?: PlayerGameStatsOrderByWithRelationInput | PlayerGameStatsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlayerGameStats.
     */
    cursor?: PlayerGameStatsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlayerGameStats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlayerGameStats.
     */
    skip?: number
    distinct?: PlayerGameStatsScalarFieldEnum | PlayerGameStatsScalarFieldEnum[]
  }

  /**
   * PlayerGameStats create
   */
  export type PlayerGameStatsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerGameStats
     */
    select?: PlayerGameStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerGameStatsInclude<ExtArgs> | null
    /**
     * The data needed to create a PlayerGameStats.
     */
    data: XOR<PlayerGameStatsCreateInput, PlayerGameStatsUncheckedCreateInput>
  }

  /**
   * PlayerGameStats createMany
   */
  export type PlayerGameStatsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PlayerGameStats.
     */
    data: PlayerGameStatsCreateManyInput | PlayerGameStatsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PlayerGameStats createManyAndReturn
   */
  export type PlayerGameStatsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerGameStats
     */
    select?: PlayerGameStatsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many PlayerGameStats.
     */
    data: PlayerGameStatsCreateManyInput | PlayerGameStatsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerGameStatsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PlayerGameStats update
   */
  export type PlayerGameStatsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerGameStats
     */
    select?: PlayerGameStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerGameStatsInclude<ExtArgs> | null
    /**
     * The data needed to update a PlayerGameStats.
     */
    data: XOR<PlayerGameStatsUpdateInput, PlayerGameStatsUncheckedUpdateInput>
    /**
     * Choose, which PlayerGameStats to update.
     */
    where: PlayerGameStatsWhereUniqueInput
  }

  /**
   * PlayerGameStats updateMany
   */
  export type PlayerGameStatsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PlayerGameStats.
     */
    data: XOR<PlayerGameStatsUpdateManyMutationInput, PlayerGameStatsUncheckedUpdateManyInput>
    /**
     * Filter which PlayerGameStats to update
     */
    where?: PlayerGameStatsWhereInput
  }

  /**
   * PlayerGameStats upsert
   */
  export type PlayerGameStatsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerGameStats
     */
    select?: PlayerGameStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerGameStatsInclude<ExtArgs> | null
    /**
     * The filter to search for the PlayerGameStats to update in case it exists.
     */
    where: PlayerGameStatsWhereUniqueInput
    /**
     * In case the PlayerGameStats found by the `where` argument doesn't exist, create a new PlayerGameStats with this data.
     */
    create: XOR<PlayerGameStatsCreateInput, PlayerGameStatsUncheckedCreateInput>
    /**
     * In case the PlayerGameStats was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlayerGameStatsUpdateInput, PlayerGameStatsUncheckedUpdateInput>
  }

  /**
   * PlayerGameStats delete
   */
  export type PlayerGameStatsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerGameStats
     */
    select?: PlayerGameStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerGameStatsInclude<ExtArgs> | null
    /**
     * Filter which PlayerGameStats to delete.
     */
    where: PlayerGameStatsWhereUniqueInput
  }

  /**
   * PlayerGameStats deleteMany
   */
  export type PlayerGameStatsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlayerGameStats to delete
     */
    where?: PlayerGameStatsWhereInput
  }

  /**
   * PlayerGameStats without action
   */
  export type PlayerGameStatsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerGameStats
     */
    select?: PlayerGameStatsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerGameStatsInclude<ExtArgs> | null
  }


  /**
   * Model Substitution
   */

  export type AggregateSubstitution = {
    _count: SubstitutionCountAggregateOutputType | null
    _avg: SubstitutionAvgAggregateOutputType | null
    _sum: SubstitutionSumAggregateOutputType | null
    _min: SubstitutionMinAggregateOutputType | null
    _max: SubstitutionMaxAggregateOutputType | null
  }

  export type SubstitutionAvgAggregateOutputType = {
    id: number | null
    gameId: number | null
    playerInId: number | null
    playerOutId: number | null
  }

  export type SubstitutionSumAggregateOutputType = {
    id: number | null
    gameId: number | null
    playerInId: number | null
    playerOutId: number | null
  }

  export type SubstitutionMinAggregateOutputType = {
    id: number | null
    gameId: number | null
    playerInId: number | null
    playerOutId: number | null
    timestamp: Date | null
  }

  export type SubstitutionMaxAggregateOutputType = {
    id: number | null
    gameId: number | null
    playerInId: number | null
    playerOutId: number | null
    timestamp: Date | null
  }

  export type SubstitutionCountAggregateOutputType = {
    id: number
    gameId: number
    playerInId: number
    playerOutId: number
    timestamp: number
    _all: number
  }


  export type SubstitutionAvgAggregateInputType = {
    id?: true
    gameId?: true
    playerInId?: true
    playerOutId?: true
  }

  export type SubstitutionSumAggregateInputType = {
    id?: true
    gameId?: true
    playerInId?: true
    playerOutId?: true
  }

  export type SubstitutionMinAggregateInputType = {
    id?: true
    gameId?: true
    playerInId?: true
    playerOutId?: true
    timestamp?: true
  }

  export type SubstitutionMaxAggregateInputType = {
    id?: true
    gameId?: true
    playerInId?: true
    playerOutId?: true
    timestamp?: true
  }

  export type SubstitutionCountAggregateInputType = {
    id?: true
    gameId?: true
    playerInId?: true
    playerOutId?: true
    timestamp?: true
    _all?: true
  }

  export type SubstitutionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Substitution to aggregate.
     */
    where?: SubstitutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Substitutions to fetch.
     */
    orderBy?: SubstitutionOrderByWithRelationInput | SubstitutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubstitutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Substitutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Substitutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Substitutions
    **/
    _count?: true | SubstitutionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubstitutionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubstitutionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubstitutionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubstitutionMaxAggregateInputType
  }

  export type GetSubstitutionAggregateType<T extends SubstitutionAggregateArgs> = {
        [P in keyof T & keyof AggregateSubstitution]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubstitution[P]>
      : GetScalarType<T[P], AggregateSubstitution[P]>
  }




  export type SubstitutionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubstitutionWhereInput
    orderBy?: SubstitutionOrderByWithAggregationInput | SubstitutionOrderByWithAggregationInput[]
    by: SubstitutionScalarFieldEnum[] | SubstitutionScalarFieldEnum
    having?: SubstitutionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubstitutionCountAggregateInputType | true
    _avg?: SubstitutionAvgAggregateInputType
    _sum?: SubstitutionSumAggregateInputType
    _min?: SubstitutionMinAggregateInputType
    _max?: SubstitutionMaxAggregateInputType
  }

  export type SubstitutionGroupByOutputType = {
    id: number
    gameId: number
    playerInId: number
    playerOutId: number
    timestamp: Date
    _count: SubstitutionCountAggregateOutputType | null
    _avg: SubstitutionAvgAggregateOutputType | null
    _sum: SubstitutionSumAggregateOutputType | null
    _min: SubstitutionMinAggregateOutputType | null
    _max: SubstitutionMaxAggregateOutputType | null
  }

  type GetSubstitutionGroupByPayload<T extends SubstitutionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubstitutionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubstitutionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubstitutionGroupByOutputType[P]>
            : GetScalarType<T[P], SubstitutionGroupByOutputType[P]>
        }
      >
    >


  export type SubstitutionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    gameId?: boolean
    playerInId?: boolean
    playerOutId?: boolean
    timestamp?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
    playerIn?: boolean | PlayerDefaultArgs<ExtArgs>
    playerOut?: boolean | PlayerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["substitution"]>

  export type SubstitutionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    gameId?: boolean
    playerInId?: boolean
    playerOutId?: boolean
    timestamp?: boolean
    game?: boolean | GameDefaultArgs<ExtArgs>
    playerIn?: boolean | PlayerDefaultArgs<ExtArgs>
    playerOut?: boolean | PlayerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["substitution"]>

  export type SubstitutionSelectScalar = {
    id?: boolean
    gameId?: boolean
    playerInId?: boolean
    playerOutId?: boolean
    timestamp?: boolean
  }

  export type SubstitutionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
    playerIn?: boolean | PlayerDefaultArgs<ExtArgs>
    playerOut?: boolean | PlayerDefaultArgs<ExtArgs>
  }
  export type SubstitutionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    game?: boolean | GameDefaultArgs<ExtArgs>
    playerIn?: boolean | PlayerDefaultArgs<ExtArgs>
    playerOut?: boolean | PlayerDefaultArgs<ExtArgs>
  }

  export type $SubstitutionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Substitution"
    objects: {
      game: Prisma.$GamePayload<ExtArgs>
      playerIn: Prisma.$PlayerPayload<ExtArgs>
      playerOut: Prisma.$PlayerPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      gameId: number
      playerInId: number
      playerOutId: number
      timestamp: Date
    }, ExtArgs["result"]["substitution"]>
    composites: {}
  }

  type SubstitutionGetPayload<S extends boolean | null | undefined | SubstitutionDefaultArgs> = $Result.GetResult<Prisma.$SubstitutionPayload, S>

  type SubstitutionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SubstitutionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SubstitutionCountAggregateInputType | true
    }

  export interface SubstitutionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Substitution'], meta: { name: 'Substitution' } }
    /**
     * Find zero or one Substitution that matches the filter.
     * @param {SubstitutionFindUniqueArgs} args - Arguments to find a Substitution
     * @example
     * // Get one Substitution
     * const substitution = await prisma.substitution.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubstitutionFindUniqueArgs>(args: SelectSubset<T, SubstitutionFindUniqueArgs<ExtArgs>>): Prisma__SubstitutionClient<$Result.GetResult<Prisma.$SubstitutionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Substitution that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SubstitutionFindUniqueOrThrowArgs} args - Arguments to find a Substitution
     * @example
     * // Get one Substitution
     * const substitution = await prisma.substitution.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubstitutionFindUniqueOrThrowArgs>(args: SelectSubset<T, SubstitutionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubstitutionClient<$Result.GetResult<Prisma.$SubstitutionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Substitution that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubstitutionFindFirstArgs} args - Arguments to find a Substitution
     * @example
     * // Get one Substitution
     * const substitution = await prisma.substitution.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubstitutionFindFirstArgs>(args?: SelectSubset<T, SubstitutionFindFirstArgs<ExtArgs>>): Prisma__SubstitutionClient<$Result.GetResult<Prisma.$SubstitutionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Substitution that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubstitutionFindFirstOrThrowArgs} args - Arguments to find a Substitution
     * @example
     * // Get one Substitution
     * const substitution = await prisma.substitution.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubstitutionFindFirstOrThrowArgs>(args?: SelectSubset<T, SubstitutionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubstitutionClient<$Result.GetResult<Prisma.$SubstitutionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Substitutions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubstitutionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Substitutions
     * const substitutions = await prisma.substitution.findMany()
     * 
     * // Get first 10 Substitutions
     * const substitutions = await prisma.substitution.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const substitutionWithIdOnly = await prisma.substitution.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubstitutionFindManyArgs>(args?: SelectSubset<T, SubstitutionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubstitutionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Substitution.
     * @param {SubstitutionCreateArgs} args - Arguments to create a Substitution.
     * @example
     * // Create one Substitution
     * const Substitution = await prisma.substitution.create({
     *   data: {
     *     // ... data to create a Substitution
     *   }
     * })
     * 
     */
    create<T extends SubstitutionCreateArgs>(args: SelectSubset<T, SubstitutionCreateArgs<ExtArgs>>): Prisma__SubstitutionClient<$Result.GetResult<Prisma.$SubstitutionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Substitutions.
     * @param {SubstitutionCreateManyArgs} args - Arguments to create many Substitutions.
     * @example
     * // Create many Substitutions
     * const substitution = await prisma.substitution.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubstitutionCreateManyArgs>(args?: SelectSubset<T, SubstitutionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Substitutions and returns the data saved in the database.
     * @param {SubstitutionCreateManyAndReturnArgs} args - Arguments to create many Substitutions.
     * @example
     * // Create many Substitutions
     * const substitution = await prisma.substitution.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Substitutions and only return the `id`
     * const substitutionWithIdOnly = await prisma.substitution.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SubstitutionCreateManyAndReturnArgs>(args?: SelectSubset<T, SubstitutionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubstitutionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Substitution.
     * @param {SubstitutionDeleteArgs} args - Arguments to delete one Substitution.
     * @example
     * // Delete one Substitution
     * const Substitution = await prisma.substitution.delete({
     *   where: {
     *     // ... filter to delete one Substitution
     *   }
     * })
     * 
     */
    delete<T extends SubstitutionDeleteArgs>(args: SelectSubset<T, SubstitutionDeleteArgs<ExtArgs>>): Prisma__SubstitutionClient<$Result.GetResult<Prisma.$SubstitutionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Substitution.
     * @param {SubstitutionUpdateArgs} args - Arguments to update one Substitution.
     * @example
     * // Update one Substitution
     * const substitution = await prisma.substitution.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubstitutionUpdateArgs>(args: SelectSubset<T, SubstitutionUpdateArgs<ExtArgs>>): Prisma__SubstitutionClient<$Result.GetResult<Prisma.$SubstitutionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Substitutions.
     * @param {SubstitutionDeleteManyArgs} args - Arguments to filter Substitutions to delete.
     * @example
     * // Delete a few Substitutions
     * const { count } = await prisma.substitution.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubstitutionDeleteManyArgs>(args?: SelectSubset<T, SubstitutionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Substitutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubstitutionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Substitutions
     * const substitution = await prisma.substitution.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubstitutionUpdateManyArgs>(args: SelectSubset<T, SubstitutionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Substitution.
     * @param {SubstitutionUpsertArgs} args - Arguments to update or create a Substitution.
     * @example
     * // Update or create a Substitution
     * const substitution = await prisma.substitution.upsert({
     *   create: {
     *     // ... data to create a Substitution
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Substitution we want to update
     *   }
     * })
     */
    upsert<T extends SubstitutionUpsertArgs>(args: SelectSubset<T, SubstitutionUpsertArgs<ExtArgs>>): Prisma__SubstitutionClient<$Result.GetResult<Prisma.$SubstitutionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Substitutions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubstitutionCountArgs} args - Arguments to filter Substitutions to count.
     * @example
     * // Count the number of Substitutions
     * const count = await prisma.substitution.count({
     *   where: {
     *     // ... the filter for the Substitutions we want to count
     *   }
     * })
    **/
    count<T extends SubstitutionCountArgs>(
      args?: Subset<T, SubstitutionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubstitutionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Substitution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubstitutionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubstitutionAggregateArgs>(args: Subset<T, SubstitutionAggregateArgs>): Prisma.PrismaPromise<GetSubstitutionAggregateType<T>>

    /**
     * Group by Substitution.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubstitutionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubstitutionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubstitutionGroupByArgs['orderBy'] }
        : { orderBy?: SubstitutionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubstitutionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubstitutionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Substitution model
   */
  readonly fields: SubstitutionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Substitution.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubstitutionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    game<T extends GameDefaultArgs<ExtArgs> = {}>(args?: Subset<T, GameDefaultArgs<ExtArgs>>): Prisma__GameClient<$Result.GetResult<Prisma.$GamePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    playerIn<T extends PlayerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlayerDefaultArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    playerOut<T extends PlayerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlayerDefaultArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Substitution model
   */ 
  interface SubstitutionFieldRefs {
    readonly id: FieldRef<"Substitution", 'Int'>
    readonly gameId: FieldRef<"Substitution", 'Int'>
    readonly playerInId: FieldRef<"Substitution", 'Int'>
    readonly playerOutId: FieldRef<"Substitution", 'Int'>
    readonly timestamp: FieldRef<"Substitution", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Substitution findUnique
   */
  export type SubstitutionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Substitution
     */
    select?: SubstitutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubstitutionInclude<ExtArgs> | null
    /**
     * Filter, which Substitution to fetch.
     */
    where: SubstitutionWhereUniqueInput
  }

  /**
   * Substitution findUniqueOrThrow
   */
  export type SubstitutionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Substitution
     */
    select?: SubstitutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubstitutionInclude<ExtArgs> | null
    /**
     * Filter, which Substitution to fetch.
     */
    where: SubstitutionWhereUniqueInput
  }

  /**
   * Substitution findFirst
   */
  export type SubstitutionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Substitution
     */
    select?: SubstitutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubstitutionInclude<ExtArgs> | null
    /**
     * Filter, which Substitution to fetch.
     */
    where?: SubstitutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Substitutions to fetch.
     */
    orderBy?: SubstitutionOrderByWithRelationInput | SubstitutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Substitutions.
     */
    cursor?: SubstitutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Substitutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Substitutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Substitutions.
     */
    distinct?: SubstitutionScalarFieldEnum | SubstitutionScalarFieldEnum[]
  }

  /**
   * Substitution findFirstOrThrow
   */
  export type SubstitutionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Substitution
     */
    select?: SubstitutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubstitutionInclude<ExtArgs> | null
    /**
     * Filter, which Substitution to fetch.
     */
    where?: SubstitutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Substitutions to fetch.
     */
    orderBy?: SubstitutionOrderByWithRelationInput | SubstitutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Substitutions.
     */
    cursor?: SubstitutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Substitutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Substitutions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Substitutions.
     */
    distinct?: SubstitutionScalarFieldEnum | SubstitutionScalarFieldEnum[]
  }

  /**
   * Substitution findMany
   */
  export type SubstitutionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Substitution
     */
    select?: SubstitutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubstitutionInclude<ExtArgs> | null
    /**
     * Filter, which Substitutions to fetch.
     */
    where?: SubstitutionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Substitutions to fetch.
     */
    orderBy?: SubstitutionOrderByWithRelationInput | SubstitutionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Substitutions.
     */
    cursor?: SubstitutionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Substitutions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Substitutions.
     */
    skip?: number
    distinct?: SubstitutionScalarFieldEnum | SubstitutionScalarFieldEnum[]
  }

  /**
   * Substitution create
   */
  export type SubstitutionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Substitution
     */
    select?: SubstitutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubstitutionInclude<ExtArgs> | null
    /**
     * The data needed to create a Substitution.
     */
    data: XOR<SubstitutionCreateInput, SubstitutionUncheckedCreateInput>
  }

  /**
   * Substitution createMany
   */
  export type SubstitutionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Substitutions.
     */
    data: SubstitutionCreateManyInput | SubstitutionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Substitution createManyAndReturn
   */
  export type SubstitutionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Substitution
     */
    select?: SubstitutionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Substitutions.
     */
    data: SubstitutionCreateManyInput | SubstitutionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubstitutionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Substitution update
   */
  export type SubstitutionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Substitution
     */
    select?: SubstitutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubstitutionInclude<ExtArgs> | null
    /**
     * The data needed to update a Substitution.
     */
    data: XOR<SubstitutionUpdateInput, SubstitutionUncheckedUpdateInput>
    /**
     * Choose, which Substitution to update.
     */
    where: SubstitutionWhereUniqueInput
  }

  /**
   * Substitution updateMany
   */
  export type SubstitutionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Substitutions.
     */
    data: XOR<SubstitutionUpdateManyMutationInput, SubstitutionUncheckedUpdateManyInput>
    /**
     * Filter which Substitutions to update
     */
    where?: SubstitutionWhereInput
  }

  /**
   * Substitution upsert
   */
  export type SubstitutionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Substitution
     */
    select?: SubstitutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubstitutionInclude<ExtArgs> | null
    /**
     * The filter to search for the Substitution to update in case it exists.
     */
    where: SubstitutionWhereUniqueInput
    /**
     * In case the Substitution found by the `where` argument doesn't exist, create a new Substitution with this data.
     */
    create: XOR<SubstitutionCreateInput, SubstitutionUncheckedCreateInput>
    /**
     * In case the Substitution was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubstitutionUpdateInput, SubstitutionUncheckedUpdateInput>
  }

  /**
   * Substitution delete
   */
  export type SubstitutionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Substitution
     */
    select?: SubstitutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubstitutionInclude<ExtArgs> | null
    /**
     * Filter which Substitution to delete.
     */
    where: SubstitutionWhereUniqueInput
  }

  /**
   * Substitution deleteMany
   */
  export type SubstitutionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Substitutions to delete
     */
    where?: SubstitutionWhereInput
  }

  /**
   * Substitution without action
   */
  export type SubstitutionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Substitution
     */
    select?: SubstitutionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubstitutionInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    email: 'email',
    passwordHash: 'passwordHash',
    rol: 'rol'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const TeamScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    logo: 'logo'
  };

  export type TeamScalarFieldEnum = (typeof TeamScalarFieldEnum)[keyof typeof TeamScalarFieldEnum]


  export const PlayerScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    apellido: 'apellido',
    numero: 'numero',
    posicion: 'posicion',
    teamId: 'teamId'
  };

  export type PlayerScalarFieldEnum = (typeof PlayerScalarFieldEnum)[keyof typeof PlayerScalarFieldEnum]


  export const EventScalarFieldEnum: {
    id: 'id',
    nombre: 'nombre',
    fechaInicio: 'fechaInicio',
    fechaFin: 'fechaFin'
  };

  export type EventScalarFieldEnum = (typeof EventScalarFieldEnum)[keyof typeof EventScalarFieldEnum]


  export const GameScalarFieldEnum: {
    id: 'id',
    eventId: 'eventId',
    teamHomeId: 'teamHomeId',
    teamAwayId: 'teamAwayId',
    fecha: 'fecha',
    estado: 'estado',
    gameTime: 'gameTime',
    homeScore: 'homeScore',
    awayScore: 'awayScore',
    currentQuarter: 'currentQuarter',
    quarterLength: 'quarterLength',
    totalQuarters: 'totalQuarters',
    overtimeLength: 'overtimeLength',
    quarterTime: 'quarterTime',
    isOvertime: 'isOvertime'
  };

  export type GameScalarFieldEnum = (typeof GameScalarFieldEnum)[keyof typeof GameScalarFieldEnum]


  export const PlayerGameStatsScalarFieldEnum: {
    id: 'id',
    gameId: 'gameId',
    playerId: 'playerId',
    puntos: 'puntos',
    rebotes: 'rebotes',
    asistencias: 'asistencias',
    robos: 'robos',
    tapones: 'tapones',
    tirosIntentados: 'tirosIntentados',
    tirosAnotados: 'tirosAnotados',
    tiros3Intentados: 'tiros3Intentados',
    tiros3Anotados: 'tiros3Anotados',
    minutos: 'minutos',
    plusMinus: 'plusMinus'
  };

  export type PlayerGameStatsScalarFieldEnum = (typeof PlayerGameStatsScalarFieldEnum)[keyof typeof PlayerGameStatsScalarFieldEnum]


  export const SubstitutionScalarFieldEnum: {
    id: 'id',
    gameId: 'gameId',
    playerInId: 'playerInId',
    playerOutId: 'playerOutId',
    timestamp: 'timestamp'
  };

  export type SubstitutionScalarFieldEnum = (typeof SubstitutionScalarFieldEnum)[keyof typeof SubstitutionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    nombre?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    rol?: StringFilter<"User"> | string
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    rol?: SortOrder
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    nombre?: StringFilter<"User"> | string
    passwordHash?: StringFilter<"User"> | string
    rol?: StringFilter<"User"> | string
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    rol?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    nombre?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    passwordHash?: StringWithAggregatesFilter<"User"> | string
    rol?: StringWithAggregatesFilter<"User"> | string
  }

  export type TeamWhereInput = {
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    id?: IntFilter<"Team"> | number
    nombre?: StringFilter<"Team"> | string
    logo?: StringNullableFilter<"Team"> | string | null
    players?: PlayerListRelationFilter
    homeGames?: GameListRelationFilter
    awayGames?: GameListRelationFilter
  }

  export type TeamOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    logo?: SortOrderInput | SortOrder
    players?: PlayerOrderByRelationAggregateInput
    homeGames?: GameOrderByRelationAggregateInput
    awayGames?: GameOrderByRelationAggregateInput
  }

  export type TeamWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    nombre?: StringFilter<"Team"> | string
    logo?: StringNullableFilter<"Team"> | string | null
    players?: PlayerListRelationFilter
    homeGames?: GameListRelationFilter
    awayGames?: GameListRelationFilter
  }, "id">

  export type TeamOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    logo?: SortOrderInput | SortOrder
    _count?: TeamCountOrderByAggregateInput
    _avg?: TeamAvgOrderByAggregateInput
    _max?: TeamMaxOrderByAggregateInput
    _min?: TeamMinOrderByAggregateInput
    _sum?: TeamSumOrderByAggregateInput
  }

  export type TeamScalarWhereWithAggregatesInput = {
    AND?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    OR?: TeamScalarWhereWithAggregatesInput[]
    NOT?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Team"> | number
    nombre?: StringWithAggregatesFilter<"Team"> | string
    logo?: StringNullableWithAggregatesFilter<"Team"> | string | null
  }

  export type PlayerWhereInput = {
    AND?: PlayerWhereInput | PlayerWhereInput[]
    OR?: PlayerWhereInput[]
    NOT?: PlayerWhereInput | PlayerWhereInput[]
    id?: IntFilter<"Player"> | number
    nombre?: StringFilter<"Player"> | string
    apellido?: StringFilter<"Player"> | string
    numero?: IntFilter<"Player"> | number
    posicion?: StringFilter<"Player"> | string
    teamId?: IntFilter<"Player"> | number
    team?: XOR<TeamRelationFilter, TeamWhereInput>
    stats?: PlayerGameStatsListRelationFilter
    substitutionsIn?: SubstitutionListRelationFilter
    substitutionsOut?: SubstitutionListRelationFilter
    activeInGames?: GameListRelationFilter
  }

  export type PlayerOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    numero?: SortOrder
    posicion?: SortOrder
    teamId?: SortOrder
    team?: TeamOrderByWithRelationInput
    stats?: PlayerGameStatsOrderByRelationAggregateInput
    substitutionsIn?: SubstitutionOrderByRelationAggregateInput
    substitutionsOut?: SubstitutionOrderByRelationAggregateInput
    activeInGames?: GameOrderByRelationAggregateInput
  }

  export type PlayerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PlayerWhereInput | PlayerWhereInput[]
    OR?: PlayerWhereInput[]
    NOT?: PlayerWhereInput | PlayerWhereInput[]
    nombre?: StringFilter<"Player"> | string
    apellido?: StringFilter<"Player"> | string
    numero?: IntFilter<"Player"> | number
    posicion?: StringFilter<"Player"> | string
    teamId?: IntFilter<"Player"> | number
    team?: XOR<TeamRelationFilter, TeamWhereInput>
    stats?: PlayerGameStatsListRelationFilter
    substitutionsIn?: SubstitutionListRelationFilter
    substitutionsOut?: SubstitutionListRelationFilter
    activeInGames?: GameListRelationFilter
  }, "id">

  export type PlayerOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    numero?: SortOrder
    posicion?: SortOrder
    teamId?: SortOrder
    _count?: PlayerCountOrderByAggregateInput
    _avg?: PlayerAvgOrderByAggregateInput
    _max?: PlayerMaxOrderByAggregateInput
    _min?: PlayerMinOrderByAggregateInput
    _sum?: PlayerSumOrderByAggregateInput
  }

  export type PlayerScalarWhereWithAggregatesInput = {
    AND?: PlayerScalarWhereWithAggregatesInput | PlayerScalarWhereWithAggregatesInput[]
    OR?: PlayerScalarWhereWithAggregatesInput[]
    NOT?: PlayerScalarWhereWithAggregatesInput | PlayerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Player"> | number
    nombre?: StringWithAggregatesFilter<"Player"> | string
    apellido?: StringWithAggregatesFilter<"Player"> | string
    numero?: IntWithAggregatesFilter<"Player"> | number
    posicion?: StringWithAggregatesFilter<"Player"> | string
    teamId?: IntWithAggregatesFilter<"Player"> | number
  }

  export type EventWhereInput = {
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    id?: IntFilter<"Event"> | number
    nombre?: StringFilter<"Event"> | string
    fechaInicio?: DateTimeFilter<"Event"> | Date | string
    fechaFin?: DateTimeFilter<"Event"> | Date | string
    games?: GameListRelationFilter
  }

  export type EventOrderByWithRelationInput = {
    id?: SortOrder
    nombre?: SortOrder
    fechaInicio?: SortOrder
    fechaFin?: SortOrder
    games?: GameOrderByRelationAggregateInput
  }

  export type EventWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    nombre?: StringFilter<"Event"> | string
    fechaInicio?: DateTimeFilter<"Event"> | Date | string
    fechaFin?: DateTimeFilter<"Event"> | Date | string
    games?: GameListRelationFilter
  }, "id">

  export type EventOrderByWithAggregationInput = {
    id?: SortOrder
    nombre?: SortOrder
    fechaInicio?: SortOrder
    fechaFin?: SortOrder
    _count?: EventCountOrderByAggregateInput
    _avg?: EventAvgOrderByAggregateInput
    _max?: EventMaxOrderByAggregateInput
    _min?: EventMinOrderByAggregateInput
    _sum?: EventSumOrderByAggregateInput
  }

  export type EventScalarWhereWithAggregatesInput = {
    AND?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    OR?: EventScalarWhereWithAggregatesInput[]
    NOT?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Event"> | number
    nombre?: StringWithAggregatesFilter<"Event"> | string
    fechaInicio?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    fechaFin?: DateTimeWithAggregatesFilter<"Event"> | Date | string
  }

  export type GameWhereInput = {
    AND?: GameWhereInput | GameWhereInput[]
    OR?: GameWhereInput[]
    NOT?: GameWhereInput | GameWhereInput[]
    id?: IntFilter<"Game"> | number
    eventId?: IntFilter<"Game"> | number
    teamHomeId?: IntFilter<"Game"> | number
    teamAwayId?: IntFilter<"Game"> | number
    fecha?: DateTimeFilter<"Game"> | Date | string
    estado?: StringFilter<"Game"> | string
    gameTime?: IntFilter<"Game"> | number
    homeScore?: IntFilter<"Game"> | number
    awayScore?: IntFilter<"Game"> | number
    currentQuarter?: IntFilter<"Game"> | number
    quarterLength?: IntFilter<"Game"> | number
    totalQuarters?: IntFilter<"Game"> | number
    overtimeLength?: IntFilter<"Game"> | number
    quarterTime?: IntFilter<"Game"> | number
    isOvertime?: BoolFilter<"Game"> | boolean
    event?: XOR<EventRelationFilter, EventWhereInput>
    teamHome?: XOR<TeamRelationFilter, TeamWhereInput>
    teamAway?: XOR<TeamRelationFilter, TeamWhereInput>
    stats?: PlayerGameStatsListRelationFilter
    substitutions?: SubstitutionListRelationFilter
    activePlayers?: PlayerListRelationFilter
  }

  export type GameOrderByWithRelationInput = {
    id?: SortOrder
    eventId?: SortOrder
    teamHomeId?: SortOrder
    teamAwayId?: SortOrder
    fecha?: SortOrder
    estado?: SortOrder
    gameTime?: SortOrder
    homeScore?: SortOrder
    awayScore?: SortOrder
    currentQuarter?: SortOrder
    quarterLength?: SortOrder
    totalQuarters?: SortOrder
    overtimeLength?: SortOrder
    quarterTime?: SortOrder
    isOvertime?: SortOrder
    event?: EventOrderByWithRelationInput
    teamHome?: TeamOrderByWithRelationInput
    teamAway?: TeamOrderByWithRelationInput
    stats?: PlayerGameStatsOrderByRelationAggregateInput
    substitutions?: SubstitutionOrderByRelationAggregateInput
    activePlayers?: PlayerOrderByRelationAggregateInput
  }

  export type GameWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: GameWhereInput | GameWhereInput[]
    OR?: GameWhereInput[]
    NOT?: GameWhereInput | GameWhereInput[]
    eventId?: IntFilter<"Game"> | number
    teamHomeId?: IntFilter<"Game"> | number
    teamAwayId?: IntFilter<"Game"> | number
    fecha?: DateTimeFilter<"Game"> | Date | string
    estado?: StringFilter<"Game"> | string
    gameTime?: IntFilter<"Game"> | number
    homeScore?: IntFilter<"Game"> | number
    awayScore?: IntFilter<"Game"> | number
    currentQuarter?: IntFilter<"Game"> | number
    quarterLength?: IntFilter<"Game"> | number
    totalQuarters?: IntFilter<"Game"> | number
    overtimeLength?: IntFilter<"Game"> | number
    quarterTime?: IntFilter<"Game"> | number
    isOvertime?: BoolFilter<"Game"> | boolean
    event?: XOR<EventRelationFilter, EventWhereInput>
    teamHome?: XOR<TeamRelationFilter, TeamWhereInput>
    teamAway?: XOR<TeamRelationFilter, TeamWhereInput>
    stats?: PlayerGameStatsListRelationFilter
    substitutions?: SubstitutionListRelationFilter
    activePlayers?: PlayerListRelationFilter
  }, "id">

  export type GameOrderByWithAggregationInput = {
    id?: SortOrder
    eventId?: SortOrder
    teamHomeId?: SortOrder
    teamAwayId?: SortOrder
    fecha?: SortOrder
    estado?: SortOrder
    gameTime?: SortOrder
    homeScore?: SortOrder
    awayScore?: SortOrder
    currentQuarter?: SortOrder
    quarterLength?: SortOrder
    totalQuarters?: SortOrder
    overtimeLength?: SortOrder
    quarterTime?: SortOrder
    isOvertime?: SortOrder
    _count?: GameCountOrderByAggregateInput
    _avg?: GameAvgOrderByAggregateInput
    _max?: GameMaxOrderByAggregateInput
    _min?: GameMinOrderByAggregateInput
    _sum?: GameSumOrderByAggregateInput
  }

  export type GameScalarWhereWithAggregatesInput = {
    AND?: GameScalarWhereWithAggregatesInput | GameScalarWhereWithAggregatesInput[]
    OR?: GameScalarWhereWithAggregatesInput[]
    NOT?: GameScalarWhereWithAggregatesInput | GameScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Game"> | number
    eventId?: IntWithAggregatesFilter<"Game"> | number
    teamHomeId?: IntWithAggregatesFilter<"Game"> | number
    teamAwayId?: IntWithAggregatesFilter<"Game"> | number
    fecha?: DateTimeWithAggregatesFilter<"Game"> | Date | string
    estado?: StringWithAggregatesFilter<"Game"> | string
    gameTime?: IntWithAggregatesFilter<"Game"> | number
    homeScore?: IntWithAggregatesFilter<"Game"> | number
    awayScore?: IntWithAggregatesFilter<"Game"> | number
    currentQuarter?: IntWithAggregatesFilter<"Game"> | number
    quarterLength?: IntWithAggregatesFilter<"Game"> | number
    totalQuarters?: IntWithAggregatesFilter<"Game"> | number
    overtimeLength?: IntWithAggregatesFilter<"Game"> | number
    quarterTime?: IntWithAggregatesFilter<"Game"> | number
    isOvertime?: BoolWithAggregatesFilter<"Game"> | boolean
  }

  export type PlayerGameStatsWhereInput = {
    AND?: PlayerGameStatsWhereInput | PlayerGameStatsWhereInput[]
    OR?: PlayerGameStatsWhereInput[]
    NOT?: PlayerGameStatsWhereInput | PlayerGameStatsWhereInput[]
    id?: IntFilter<"PlayerGameStats"> | number
    gameId?: IntFilter<"PlayerGameStats"> | number
    playerId?: IntFilter<"PlayerGameStats"> | number
    puntos?: IntFilter<"PlayerGameStats"> | number
    rebotes?: IntFilter<"PlayerGameStats"> | number
    asistencias?: IntFilter<"PlayerGameStats"> | number
    robos?: IntFilter<"PlayerGameStats"> | number
    tapones?: IntFilter<"PlayerGameStats"> | number
    tirosIntentados?: IntFilter<"PlayerGameStats"> | number
    tirosAnotados?: IntFilter<"PlayerGameStats"> | number
    tiros3Intentados?: IntFilter<"PlayerGameStats"> | number
    tiros3Anotados?: IntFilter<"PlayerGameStats"> | number
    minutos?: IntFilter<"PlayerGameStats"> | number
    plusMinus?: IntFilter<"PlayerGameStats"> | number
    game?: XOR<GameRelationFilter, GameWhereInput>
    player?: XOR<PlayerRelationFilter, PlayerWhereInput>
  }

  export type PlayerGameStatsOrderByWithRelationInput = {
    id?: SortOrder
    gameId?: SortOrder
    playerId?: SortOrder
    puntos?: SortOrder
    rebotes?: SortOrder
    asistencias?: SortOrder
    robos?: SortOrder
    tapones?: SortOrder
    tirosIntentados?: SortOrder
    tirosAnotados?: SortOrder
    tiros3Intentados?: SortOrder
    tiros3Anotados?: SortOrder
    minutos?: SortOrder
    plusMinus?: SortOrder
    game?: GameOrderByWithRelationInput
    player?: PlayerOrderByWithRelationInput
  }

  export type PlayerGameStatsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    gameId_playerId?: PlayerGameStatsGameIdPlayerIdCompoundUniqueInput
    AND?: PlayerGameStatsWhereInput | PlayerGameStatsWhereInput[]
    OR?: PlayerGameStatsWhereInput[]
    NOT?: PlayerGameStatsWhereInput | PlayerGameStatsWhereInput[]
    gameId?: IntFilter<"PlayerGameStats"> | number
    playerId?: IntFilter<"PlayerGameStats"> | number
    puntos?: IntFilter<"PlayerGameStats"> | number
    rebotes?: IntFilter<"PlayerGameStats"> | number
    asistencias?: IntFilter<"PlayerGameStats"> | number
    robos?: IntFilter<"PlayerGameStats"> | number
    tapones?: IntFilter<"PlayerGameStats"> | number
    tirosIntentados?: IntFilter<"PlayerGameStats"> | number
    tirosAnotados?: IntFilter<"PlayerGameStats"> | number
    tiros3Intentados?: IntFilter<"PlayerGameStats"> | number
    tiros3Anotados?: IntFilter<"PlayerGameStats"> | number
    minutos?: IntFilter<"PlayerGameStats"> | number
    plusMinus?: IntFilter<"PlayerGameStats"> | number
    game?: XOR<GameRelationFilter, GameWhereInput>
    player?: XOR<PlayerRelationFilter, PlayerWhereInput>
  }, "id" | "gameId_playerId">

  export type PlayerGameStatsOrderByWithAggregationInput = {
    id?: SortOrder
    gameId?: SortOrder
    playerId?: SortOrder
    puntos?: SortOrder
    rebotes?: SortOrder
    asistencias?: SortOrder
    robos?: SortOrder
    tapones?: SortOrder
    tirosIntentados?: SortOrder
    tirosAnotados?: SortOrder
    tiros3Intentados?: SortOrder
    tiros3Anotados?: SortOrder
    minutos?: SortOrder
    plusMinus?: SortOrder
    _count?: PlayerGameStatsCountOrderByAggregateInput
    _avg?: PlayerGameStatsAvgOrderByAggregateInput
    _max?: PlayerGameStatsMaxOrderByAggregateInput
    _min?: PlayerGameStatsMinOrderByAggregateInput
    _sum?: PlayerGameStatsSumOrderByAggregateInput
  }

  export type PlayerGameStatsScalarWhereWithAggregatesInput = {
    AND?: PlayerGameStatsScalarWhereWithAggregatesInput | PlayerGameStatsScalarWhereWithAggregatesInput[]
    OR?: PlayerGameStatsScalarWhereWithAggregatesInput[]
    NOT?: PlayerGameStatsScalarWhereWithAggregatesInput | PlayerGameStatsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PlayerGameStats"> | number
    gameId?: IntWithAggregatesFilter<"PlayerGameStats"> | number
    playerId?: IntWithAggregatesFilter<"PlayerGameStats"> | number
    puntos?: IntWithAggregatesFilter<"PlayerGameStats"> | number
    rebotes?: IntWithAggregatesFilter<"PlayerGameStats"> | number
    asistencias?: IntWithAggregatesFilter<"PlayerGameStats"> | number
    robos?: IntWithAggregatesFilter<"PlayerGameStats"> | number
    tapones?: IntWithAggregatesFilter<"PlayerGameStats"> | number
    tirosIntentados?: IntWithAggregatesFilter<"PlayerGameStats"> | number
    tirosAnotados?: IntWithAggregatesFilter<"PlayerGameStats"> | number
    tiros3Intentados?: IntWithAggregatesFilter<"PlayerGameStats"> | number
    tiros3Anotados?: IntWithAggregatesFilter<"PlayerGameStats"> | number
    minutos?: IntWithAggregatesFilter<"PlayerGameStats"> | number
    plusMinus?: IntWithAggregatesFilter<"PlayerGameStats"> | number
  }

  export type SubstitutionWhereInput = {
    AND?: SubstitutionWhereInput | SubstitutionWhereInput[]
    OR?: SubstitutionWhereInput[]
    NOT?: SubstitutionWhereInput | SubstitutionWhereInput[]
    id?: IntFilter<"Substitution"> | number
    gameId?: IntFilter<"Substitution"> | number
    playerInId?: IntFilter<"Substitution"> | number
    playerOutId?: IntFilter<"Substitution"> | number
    timestamp?: DateTimeFilter<"Substitution"> | Date | string
    game?: XOR<GameRelationFilter, GameWhereInput>
    playerIn?: XOR<PlayerRelationFilter, PlayerWhereInput>
    playerOut?: XOR<PlayerRelationFilter, PlayerWhereInput>
  }

  export type SubstitutionOrderByWithRelationInput = {
    id?: SortOrder
    gameId?: SortOrder
    playerInId?: SortOrder
    playerOutId?: SortOrder
    timestamp?: SortOrder
    game?: GameOrderByWithRelationInput
    playerIn?: PlayerOrderByWithRelationInput
    playerOut?: PlayerOrderByWithRelationInput
  }

  export type SubstitutionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SubstitutionWhereInput | SubstitutionWhereInput[]
    OR?: SubstitutionWhereInput[]
    NOT?: SubstitutionWhereInput | SubstitutionWhereInput[]
    gameId?: IntFilter<"Substitution"> | number
    playerInId?: IntFilter<"Substitution"> | number
    playerOutId?: IntFilter<"Substitution"> | number
    timestamp?: DateTimeFilter<"Substitution"> | Date | string
    game?: XOR<GameRelationFilter, GameWhereInput>
    playerIn?: XOR<PlayerRelationFilter, PlayerWhereInput>
    playerOut?: XOR<PlayerRelationFilter, PlayerWhereInput>
  }, "id">

  export type SubstitutionOrderByWithAggregationInput = {
    id?: SortOrder
    gameId?: SortOrder
    playerInId?: SortOrder
    playerOutId?: SortOrder
    timestamp?: SortOrder
    _count?: SubstitutionCountOrderByAggregateInput
    _avg?: SubstitutionAvgOrderByAggregateInput
    _max?: SubstitutionMaxOrderByAggregateInput
    _min?: SubstitutionMinOrderByAggregateInput
    _sum?: SubstitutionSumOrderByAggregateInput
  }

  export type SubstitutionScalarWhereWithAggregatesInput = {
    AND?: SubstitutionScalarWhereWithAggregatesInput | SubstitutionScalarWhereWithAggregatesInput[]
    OR?: SubstitutionScalarWhereWithAggregatesInput[]
    NOT?: SubstitutionScalarWhereWithAggregatesInput | SubstitutionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Substitution"> | number
    gameId?: IntWithAggregatesFilter<"Substitution"> | number
    playerInId?: IntWithAggregatesFilter<"Substitution"> | number
    playerOutId?: IntWithAggregatesFilter<"Substitution"> | number
    timestamp?: DateTimeWithAggregatesFilter<"Substitution"> | Date | string
  }

  export type UserCreateInput = {
    nombre: string
    email: string
    passwordHash: string
    rol: string
  }

  export type UserUncheckedCreateInput = {
    id?: number
    nombre: string
    email: string
    passwordHash: string
    rol: string
  }

  export type UserUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    rol?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    rol?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateManyInput = {
    id?: number
    nombre: string
    email: string
    passwordHash: string
    rol: string
  }

  export type UserUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    rol?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    passwordHash?: StringFieldUpdateOperationsInput | string
    rol?: StringFieldUpdateOperationsInput | string
  }

  export type TeamCreateInput = {
    nombre: string
    logo?: string | null
    players?: PlayerCreateNestedManyWithoutTeamInput
    homeGames?: GameCreateNestedManyWithoutTeamHomeInput
    awayGames?: GameCreateNestedManyWithoutTeamAwayInput
  }

  export type TeamUncheckedCreateInput = {
    id?: number
    nombre: string
    logo?: string | null
    players?: PlayerUncheckedCreateNestedManyWithoutTeamInput
    homeGames?: GameUncheckedCreateNestedManyWithoutTeamHomeInput
    awayGames?: GameUncheckedCreateNestedManyWithoutTeamAwayInput
  }

  export type TeamUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    players?: PlayerUpdateManyWithoutTeamNestedInput
    homeGames?: GameUpdateManyWithoutTeamHomeNestedInput
    awayGames?: GameUpdateManyWithoutTeamAwayNestedInput
  }

  export type TeamUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    players?: PlayerUncheckedUpdateManyWithoutTeamNestedInput
    homeGames?: GameUncheckedUpdateManyWithoutTeamHomeNestedInput
    awayGames?: GameUncheckedUpdateManyWithoutTeamAwayNestedInput
  }

  export type TeamCreateManyInput = {
    id?: number
    nombre: string
    logo?: string | null
  }

  export type TeamUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TeamUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PlayerCreateInput = {
    nombre: string
    apellido: string
    numero: number
    posicion: string
    team: TeamCreateNestedOneWithoutPlayersInput
    stats?: PlayerGameStatsCreateNestedManyWithoutPlayerInput
    substitutionsIn?: SubstitutionCreateNestedManyWithoutPlayerInInput
    substitutionsOut?: SubstitutionCreateNestedManyWithoutPlayerOutInput
    activeInGames?: GameCreateNestedManyWithoutActivePlayersInput
  }

  export type PlayerUncheckedCreateInput = {
    id?: number
    nombre: string
    apellido: string
    numero: number
    posicion: string
    teamId: number
    stats?: PlayerGameStatsUncheckedCreateNestedManyWithoutPlayerInput
    substitutionsIn?: SubstitutionUncheckedCreateNestedManyWithoutPlayerInInput
    substitutionsOut?: SubstitutionUncheckedCreateNestedManyWithoutPlayerOutInput
    activeInGames?: GameUncheckedCreateNestedManyWithoutActivePlayersInput
  }

  export type PlayerUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    posicion?: StringFieldUpdateOperationsInput | string
    team?: TeamUpdateOneRequiredWithoutPlayersNestedInput
    stats?: PlayerGameStatsUpdateManyWithoutPlayerNestedInput
    substitutionsIn?: SubstitutionUpdateManyWithoutPlayerInNestedInput
    substitutionsOut?: SubstitutionUpdateManyWithoutPlayerOutNestedInput
    activeInGames?: GameUpdateManyWithoutActivePlayersNestedInput
  }

  export type PlayerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    posicion?: StringFieldUpdateOperationsInput | string
    teamId?: IntFieldUpdateOperationsInput | number
    stats?: PlayerGameStatsUncheckedUpdateManyWithoutPlayerNestedInput
    substitutionsIn?: SubstitutionUncheckedUpdateManyWithoutPlayerInNestedInput
    substitutionsOut?: SubstitutionUncheckedUpdateManyWithoutPlayerOutNestedInput
    activeInGames?: GameUncheckedUpdateManyWithoutActivePlayersNestedInput
  }

  export type PlayerCreateManyInput = {
    id?: number
    nombre: string
    apellido: string
    numero: number
    posicion: string
    teamId: number
  }

  export type PlayerUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    posicion?: StringFieldUpdateOperationsInput | string
  }

  export type PlayerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    posicion?: StringFieldUpdateOperationsInput | string
    teamId?: IntFieldUpdateOperationsInput | number
  }

  export type EventCreateInput = {
    nombre: string
    fechaInicio: Date | string
    fechaFin: Date | string
    games?: GameCreateNestedManyWithoutEventInput
  }

  export type EventUncheckedCreateInput = {
    id?: number
    nombre: string
    fechaInicio: Date | string
    fechaFin: Date | string
    games?: GameUncheckedCreateNestedManyWithoutEventInput
  }

  export type EventUpdateInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: DateTimeFieldUpdateOperationsInput | Date | string
    games?: GameUpdateManyWithoutEventNestedInput
  }

  export type EventUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: DateTimeFieldUpdateOperationsInput | Date | string
    games?: GameUncheckedUpdateManyWithoutEventNestedInput
  }

  export type EventCreateManyInput = {
    id?: number
    nombre: string
    fechaInicio: Date | string
    fechaFin: Date | string
  }

  export type EventUpdateManyMutationInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameCreateInput = {
    fecha: Date | string
    estado: string
    gameTime?: number
    homeScore?: number
    awayScore?: number
    currentQuarter?: number
    quarterLength?: number
    totalQuarters?: number
    overtimeLength?: number
    quarterTime?: number
    isOvertime?: boolean
    event: EventCreateNestedOneWithoutGamesInput
    teamHome: TeamCreateNestedOneWithoutHomeGamesInput
    teamAway: TeamCreateNestedOneWithoutAwayGamesInput
    stats?: PlayerGameStatsCreateNestedManyWithoutGameInput
    substitutions?: SubstitutionCreateNestedManyWithoutGameInput
    activePlayers?: PlayerCreateNestedManyWithoutActiveInGamesInput
  }

  export type GameUncheckedCreateInput = {
    id?: number
    eventId: number
    teamHomeId: number
    teamAwayId: number
    fecha: Date | string
    estado: string
    gameTime?: number
    homeScore?: number
    awayScore?: number
    currentQuarter?: number
    quarterLength?: number
    totalQuarters?: number
    overtimeLength?: number
    quarterTime?: number
    isOvertime?: boolean
    stats?: PlayerGameStatsUncheckedCreateNestedManyWithoutGameInput
    substitutions?: SubstitutionUncheckedCreateNestedManyWithoutGameInput
    activePlayers?: PlayerUncheckedCreateNestedManyWithoutActiveInGamesInput
  }

  export type GameUpdateInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: StringFieldUpdateOperationsInput | string
    gameTime?: IntFieldUpdateOperationsInput | number
    homeScore?: IntFieldUpdateOperationsInput | number
    awayScore?: IntFieldUpdateOperationsInput | number
    currentQuarter?: IntFieldUpdateOperationsInput | number
    quarterLength?: IntFieldUpdateOperationsInput | number
    totalQuarters?: IntFieldUpdateOperationsInput | number
    overtimeLength?: IntFieldUpdateOperationsInput | number
    quarterTime?: IntFieldUpdateOperationsInput | number
    isOvertime?: BoolFieldUpdateOperationsInput | boolean
    event?: EventUpdateOneRequiredWithoutGamesNestedInput
    teamHome?: TeamUpdateOneRequiredWithoutHomeGamesNestedInput
    teamAway?: TeamUpdateOneRequiredWithoutAwayGamesNestedInput
    stats?: PlayerGameStatsUpdateManyWithoutGameNestedInput
    substitutions?: SubstitutionUpdateManyWithoutGameNestedInput
    activePlayers?: PlayerUpdateManyWithoutActiveInGamesNestedInput
  }

  export type GameUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    teamHomeId?: IntFieldUpdateOperationsInput | number
    teamAwayId?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: StringFieldUpdateOperationsInput | string
    gameTime?: IntFieldUpdateOperationsInput | number
    homeScore?: IntFieldUpdateOperationsInput | number
    awayScore?: IntFieldUpdateOperationsInput | number
    currentQuarter?: IntFieldUpdateOperationsInput | number
    quarterLength?: IntFieldUpdateOperationsInput | number
    totalQuarters?: IntFieldUpdateOperationsInput | number
    overtimeLength?: IntFieldUpdateOperationsInput | number
    quarterTime?: IntFieldUpdateOperationsInput | number
    isOvertime?: BoolFieldUpdateOperationsInput | boolean
    stats?: PlayerGameStatsUncheckedUpdateManyWithoutGameNestedInput
    substitutions?: SubstitutionUncheckedUpdateManyWithoutGameNestedInput
    activePlayers?: PlayerUncheckedUpdateManyWithoutActiveInGamesNestedInput
  }

  export type GameCreateManyInput = {
    id?: number
    eventId: number
    teamHomeId: number
    teamAwayId: number
    fecha: Date | string
    estado: string
    gameTime?: number
    homeScore?: number
    awayScore?: number
    currentQuarter?: number
    quarterLength?: number
    totalQuarters?: number
    overtimeLength?: number
    quarterTime?: number
    isOvertime?: boolean
  }

  export type GameUpdateManyMutationInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: StringFieldUpdateOperationsInput | string
    gameTime?: IntFieldUpdateOperationsInput | number
    homeScore?: IntFieldUpdateOperationsInput | number
    awayScore?: IntFieldUpdateOperationsInput | number
    currentQuarter?: IntFieldUpdateOperationsInput | number
    quarterLength?: IntFieldUpdateOperationsInput | number
    totalQuarters?: IntFieldUpdateOperationsInput | number
    overtimeLength?: IntFieldUpdateOperationsInput | number
    quarterTime?: IntFieldUpdateOperationsInput | number
    isOvertime?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GameUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    teamHomeId?: IntFieldUpdateOperationsInput | number
    teamAwayId?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: StringFieldUpdateOperationsInput | string
    gameTime?: IntFieldUpdateOperationsInput | number
    homeScore?: IntFieldUpdateOperationsInput | number
    awayScore?: IntFieldUpdateOperationsInput | number
    currentQuarter?: IntFieldUpdateOperationsInput | number
    quarterLength?: IntFieldUpdateOperationsInput | number
    totalQuarters?: IntFieldUpdateOperationsInput | number
    overtimeLength?: IntFieldUpdateOperationsInput | number
    quarterTime?: IntFieldUpdateOperationsInput | number
    isOvertime?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PlayerGameStatsCreateInput = {
    puntos: number
    rebotes: number
    asistencias: number
    robos: number
    tapones: number
    tirosIntentados: number
    tirosAnotados: number
    tiros3Intentados: number
    tiros3Anotados: number
    minutos: number
    plusMinus: number
    game: GameCreateNestedOneWithoutStatsInput
    player: PlayerCreateNestedOneWithoutStatsInput
  }

  export type PlayerGameStatsUncheckedCreateInput = {
    id?: number
    gameId: number
    playerId: number
    puntos: number
    rebotes: number
    asistencias: number
    robos: number
    tapones: number
    tirosIntentados: number
    tirosAnotados: number
    tiros3Intentados: number
    tiros3Anotados: number
    minutos: number
    plusMinus: number
  }

  export type PlayerGameStatsUpdateInput = {
    puntos?: IntFieldUpdateOperationsInput | number
    rebotes?: IntFieldUpdateOperationsInput | number
    asistencias?: IntFieldUpdateOperationsInput | number
    robos?: IntFieldUpdateOperationsInput | number
    tapones?: IntFieldUpdateOperationsInput | number
    tirosIntentados?: IntFieldUpdateOperationsInput | number
    tirosAnotados?: IntFieldUpdateOperationsInput | number
    tiros3Intentados?: IntFieldUpdateOperationsInput | number
    tiros3Anotados?: IntFieldUpdateOperationsInput | number
    minutos?: IntFieldUpdateOperationsInput | number
    plusMinus?: IntFieldUpdateOperationsInput | number
    game?: GameUpdateOneRequiredWithoutStatsNestedInput
    player?: PlayerUpdateOneRequiredWithoutStatsNestedInput
  }

  export type PlayerGameStatsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
    playerId?: IntFieldUpdateOperationsInput | number
    puntos?: IntFieldUpdateOperationsInput | number
    rebotes?: IntFieldUpdateOperationsInput | number
    asistencias?: IntFieldUpdateOperationsInput | number
    robos?: IntFieldUpdateOperationsInput | number
    tapones?: IntFieldUpdateOperationsInput | number
    tirosIntentados?: IntFieldUpdateOperationsInput | number
    tirosAnotados?: IntFieldUpdateOperationsInput | number
    tiros3Intentados?: IntFieldUpdateOperationsInput | number
    tiros3Anotados?: IntFieldUpdateOperationsInput | number
    minutos?: IntFieldUpdateOperationsInput | number
    plusMinus?: IntFieldUpdateOperationsInput | number
  }

  export type PlayerGameStatsCreateManyInput = {
    id?: number
    gameId: number
    playerId: number
    puntos: number
    rebotes: number
    asistencias: number
    robos: number
    tapones: number
    tirosIntentados: number
    tirosAnotados: number
    tiros3Intentados: number
    tiros3Anotados: number
    minutos: number
    plusMinus: number
  }

  export type PlayerGameStatsUpdateManyMutationInput = {
    puntos?: IntFieldUpdateOperationsInput | number
    rebotes?: IntFieldUpdateOperationsInput | number
    asistencias?: IntFieldUpdateOperationsInput | number
    robos?: IntFieldUpdateOperationsInput | number
    tapones?: IntFieldUpdateOperationsInput | number
    tirosIntentados?: IntFieldUpdateOperationsInput | number
    tirosAnotados?: IntFieldUpdateOperationsInput | number
    tiros3Intentados?: IntFieldUpdateOperationsInput | number
    tiros3Anotados?: IntFieldUpdateOperationsInput | number
    minutos?: IntFieldUpdateOperationsInput | number
    plusMinus?: IntFieldUpdateOperationsInput | number
  }

  export type PlayerGameStatsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
    playerId?: IntFieldUpdateOperationsInput | number
    puntos?: IntFieldUpdateOperationsInput | number
    rebotes?: IntFieldUpdateOperationsInput | number
    asistencias?: IntFieldUpdateOperationsInput | number
    robos?: IntFieldUpdateOperationsInput | number
    tapones?: IntFieldUpdateOperationsInput | number
    tirosIntentados?: IntFieldUpdateOperationsInput | number
    tirosAnotados?: IntFieldUpdateOperationsInput | number
    tiros3Intentados?: IntFieldUpdateOperationsInput | number
    tiros3Anotados?: IntFieldUpdateOperationsInput | number
    minutos?: IntFieldUpdateOperationsInput | number
    plusMinus?: IntFieldUpdateOperationsInput | number
  }

  export type SubstitutionCreateInput = {
    timestamp: Date | string
    game: GameCreateNestedOneWithoutSubstitutionsInput
    playerIn: PlayerCreateNestedOneWithoutSubstitutionsInInput
    playerOut: PlayerCreateNestedOneWithoutSubstitutionsOutInput
  }

  export type SubstitutionUncheckedCreateInput = {
    id?: number
    gameId: number
    playerInId: number
    playerOutId: number
    timestamp: Date | string
  }

  export type SubstitutionUpdateInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: GameUpdateOneRequiredWithoutSubstitutionsNestedInput
    playerIn?: PlayerUpdateOneRequiredWithoutSubstitutionsInNestedInput
    playerOut?: PlayerUpdateOneRequiredWithoutSubstitutionsOutNestedInput
  }

  export type SubstitutionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
    playerInId?: IntFieldUpdateOperationsInput | number
    playerOutId?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubstitutionCreateManyInput = {
    id?: number
    gameId: number
    playerInId: number
    playerOutId: number
    timestamp: Date | string
  }

  export type SubstitutionUpdateManyMutationInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubstitutionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
    playerInId?: IntFieldUpdateOperationsInput | number
    playerOutId?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    rol?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    rol?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    email?: SortOrder
    passwordHash?: SortOrder
    rol?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type PlayerListRelationFilter = {
    every?: PlayerWhereInput
    some?: PlayerWhereInput
    none?: PlayerWhereInput
  }

  export type GameListRelationFilter = {
    every?: GameWhereInput
    some?: GameWhereInput
    none?: GameWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PlayerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GameOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    logo?: SortOrder
  }

  export type TeamAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TeamMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    logo?: SortOrder
  }

  export type TeamMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    logo?: SortOrder
  }

  export type TeamSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type TeamRelationFilter = {
    is?: TeamWhereInput
    isNot?: TeamWhereInput
  }

  export type PlayerGameStatsListRelationFilter = {
    every?: PlayerGameStatsWhereInput
    some?: PlayerGameStatsWhereInput
    none?: PlayerGameStatsWhereInput
  }

  export type SubstitutionListRelationFilter = {
    every?: SubstitutionWhereInput
    some?: SubstitutionWhereInput
    none?: SubstitutionWhereInput
  }

  export type PlayerGameStatsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubstitutionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlayerCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    numero?: SortOrder
    posicion?: SortOrder
    teamId?: SortOrder
  }

  export type PlayerAvgOrderByAggregateInput = {
    id?: SortOrder
    numero?: SortOrder
    teamId?: SortOrder
  }

  export type PlayerMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    numero?: SortOrder
    posicion?: SortOrder
    teamId?: SortOrder
  }

  export type PlayerMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    apellido?: SortOrder
    numero?: SortOrder
    posicion?: SortOrder
    teamId?: SortOrder
  }

  export type PlayerSumOrderByAggregateInput = {
    id?: SortOrder
    numero?: SortOrder
    teamId?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EventCountOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    fechaInicio?: SortOrder
    fechaFin?: SortOrder
  }

  export type EventAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EventMaxOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    fechaInicio?: SortOrder
    fechaFin?: SortOrder
  }

  export type EventMinOrderByAggregateInput = {
    id?: SortOrder
    nombre?: SortOrder
    fechaInicio?: SortOrder
    fechaFin?: SortOrder
  }

  export type EventSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EventRelationFilter = {
    is?: EventWhereInput
    isNot?: EventWhereInput
  }

  export type GameCountOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    teamHomeId?: SortOrder
    teamAwayId?: SortOrder
    fecha?: SortOrder
    estado?: SortOrder
    gameTime?: SortOrder
    homeScore?: SortOrder
    awayScore?: SortOrder
    currentQuarter?: SortOrder
    quarterLength?: SortOrder
    totalQuarters?: SortOrder
    overtimeLength?: SortOrder
    quarterTime?: SortOrder
    isOvertime?: SortOrder
  }

  export type GameAvgOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    teamHomeId?: SortOrder
    teamAwayId?: SortOrder
    gameTime?: SortOrder
    homeScore?: SortOrder
    awayScore?: SortOrder
    currentQuarter?: SortOrder
    quarterLength?: SortOrder
    totalQuarters?: SortOrder
    overtimeLength?: SortOrder
    quarterTime?: SortOrder
  }

  export type GameMaxOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    teamHomeId?: SortOrder
    teamAwayId?: SortOrder
    fecha?: SortOrder
    estado?: SortOrder
    gameTime?: SortOrder
    homeScore?: SortOrder
    awayScore?: SortOrder
    currentQuarter?: SortOrder
    quarterLength?: SortOrder
    totalQuarters?: SortOrder
    overtimeLength?: SortOrder
    quarterTime?: SortOrder
    isOvertime?: SortOrder
  }

  export type GameMinOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    teamHomeId?: SortOrder
    teamAwayId?: SortOrder
    fecha?: SortOrder
    estado?: SortOrder
    gameTime?: SortOrder
    homeScore?: SortOrder
    awayScore?: SortOrder
    currentQuarter?: SortOrder
    quarterLength?: SortOrder
    totalQuarters?: SortOrder
    overtimeLength?: SortOrder
    quarterTime?: SortOrder
    isOvertime?: SortOrder
  }

  export type GameSumOrderByAggregateInput = {
    id?: SortOrder
    eventId?: SortOrder
    teamHomeId?: SortOrder
    teamAwayId?: SortOrder
    gameTime?: SortOrder
    homeScore?: SortOrder
    awayScore?: SortOrder
    currentQuarter?: SortOrder
    quarterLength?: SortOrder
    totalQuarters?: SortOrder
    overtimeLength?: SortOrder
    quarterTime?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type GameRelationFilter = {
    is?: GameWhereInput
    isNot?: GameWhereInput
  }

  export type PlayerRelationFilter = {
    is?: PlayerWhereInput
    isNot?: PlayerWhereInput
  }

  export type PlayerGameStatsGameIdPlayerIdCompoundUniqueInput = {
    gameId: number
    playerId: number
  }

  export type PlayerGameStatsCountOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
    playerId?: SortOrder
    puntos?: SortOrder
    rebotes?: SortOrder
    asistencias?: SortOrder
    robos?: SortOrder
    tapones?: SortOrder
    tirosIntentados?: SortOrder
    tirosAnotados?: SortOrder
    tiros3Intentados?: SortOrder
    tiros3Anotados?: SortOrder
    minutos?: SortOrder
    plusMinus?: SortOrder
  }

  export type PlayerGameStatsAvgOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
    playerId?: SortOrder
    puntos?: SortOrder
    rebotes?: SortOrder
    asistencias?: SortOrder
    robos?: SortOrder
    tapones?: SortOrder
    tirosIntentados?: SortOrder
    tirosAnotados?: SortOrder
    tiros3Intentados?: SortOrder
    tiros3Anotados?: SortOrder
    minutos?: SortOrder
    plusMinus?: SortOrder
  }

  export type PlayerGameStatsMaxOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
    playerId?: SortOrder
    puntos?: SortOrder
    rebotes?: SortOrder
    asistencias?: SortOrder
    robos?: SortOrder
    tapones?: SortOrder
    tirosIntentados?: SortOrder
    tirosAnotados?: SortOrder
    tiros3Intentados?: SortOrder
    tiros3Anotados?: SortOrder
    minutos?: SortOrder
    plusMinus?: SortOrder
  }

  export type PlayerGameStatsMinOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
    playerId?: SortOrder
    puntos?: SortOrder
    rebotes?: SortOrder
    asistencias?: SortOrder
    robos?: SortOrder
    tapones?: SortOrder
    tirosIntentados?: SortOrder
    tirosAnotados?: SortOrder
    tiros3Intentados?: SortOrder
    tiros3Anotados?: SortOrder
    minutos?: SortOrder
    plusMinus?: SortOrder
  }

  export type PlayerGameStatsSumOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
    playerId?: SortOrder
    puntos?: SortOrder
    rebotes?: SortOrder
    asistencias?: SortOrder
    robos?: SortOrder
    tapones?: SortOrder
    tirosIntentados?: SortOrder
    tirosAnotados?: SortOrder
    tiros3Intentados?: SortOrder
    tiros3Anotados?: SortOrder
    minutos?: SortOrder
    plusMinus?: SortOrder
  }

  export type SubstitutionCountOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
    playerInId?: SortOrder
    playerOutId?: SortOrder
    timestamp?: SortOrder
  }

  export type SubstitutionAvgOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
    playerInId?: SortOrder
    playerOutId?: SortOrder
  }

  export type SubstitutionMaxOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
    playerInId?: SortOrder
    playerOutId?: SortOrder
    timestamp?: SortOrder
  }

  export type SubstitutionMinOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
    playerInId?: SortOrder
    playerOutId?: SortOrder
    timestamp?: SortOrder
  }

  export type SubstitutionSumOrderByAggregateInput = {
    id?: SortOrder
    gameId?: SortOrder
    playerInId?: SortOrder
    playerOutId?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PlayerCreateNestedManyWithoutTeamInput = {
    create?: XOR<PlayerCreateWithoutTeamInput, PlayerUncheckedCreateWithoutTeamInput> | PlayerCreateWithoutTeamInput[] | PlayerUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutTeamInput | PlayerCreateOrConnectWithoutTeamInput[]
    createMany?: PlayerCreateManyTeamInputEnvelope
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
  }

  export type GameCreateNestedManyWithoutTeamHomeInput = {
    create?: XOR<GameCreateWithoutTeamHomeInput, GameUncheckedCreateWithoutTeamHomeInput> | GameCreateWithoutTeamHomeInput[] | GameUncheckedCreateWithoutTeamHomeInput[]
    connectOrCreate?: GameCreateOrConnectWithoutTeamHomeInput | GameCreateOrConnectWithoutTeamHomeInput[]
    createMany?: GameCreateManyTeamHomeInputEnvelope
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type GameCreateNestedManyWithoutTeamAwayInput = {
    create?: XOR<GameCreateWithoutTeamAwayInput, GameUncheckedCreateWithoutTeamAwayInput> | GameCreateWithoutTeamAwayInput[] | GameUncheckedCreateWithoutTeamAwayInput[]
    connectOrCreate?: GameCreateOrConnectWithoutTeamAwayInput | GameCreateOrConnectWithoutTeamAwayInput[]
    createMany?: GameCreateManyTeamAwayInputEnvelope
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type PlayerUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<PlayerCreateWithoutTeamInput, PlayerUncheckedCreateWithoutTeamInput> | PlayerCreateWithoutTeamInput[] | PlayerUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutTeamInput | PlayerCreateOrConnectWithoutTeamInput[]
    createMany?: PlayerCreateManyTeamInputEnvelope
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
  }

  export type GameUncheckedCreateNestedManyWithoutTeamHomeInput = {
    create?: XOR<GameCreateWithoutTeamHomeInput, GameUncheckedCreateWithoutTeamHomeInput> | GameCreateWithoutTeamHomeInput[] | GameUncheckedCreateWithoutTeamHomeInput[]
    connectOrCreate?: GameCreateOrConnectWithoutTeamHomeInput | GameCreateOrConnectWithoutTeamHomeInput[]
    createMany?: GameCreateManyTeamHomeInputEnvelope
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type GameUncheckedCreateNestedManyWithoutTeamAwayInput = {
    create?: XOR<GameCreateWithoutTeamAwayInput, GameUncheckedCreateWithoutTeamAwayInput> | GameCreateWithoutTeamAwayInput[] | GameUncheckedCreateWithoutTeamAwayInput[]
    connectOrCreate?: GameCreateOrConnectWithoutTeamAwayInput | GameCreateOrConnectWithoutTeamAwayInput[]
    createMany?: GameCreateManyTeamAwayInputEnvelope
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type PlayerUpdateManyWithoutTeamNestedInput = {
    create?: XOR<PlayerCreateWithoutTeamInput, PlayerUncheckedCreateWithoutTeamInput> | PlayerCreateWithoutTeamInput[] | PlayerUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutTeamInput | PlayerCreateOrConnectWithoutTeamInput[]
    upsert?: PlayerUpsertWithWhereUniqueWithoutTeamInput | PlayerUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: PlayerCreateManyTeamInputEnvelope
    set?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    disconnect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    delete?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    update?: PlayerUpdateWithWhereUniqueWithoutTeamInput | PlayerUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: PlayerUpdateManyWithWhereWithoutTeamInput | PlayerUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
  }

  export type GameUpdateManyWithoutTeamHomeNestedInput = {
    create?: XOR<GameCreateWithoutTeamHomeInput, GameUncheckedCreateWithoutTeamHomeInput> | GameCreateWithoutTeamHomeInput[] | GameUncheckedCreateWithoutTeamHomeInput[]
    connectOrCreate?: GameCreateOrConnectWithoutTeamHomeInput | GameCreateOrConnectWithoutTeamHomeInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutTeamHomeInput | GameUpsertWithWhereUniqueWithoutTeamHomeInput[]
    createMany?: GameCreateManyTeamHomeInputEnvelope
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutTeamHomeInput | GameUpdateWithWhereUniqueWithoutTeamHomeInput[]
    updateMany?: GameUpdateManyWithWhereWithoutTeamHomeInput | GameUpdateManyWithWhereWithoutTeamHomeInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type GameUpdateManyWithoutTeamAwayNestedInput = {
    create?: XOR<GameCreateWithoutTeamAwayInput, GameUncheckedCreateWithoutTeamAwayInput> | GameCreateWithoutTeamAwayInput[] | GameUncheckedCreateWithoutTeamAwayInput[]
    connectOrCreate?: GameCreateOrConnectWithoutTeamAwayInput | GameCreateOrConnectWithoutTeamAwayInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutTeamAwayInput | GameUpsertWithWhereUniqueWithoutTeamAwayInput[]
    createMany?: GameCreateManyTeamAwayInputEnvelope
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutTeamAwayInput | GameUpdateWithWhereUniqueWithoutTeamAwayInput[]
    updateMany?: GameUpdateManyWithWhereWithoutTeamAwayInput | GameUpdateManyWithWhereWithoutTeamAwayInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type PlayerUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<PlayerCreateWithoutTeamInput, PlayerUncheckedCreateWithoutTeamInput> | PlayerCreateWithoutTeamInput[] | PlayerUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutTeamInput | PlayerCreateOrConnectWithoutTeamInput[]
    upsert?: PlayerUpsertWithWhereUniqueWithoutTeamInput | PlayerUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: PlayerCreateManyTeamInputEnvelope
    set?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    disconnect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    delete?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    update?: PlayerUpdateWithWhereUniqueWithoutTeamInput | PlayerUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: PlayerUpdateManyWithWhereWithoutTeamInput | PlayerUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
  }

  export type GameUncheckedUpdateManyWithoutTeamHomeNestedInput = {
    create?: XOR<GameCreateWithoutTeamHomeInput, GameUncheckedCreateWithoutTeamHomeInput> | GameCreateWithoutTeamHomeInput[] | GameUncheckedCreateWithoutTeamHomeInput[]
    connectOrCreate?: GameCreateOrConnectWithoutTeamHomeInput | GameCreateOrConnectWithoutTeamHomeInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutTeamHomeInput | GameUpsertWithWhereUniqueWithoutTeamHomeInput[]
    createMany?: GameCreateManyTeamHomeInputEnvelope
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutTeamHomeInput | GameUpdateWithWhereUniqueWithoutTeamHomeInput[]
    updateMany?: GameUpdateManyWithWhereWithoutTeamHomeInput | GameUpdateManyWithWhereWithoutTeamHomeInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type GameUncheckedUpdateManyWithoutTeamAwayNestedInput = {
    create?: XOR<GameCreateWithoutTeamAwayInput, GameUncheckedCreateWithoutTeamAwayInput> | GameCreateWithoutTeamAwayInput[] | GameUncheckedCreateWithoutTeamAwayInput[]
    connectOrCreate?: GameCreateOrConnectWithoutTeamAwayInput | GameCreateOrConnectWithoutTeamAwayInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutTeamAwayInput | GameUpsertWithWhereUniqueWithoutTeamAwayInput[]
    createMany?: GameCreateManyTeamAwayInputEnvelope
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutTeamAwayInput | GameUpdateWithWhereUniqueWithoutTeamAwayInput[]
    updateMany?: GameUpdateManyWithWhereWithoutTeamAwayInput | GameUpdateManyWithWhereWithoutTeamAwayInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type TeamCreateNestedOneWithoutPlayersInput = {
    create?: XOR<TeamCreateWithoutPlayersInput, TeamUncheckedCreateWithoutPlayersInput>
    connectOrCreate?: TeamCreateOrConnectWithoutPlayersInput
    connect?: TeamWhereUniqueInput
  }

  export type PlayerGameStatsCreateNestedManyWithoutPlayerInput = {
    create?: XOR<PlayerGameStatsCreateWithoutPlayerInput, PlayerGameStatsUncheckedCreateWithoutPlayerInput> | PlayerGameStatsCreateWithoutPlayerInput[] | PlayerGameStatsUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: PlayerGameStatsCreateOrConnectWithoutPlayerInput | PlayerGameStatsCreateOrConnectWithoutPlayerInput[]
    createMany?: PlayerGameStatsCreateManyPlayerInputEnvelope
    connect?: PlayerGameStatsWhereUniqueInput | PlayerGameStatsWhereUniqueInput[]
  }

  export type SubstitutionCreateNestedManyWithoutPlayerInInput = {
    create?: XOR<SubstitutionCreateWithoutPlayerInInput, SubstitutionUncheckedCreateWithoutPlayerInInput> | SubstitutionCreateWithoutPlayerInInput[] | SubstitutionUncheckedCreateWithoutPlayerInInput[]
    connectOrCreate?: SubstitutionCreateOrConnectWithoutPlayerInInput | SubstitutionCreateOrConnectWithoutPlayerInInput[]
    createMany?: SubstitutionCreateManyPlayerInInputEnvelope
    connect?: SubstitutionWhereUniqueInput | SubstitutionWhereUniqueInput[]
  }

  export type SubstitutionCreateNestedManyWithoutPlayerOutInput = {
    create?: XOR<SubstitutionCreateWithoutPlayerOutInput, SubstitutionUncheckedCreateWithoutPlayerOutInput> | SubstitutionCreateWithoutPlayerOutInput[] | SubstitutionUncheckedCreateWithoutPlayerOutInput[]
    connectOrCreate?: SubstitutionCreateOrConnectWithoutPlayerOutInput | SubstitutionCreateOrConnectWithoutPlayerOutInput[]
    createMany?: SubstitutionCreateManyPlayerOutInputEnvelope
    connect?: SubstitutionWhereUniqueInput | SubstitutionWhereUniqueInput[]
  }

  export type GameCreateNestedManyWithoutActivePlayersInput = {
    create?: XOR<GameCreateWithoutActivePlayersInput, GameUncheckedCreateWithoutActivePlayersInput> | GameCreateWithoutActivePlayersInput[] | GameUncheckedCreateWithoutActivePlayersInput[]
    connectOrCreate?: GameCreateOrConnectWithoutActivePlayersInput | GameCreateOrConnectWithoutActivePlayersInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type PlayerGameStatsUncheckedCreateNestedManyWithoutPlayerInput = {
    create?: XOR<PlayerGameStatsCreateWithoutPlayerInput, PlayerGameStatsUncheckedCreateWithoutPlayerInput> | PlayerGameStatsCreateWithoutPlayerInput[] | PlayerGameStatsUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: PlayerGameStatsCreateOrConnectWithoutPlayerInput | PlayerGameStatsCreateOrConnectWithoutPlayerInput[]
    createMany?: PlayerGameStatsCreateManyPlayerInputEnvelope
    connect?: PlayerGameStatsWhereUniqueInput | PlayerGameStatsWhereUniqueInput[]
  }

  export type SubstitutionUncheckedCreateNestedManyWithoutPlayerInInput = {
    create?: XOR<SubstitutionCreateWithoutPlayerInInput, SubstitutionUncheckedCreateWithoutPlayerInInput> | SubstitutionCreateWithoutPlayerInInput[] | SubstitutionUncheckedCreateWithoutPlayerInInput[]
    connectOrCreate?: SubstitutionCreateOrConnectWithoutPlayerInInput | SubstitutionCreateOrConnectWithoutPlayerInInput[]
    createMany?: SubstitutionCreateManyPlayerInInputEnvelope
    connect?: SubstitutionWhereUniqueInput | SubstitutionWhereUniqueInput[]
  }

  export type SubstitutionUncheckedCreateNestedManyWithoutPlayerOutInput = {
    create?: XOR<SubstitutionCreateWithoutPlayerOutInput, SubstitutionUncheckedCreateWithoutPlayerOutInput> | SubstitutionCreateWithoutPlayerOutInput[] | SubstitutionUncheckedCreateWithoutPlayerOutInput[]
    connectOrCreate?: SubstitutionCreateOrConnectWithoutPlayerOutInput | SubstitutionCreateOrConnectWithoutPlayerOutInput[]
    createMany?: SubstitutionCreateManyPlayerOutInputEnvelope
    connect?: SubstitutionWhereUniqueInput | SubstitutionWhereUniqueInput[]
  }

  export type GameUncheckedCreateNestedManyWithoutActivePlayersInput = {
    create?: XOR<GameCreateWithoutActivePlayersInput, GameUncheckedCreateWithoutActivePlayersInput> | GameCreateWithoutActivePlayersInput[] | GameUncheckedCreateWithoutActivePlayersInput[]
    connectOrCreate?: GameCreateOrConnectWithoutActivePlayersInput | GameCreateOrConnectWithoutActivePlayersInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type TeamUpdateOneRequiredWithoutPlayersNestedInput = {
    create?: XOR<TeamCreateWithoutPlayersInput, TeamUncheckedCreateWithoutPlayersInput>
    connectOrCreate?: TeamCreateOrConnectWithoutPlayersInput
    upsert?: TeamUpsertWithoutPlayersInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutPlayersInput, TeamUpdateWithoutPlayersInput>, TeamUncheckedUpdateWithoutPlayersInput>
  }

  export type PlayerGameStatsUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<PlayerGameStatsCreateWithoutPlayerInput, PlayerGameStatsUncheckedCreateWithoutPlayerInput> | PlayerGameStatsCreateWithoutPlayerInput[] | PlayerGameStatsUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: PlayerGameStatsCreateOrConnectWithoutPlayerInput | PlayerGameStatsCreateOrConnectWithoutPlayerInput[]
    upsert?: PlayerGameStatsUpsertWithWhereUniqueWithoutPlayerInput | PlayerGameStatsUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: PlayerGameStatsCreateManyPlayerInputEnvelope
    set?: PlayerGameStatsWhereUniqueInput | PlayerGameStatsWhereUniqueInput[]
    disconnect?: PlayerGameStatsWhereUniqueInput | PlayerGameStatsWhereUniqueInput[]
    delete?: PlayerGameStatsWhereUniqueInput | PlayerGameStatsWhereUniqueInput[]
    connect?: PlayerGameStatsWhereUniqueInput | PlayerGameStatsWhereUniqueInput[]
    update?: PlayerGameStatsUpdateWithWhereUniqueWithoutPlayerInput | PlayerGameStatsUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: PlayerGameStatsUpdateManyWithWhereWithoutPlayerInput | PlayerGameStatsUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: PlayerGameStatsScalarWhereInput | PlayerGameStatsScalarWhereInput[]
  }

  export type SubstitutionUpdateManyWithoutPlayerInNestedInput = {
    create?: XOR<SubstitutionCreateWithoutPlayerInInput, SubstitutionUncheckedCreateWithoutPlayerInInput> | SubstitutionCreateWithoutPlayerInInput[] | SubstitutionUncheckedCreateWithoutPlayerInInput[]
    connectOrCreate?: SubstitutionCreateOrConnectWithoutPlayerInInput | SubstitutionCreateOrConnectWithoutPlayerInInput[]
    upsert?: SubstitutionUpsertWithWhereUniqueWithoutPlayerInInput | SubstitutionUpsertWithWhereUniqueWithoutPlayerInInput[]
    createMany?: SubstitutionCreateManyPlayerInInputEnvelope
    set?: SubstitutionWhereUniqueInput | SubstitutionWhereUniqueInput[]
    disconnect?: SubstitutionWhereUniqueInput | SubstitutionWhereUniqueInput[]
    delete?: SubstitutionWhereUniqueInput | SubstitutionWhereUniqueInput[]
    connect?: SubstitutionWhereUniqueInput | SubstitutionWhereUniqueInput[]
    update?: SubstitutionUpdateWithWhereUniqueWithoutPlayerInInput | SubstitutionUpdateWithWhereUniqueWithoutPlayerInInput[]
    updateMany?: SubstitutionUpdateManyWithWhereWithoutPlayerInInput | SubstitutionUpdateManyWithWhereWithoutPlayerInInput[]
    deleteMany?: SubstitutionScalarWhereInput | SubstitutionScalarWhereInput[]
  }

  export type SubstitutionUpdateManyWithoutPlayerOutNestedInput = {
    create?: XOR<SubstitutionCreateWithoutPlayerOutInput, SubstitutionUncheckedCreateWithoutPlayerOutInput> | SubstitutionCreateWithoutPlayerOutInput[] | SubstitutionUncheckedCreateWithoutPlayerOutInput[]
    connectOrCreate?: SubstitutionCreateOrConnectWithoutPlayerOutInput | SubstitutionCreateOrConnectWithoutPlayerOutInput[]
    upsert?: SubstitutionUpsertWithWhereUniqueWithoutPlayerOutInput | SubstitutionUpsertWithWhereUniqueWithoutPlayerOutInput[]
    createMany?: SubstitutionCreateManyPlayerOutInputEnvelope
    set?: SubstitutionWhereUniqueInput | SubstitutionWhereUniqueInput[]
    disconnect?: SubstitutionWhereUniqueInput | SubstitutionWhereUniqueInput[]
    delete?: SubstitutionWhereUniqueInput | SubstitutionWhereUniqueInput[]
    connect?: SubstitutionWhereUniqueInput | SubstitutionWhereUniqueInput[]
    update?: SubstitutionUpdateWithWhereUniqueWithoutPlayerOutInput | SubstitutionUpdateWithWhereUniqueWithoutPlayerOutInput[]
    updateMany?: SubstitutionUpdateManyWithWhereWithoutPlayerOutInput | SubstitutionUpdateManyWithWhereWithoutPlayerOutInput[]
    deleteMany?: SubstitutionScalarWhereInput | SubstitutionScalarWhereInput[]
  }

  export type GameUpdateManyWithoutActivePlayersNestedInput = {
    create?: XOR<GameCreateWithoutActivePlayersInput, GameUncheckedCreateWithoutActivePlayersInput> | GameCreateWithoutActivePlayersInput[] | GameUncheckedCreateWithoutActivePlayersInput[]
    connectOrCreate?: GameCreateOrConnectWithoutActivePlayersInput | GameCreateOrConnectWithoutActivePlayersInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutActivePlayersInput | GameUpsertWithWhereUniqueWithoutActivePlayersInput[]
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutActivePlayersInput | GameUpdateWithWhereUniqueWithoutActivePlayersInput[]
    updateMany?: GameUpdateManyWithWhereWithoutActivePlayersInput | GameUpdateManyWithWhereWithoutActivePlayersInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type PlayerGameStatsUncheckedUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<PlayerGameStatsCreateWithoutPlayerInput, PlayerGameStatsUncheckedCreateWithoutPlayerInput> | PlayerGameStatsCreateWithoutPlayerInput[] | PlayerGameStatsUncheckedCreateWithoutPlayerInput[]
    connectOrCreate?: PlayerGameStatsCreateOrConnectWithoutPlayerInput | PlayerGameStatsCreateOrConnectWithoutPlayerInput[]
    upsert?: PlayerGameStatsUpsertWithWhereUniqueWithoutPlayerInput | PlayerGameStatsUpsertWithWhereUniqueWithoutPlayerInput[]
    createMany?: PlayerGameStatsCreateManyPlayerInputEnvelope
    set?: PlayerGameStatsWhereUniqueInput | PlayerGameStatsWhereUniqueInput[]
    disconnect?: PlayerGameStatsWhereUniqueInput | PlayerGameStatsWhereUniqueInput[]
    delete?: PlayerGameStatsWhereUniqueInput | PlayerGameStatsWhereUniqueInput[]
    connect?: PlayerGameStatsWhereUniqueInput | PlayerGameStatsWhereUniqueInput[]
    update?: PlayerGameStatsUpdateWithWhereUniqueWithoutPlayerInput | PlayerGameStatsUpdateWithWhereUniqueWithoutPlayerInput[]
    updateMany?: PlayerGameStatsUpdateManyWithWhereWithoutPlayerInput | PlayerGameStatsUpdateManyWithWhereWithoutPlayerInput[]
    deleteMany?: PlayerGameStatsScalarWhereInput | PlayerGameStatsScalarWhereInput[]
  }

  export type SubstitutionUncheckedUpdateManyWithoutPlayerInNestedInput = {
    create?: XOR<SubstitutionCreateWithoutPlayerInInput, SubstitutionUncheckedCreateWithoutPlayerInInput> | SubstitutionCreateWithoutPlayerInInput[] | SubstitutionUncheckedCreateWithoutPlayerInInput[]
    connectOrCreate?: SubstitutionCreateOrConnectWithoutPlayerInInput | SubstitutionCreateOrConnectWithoutPlayerInInput[]
    upsert?: SubstitutionUpsertWithWhereUniqueWithoutPlayerInInput | SubstitutionUpsertWithWhereUniqueWithoutPlayerInInput[]
    createMany?: SubstitutionCreateManyPlayerInInputEnvelope
    set?: SubstitutionWhereUniqueInput | SubstitutionWhereUniqueInput[]
    disconnect?: SubstitutionWhereUniqueInput | SubstitutionWhereUniqueInput[]
    delete?: SubstitutionWhereUniqueInput | SubstitutionWhereUniqueInput[]
    connect?: SubstitutionWhereUniqueInput | SubstitutionWhereUniqueInput[]
    update?: SubstitutionUpdateWithWhereUniqueWithoutPlayerInInput | SubstitutionUpdateWithWhereUniqueWithoutPlayerInInput[]
    updateMany?: SubstitutionUpdateManyWithWhereWithoutPlayerInInput | SubstitutionUpdateManyWithWhereWithoutPlayerInInput[]
    deleteMany?: SubstitutionScalarWhereInput | SubstitutionScalarWhereInput[]
  }

  export type SubstitutionUncheckedUpdateManyWithoutPlayerOutNestedInput = {
    create?: XOR<SubstitutionCreateWithoutPlayerOutInput, SubstitutionUncheckedCreateWithoutPlayerOutInput> | SubstitutionCreateWithoutPlayerOutInput[] | SubstitutionUncheckedCreateWithoutPlayerOutInput[]
    connectOrCreate?: SubstitutionCreateOrConnectWithoutPlayerOutInput | SubstitutionCreateOrConnectWithoutPlayerOutInput[]
    upsert?: SubstitutionUpsertWithWhereUniqueWithoutPlayerOutInput | SubstitutionUpsertWithWhereUniqueWithoutPlayerOutInput[]
    createMany?: SubstitutionCreateManyPlayerOutInputEnvelope
    set?: SubstitutionWhereUniqueInput | SubstitutionWhereUniqueInput[]
    disconnect?: SubstitutionWhereUniqueInput | SubstitutionWhereUniqueInput[]
    delete?: SubstitutionWhereUniqueInput | SubstitutionWhereUniqueInput[]
    connect?: SubstitutionWhereUniqueInput | SubstitutionWhereUniqueInput[]
    update?: SubstitutionUpdateWithWhereUniqueWithoutPlayerOutInput | SubstitutionUpdateWithWhereUniqueWithoutPlayerOutInput[]
    updateMany?: SubstitutionUpdateManyWithWhereWithoutPlayerOutInput | SubstitutionUpdateManyWithWhereWithoutPlayerOutInput[]
    deleteMany?: SubstitutionScalarWhereInput | SubstitutionScalarWhereInput[]
  }

  export type GameUncheckedUpdateManyWithoutActivePlayersNestedInput = {
    create?: XOR<GameCreateWithoutActivePlayersInput, GameUncheckedCreateWithoutActivePlayersInput> | GameCreateWithoutActivePlayersInput[] | GameUncheckedCreateWithoutActivePlayersInput[]
    connectOrCreate?: GameCreateOrConnectWithoutActivePlayersInput | GameCreateOrConnectWithoutActivePlayersInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutActivePlayersInput | GameUpsertWithWhereUniqueWithoutActivePlayersInput[]
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutActivePlayersInput | GameUpdateWithWhereUniqueWithoutActivePlayersInput[]
    updateMany?: GameUpdateManyWithWhereWithoutActivePlayersInput | GameUpdateManyWithWhereWithoutActivePlayersInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type GameCreateNestedManyWithoutEventInput = {
    create?: XOR<GameCreateWithoutEventInput, GameUncheckedCreateWithoutEventInput> | GameCreateWithoutEventInput[] | GameUncheckedCreateWithoutEventInput[]
    connectOrCreate?: GameCreateOrConnectWithoutEventInput | GameCreateOrConnectWithoutEventInput[]
    createMany?: GameCreateManyEventInputEnvelope
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type GameUncheckedCreateNestedManyWithoutEventInput = {
    create?: XOR<GameCreateWithoutEventInput, GameUncheckedCreateWithoutEventInput> | GameCreateWithoutEventInput[] | GameUncheckedCreateWithoutEventInput[]
    connectOrCreate?: GameCreateOrConnectWithoutEventInput | GameCreateOrConnectWithoutEventInput[]
    createMany?: GameCreateManyEventInputEnvelope
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type GameUpdateManyWithoutEventNestedInput = {
    create?: XOR<GameCreateWithoutEventInput, GameUncheckedCreateWithoutEventInput> | GameCreateWithoutEventInput[] | GameUncheckedCreateWithoutEventInput[]
    connectOrCreate?: GameCreateOrConnectWithoutEventInput | GameCreateOrConnectWithoutEventInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutEventInput | GameUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: GameCreateManyEventInputEnvelope
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutEventInput | GameUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: GameUpdateManyWithWhereWithoutEventInput | GameUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type GameUncheckedUpdateManyWithoutEventNestedInput = {
    create?: XOR<GameCreateWithoutEventInput, GameUncheckedCreateWithoutEventInput> | GameCreateWithoutEventInput[] | GameUncheckedCreateWithoutEventInput[]
    connectOrCreate?: GameCreateOrConnectWithoutEventInput | GameCreateOrConnectWithoutEventInput[]
    upsert?: GameUpsertWithWhereUniqueWithoutEventInput | GameUpsertWithWhereUniqueWithoutEventInput[]
    createMany?: GameCreateManyEventInputEnvelope
    set?: GameWhereUniqueInput | GameWhereUniqueInput[]
    disconnect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    delete?: GameWhereUniqueInput | GameWhereUniqueInput[]
    connect?: GameWhereUniqueInput | GameWhereUniqueInput[]
    update?: GameUpdateWithWhereUniqueWithoutEventInput | GameUpdateWithWhereUniqueWithoutEventInput[]
    updateMany?: GameUpdateManyWithWhereWithoutEventInput | GameUpdateManyWithWhereWithoutEventInput[]
    deleteMany?: GameScalarWhereInput | GameScalarWhereInput[]
  }

  export type EventCreateNestedOneWithoutGamesInput = {
    create?: XOR<EventCreateWithoutGamesInput, EventUncheckedCreateWithoutGamesInput>
    connectOrCreate?: EventCreateOrConnectWithoutGamesInput
    connect?: EventWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutHomeGamesInput = {
    create?: XOR<TeamCreateWithoutHomeGamesInput, TeamUncheckedCreateWithoutHomeGamesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutHomeGamesInput
    connect?: TeamWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutAwayGamesInput = {
    create?: XOR<TeamCreateWithoutAwayGamesInput, TeamUncheckedCreateWithoutAwayGamesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutAwayGamesInput
    connect?: TeamWhereUniqueInput
  }

  export type PlayerGameStatsCreateNestedManyWithoutGameInput = {
    create?: XOR<PlayerGameStatsCreateWithoutGameInput, PlayerGameStatsUncheckedCreateWithoutGameInput> | PlayerGameStatsCreateWithoutGameInput[] | PlayerGameStatsUncheckedCreateWithoutGameInput[]
    connectOrCreate?: PlayerGameStatsCreateOrConnectWithoutGameInput | PlayerGameStatsCreateOrConnectWithoutGameInput[]
    createMany?: PlayerGameStatsCreateManyGameInputEnvelope
    connect?: PlayerGameStatsWhereUniqueInput | PlayerGameStatsWhereUniqueInput[]
  }

  export type SubstitutionCreateNestedManyWithoutGameInput = {
    create?: XOR<SubstitutionCreateWithoutGameInput, SubstitutionUncheckedCreateWithoutGameInput> | SubstitutionCreateWithoutGameInput[] | SubstitutionUncheckedCreateWithoutGameInput[]
    connectOrCreate?: SubstitutionCreateOrConnectWithoutGameInput | SubstitutionCreateOrConnectWithoutGameInput[]
    createMany?: SubstitutionCreateManyGameInputEnvelope
    connect?: SubstitutionWhereUniqueInput | SubstitutionWhereUniqueInput[]
  }

  export type PlayerCreateNestedManyWithoutActiveInGamesInput = {
    create?: XOR<PlayerCreateWithoutActiveInGamesInput, PlayerUncheckedCreateWithoutActiveInGamesInput> | PlayerCreateWithoutActiveInGamesInput[] | PlayerUncheckedCreateWithoutActiveInGamesInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutActiveInGamesInput | PlayerCreateOrConnectWithoutActiveInGamesInput[]
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
  }

  export type PlayerGameStatsUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<PlayerGameStatsCreateWithoutGameInput, PlayerGameStatsUncheckedCreateWithoutGameInput> | PlayerGameStatsCreateWithoutGameInput[] | PlayerGameStatsUncheckedCreateWithoutGameInput[]
    connectOrCreate?: PlayerGameStatsCreateOrConnectWithoutGameInput | PlayerGameStatsCreateOrConnectWithoutGameInput[]
    createMany?: PlayerGameStatsCreateManyGameInputEnvelope
    connect?: PlayerGameStatsWhereUniqueInput | PlayerGameStatsWhereUniqueInput[]
  }

  export type SubstitutionUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<SubstitutionCreateWithoutGameInput, SubstitutionUncheckedCreateWithoutGameInput> | SubstitutionCreateWithoutGameInput[] | SubstitutionUncheckedCreateWithoutGameInput[]
    connectOrCreate?: SubstitutionCreateOrConnectWithoutGameInput | SubstitutionCreateOrConnectWithoutGameInput[]
    createMany?: SubstitutionCreateManyGameInputEnvelope
    connect?: SubstitutionWhereUniqueInput | SubstitutionWhereUniqueInput[]
  }

  export type PlayerUncheckedCreateNestedManyWithoutActiveInGamesInput = {
    create?: XOR<PlayerCreateWithoutActiveInGamesInput, PlayerUncheckedCreateWithoutActiveInGamesInput> | PlayerCreateWithoutActiveInGamesInput[] | PlayerUncheckedCreateWithoutActiveInGamesInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutActiveInGamesInput | PlayerCreateOrConnectWithoutActiveInGamesInput[]
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EventUpdateOneRequiredWithoutGamesNestedInput = {
    create?: XOR<EventCreateWithoutGamesInput, EventUncheckedCreateWithoutGamesInput>
    connectOrCreate?: EventCreateOrConnectWithoutGamesInput
    upsert?: EventUpsertWithoutGamesInput
    connect?: EventWhereUniqueInput
    update?: XOR<XOR<EventUpdateToOneWithWhereWithoutGamesInput, EventUpdateWithoutGamesInput>, EventUncheckedUpdateWithoutGamesInput>
  }

  export type TeamUpdateOneRequiredWithoutHomeGamesNestedInput = {
    create?: XOR<TeamCreateWithoutHomeGamesInput, TeamUncheckedCreateWithoutHomeGamesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutHomeGamesInput
    upsert?: TeamUpsertWithoutHomeGamesInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutHomeGamesInput, TeamUpdateWithoutHomeGamesInput>, TeamUncheckedUpdateWithoutHomeGamesInput>
  }

  export type TeamUpdateOneRequiredWithoutAwayGamesNestedInput = {
    create?: XOR<TeamCreateWithoutAwayGamesInput, TeamUncheckedCreateWithoutAwayGamesInput>
    connectOrCreate?: TeamCreateOrConnectWithoutAwayGamesInput
    upsert?: TeamUpsertWithoutAwayGamesInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutAwayGamesInput, TeamUpdateWithoutAwayGamesInput>, TeamUncheckedUpdateWithoutAwayGamesInput>
  }

  export type PlayerGameStatsUpdateManyWithoutGameNestedInput = {
    create?: XOR<PlayerGameStatsCreateWithoutGameInput, PlayerGameStatsUncheckedCreateWithoutGameInput> | PlayerGameStatsCreateWithoutGameInput[] | PlayerGameStatsUncheckedCreateWithoutGameInput[]
    connectOrCreate?: PlayerGameStatsCreateOrConnectWithoutGameInput | PlayerGameStatsCreateOrConnectWithoutGameInput[]
    upsert?: PlayerGameStatsUpsertWithWhereUniqueWithoutGameInput | PlayerGameStatsUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: PlayerGameStatsCreateManyGameInputEnvelope
    set?: PlayerGameStatsWhereUniqueInput | PlayerGameStatsWhereUniqueInput[]
    disconnect?: PlayerGameStatsWhereUniqueInput | PlayerGameStatsWhereUniqueInput[]
    delete?: PlayerGameStatsWhereUniqueInput | PlayerGameStatsWhereUniqueInput[]
    connect?: PlayerGameStatsWhereUniqueInput | PlayerGameStatsWhereUniqueInput[]
    update?: PlayerGameStatsUpdateWithWhereUniqueWithoutGameInput | PlayerGameStatsUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: PlayerGameStatsUpdateManyWithWhereWithoutGameInput | PlayerGameStatsUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: PlayerGameStatsScalarWhereInput | PlayerGameStatsScalarWhereInput[]
  }

  export type SubstitutionUpdateManyWithoutGameNestedInput = {
    create?: XOR<SubstitutionCreateWithoutGameInput, SubstitutionUncheckedCreateWithoutGameInput> | SubstitutionCreateWithoutGameInput[] | SubstitutionUncheckedCreateWithoutGameInput[]
    connectOrCreate?: SubstitutionCreateOrConnectWithoutGameInput | SubstitutionCreateOrConnectWithoutGameInput[]
    upsert?: SubstitutionUpsertWithWhereUniqueWithoutGameInput | SubstitutionUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: SubstitutionCreateManyGameInputEnvelope
    set?: SubstitutionWhereUniqueInput | SubstitutionWhereUniqueInput[]
    disconnect?: SubstitutionWhereUniqueInput | SubstitutionWhereUniqueInput[]
    delete?: SubstitutionWhereUniqueInput | SubstitutionWhereUniqueInput[]
    connect?: SubstitutionWhereUniqueInput | SubstitutionWhereUniqueInput[]
    update?: SubstitutionUpdateWithWhereUniqueWithoutGameInput | SubstitutionUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: SubstitutionUpdateManyWithWhereWithoutGameInput | SubstitutionUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: SubstitutionScalarWhereInput | SubstitutionScalarWhereInput[]
  }

  export type PlayerUpdateManyWithoutActiveInGamesNestedInput = {
    create?: XOR<PlayerCreateWithoutActiveInGamesInput, PlayerUncheckedCreateWithoutActiveInGamesInput> | PlayerCreateWithoutActiveInGamesInput[] | PlayerUncheckedCreateWithoutActiveInGamesInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutActiveInGamesInput | PlayerCreateOrConnectWithoutActiveInGamesInput[]
    upsert?: PlayerUpsertWithWhereUniqueWithoutActiveInGamesInput | PlayerUpsertWithWhereUniqueWithoutActiveInGamesInput[]
    set?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    disconnect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    delete?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    update?: PlayerUpdateWithWhereUniqueWithoutActiveInGamesInput | PlayerUpdateWithWhereUniqueWithoutActiveInGamesInput[]
    updateMany?: PlayerUpdateManyWithWhereWithoutActiveInGamesInput | PlayerUpdateManyWithWhereWithoutActiveInGamesInput[]
    deleteMany?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
  }

  export type PlayerGameStatsUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<PlayerGameStatsCreateWithoutGameInput, PlayerGameStatsUncheckedCreateWithoutGameInput> | PlayerGameStatsCreateWithoutGameInput[] | PlayerGameStatsUncheckedCreateWithoutGameInput[]
    connectOrCreate?: PlayerGameStatsCreateOrConnectWithoutGameInput | PlayerGameStatsCreateOrConnectWithoutGameInput[]
    upsert?: PlayerGameStatsUpsertWithWhereUniqueWithoutGameInput | PlayerGameStatsUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: PlayerGameStatsCreateManyGameInputEnvelope
    set?: PlayerGameStatsWhereUniqueInput | PlayerGameStatsWhereUniqueInput[]
    disconnect?: PlayerGameStatsWhereUniqueInput | PlayerGameStatsWhereUniqueInput[]
    delete?: PlayerGameStatsWhereUniqueInput | PlayerGameStatsWhereUniqueInput[]
    connect?: PlayerGameStatsWhereUniqueInput | PlayerGameStatsWhereUniqueInput[]
    update?: PlayerGameStatsUpdateWithWhereUniqueWithoutGameInput | PlayerGameStatsUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: PlayerGameStatsUpdateManyWithWhereWithoutGameInput | PlayerGameStatsUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: PlayerGameStatsScalarWhereInput | PlayerGameStatsScalarWhereInput[]
  }

  export type SubstitutionUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<SubstitutionCreateWithoutGameInput, SubstitutionUncheckedCreateWithoutGameInput> | SubstitutionCreateWithoutGameInput[] | SubstitutionUncheckedCreateWithoutGameInput[]
    connectOrCreate?: SubstitutionCreateOrConnectWithoutGameInput | SubstitutionCreateOrConnectWithoutGameInput[]
    upsert?: SubstitutionUpsertWithWhereUniqueWithoutGameInput | SubstitutionUpsertWithWhereUniqueWithoutGameInput[]
    createMany?: SubstitutionCreateManyGameInputEnvelope
    set?: SubstitutionWhereUniqueInput | SubstitutionWhereUniqueInput[]
    disconnect?: SubstitutionWhereUniqueInput | SubstitutionWhereUniqueInput[]
    delete?: SubstitutionWhereUniqueInput | SubstitutionWhereUniqueInput[]
    connect?: SubstitutionWhereUniqueInput | SubstitutionWhereUniqueInput[]
    update?: SubstitutionUpdateWithWhereUniqueWithoutGameInput | SubstitutionUpdateWithWhereUniqueWithoutGameInput[]
    updateMany?: SubstitutionUpdateManyWithWhereWithoutGameInput | SubstitutionUpdateManyWithWhereWithoutGameInput[]
    deleteMany?: SubstitutionScalarWhereInput | SubstitutionScalarWhereInput[]
  }

  export type PlayerUncheckedUpdateManyWithoutActiveInGamesNestedInput = {
    create?: XOR<PlayerCreateWithoutActiveInGamesInput, PlayerUncheckedCreateWithoutActiveInGamesInput> | PlayerCreateWithoutActiveInGamesInput[] | PlayerUncheckedCreateWithoutActiveInGamesInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutActiveInGamesInput | PlayerCreateOrConnectWithoutActiveInGamesInput[]
    upsert?: PlayerUpsertWithWhereUniqueWithoutActiveInGamesInput | PlayerUpsertWithWhereUniqueWithoutActiveInGamesInput[]
    set?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    disconnect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    delete?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    update?: PlayerUpdateWithWhereUniqueWithoutActiveInGamesInput | PlayerUpdateWithWhereUniqueWithoutActiveInGamesInput[]
    updateMany?: PlayerUpdateManyWithWhereWithoutActiveInGamesInput | PlayerUpdateManyWithWhereWithoutActiveInGamesInput[]
    deleteMany?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
  }

  export type GameCreateNestedOneWithoutStatsInput = {
    create?: XOR<GameCreateWithoutStatsInput, GameUncheckedCreateWithoutStatsInput>
    connectOrCreate?: GameCreateOrConnectWithoutStatsInput
    connect?: GameWhereUniqueInput
  }

  export type PlayerCreateNestedOneWithoutStatsInput = {
    create?: XOR<PlayerCreateWithoutStatsInput, PlayerUncheckedCreateWithoutStatsInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutStatsInput
    connect?: PlayerWhereUniqueInput
  }

  export type GameUpdateOneRequiredWithoutStatsNestedInput = {
    create?: XOR<GameCreateWithoutStatsInput, GameUncheckedCreateWithoutStatsInput>
    connectOrCreate?: GameCreateOrConnectWithoutStatsInput
    upsert?: GameUpsertWithoutStatsInput
    connect?: GameWhereUniqueInput
    update?: XOR<XOR<GameUpdateToOneWithWhereWithoutStatsInput, GameUpdateWithoutStatsInput>, GameUncheckedUpdateWithoutStatsInput>
  }

  export type PlayerUpdateOneRequiredWithoutStatsNestedInput = {
    create?: XOR<PlayerCreateWithoutStatsInput, PlayerUncheckedCreateWithoutStatsInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutStatsInput
    upsert?: PlayerUpsertWithoutStatsInput
    connect?: PlayerWhereUniqueInput
    update?: XOR<XOR<PlayerUpdateToOneWithWhereWithoutStatsInput, PlayerUpdateWithoutStatsInput>, PlayerUncheckedUpdateWithoutStatsInput>
  }

  export type GameCreateNestedOneWithoutSubstitutionsInput = {
    create?: XOR<GameCreateWithoutSubstitutionsInput, GameUncheckedCreateWithoutSubstitutionsInput>
    connectOrCreate?: GameCreateOrConnectWithoutSubstitutionsInput
    connect?: GameWhereUniqueInput
  }

  export type PlayerCreateNestedOneWithoutSubstitutionsInInput = {
    create?: XOR<PlayerCreateWithoutSubstitutionsInInput, PlayerUncheckedCreateWithoutSubstitutionsInInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutSubstitutionsInInput
    connect?: PlayerWhereUniqueInput
  }

  export type PlayerCreateNestedOneWithoutSubstitutionsOutInput = {
    create?: XOR<PlayerCreateWithoutSubstitutionsOutInput, PlayerUncheckedCreateWithoutSubstitutionsOutInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutSubstitutionsOutInput
    connect?: PlayerWhereUniqueInput
  }

  export type GameUpdateOneRequiredWithoutSubstitutionsNestedInput = {
    create?: XOR<GameCreateWithoutSubstitutionsInput, GameUncheckedCreateWithoutSubstitutionsInput>
    connectOrCreate?: GameCreateOrConnectWithoutSubstitutionsInput
    upsert?: GameUpsertWithoutSubstitutionsInput
    connect?: GameWhereUniqueInput
    update?: XOR<XOR<GameUpdateToOneWithWhereWithoutSubstitutionsInput, GameUpdateWithoutSubstitutionsInput>, GameUncheckedUpdateWithoutSubstitutionsInput>
  }

  export type PlayerUpdateOneRequiredWithoutSubstitutionsInNestedInput = {
    create?: XOR<PlayerCreateWithoutSubstitutionsInInput, PlayerUncheckedCreateWithoutSubstitutionsInInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutSubstitutionsInInput
    upsert?: PlayerUpsertWithoutSubstitutionsInInput
    connect?: PlayerWhereUniqueInput
    update?: XOR<XOR<PlayerUpdateToOneWithWhereWithoutSubstitutionsInInput, PlayerUpdateWithoutSubstitutionsInInput>, PlayerUncheckedUpdateWithoutSubstitutionsInInput>
  }

  export type PlayerUpdateOneRequiredWithoutSubstitutionsOutNestedInput = {
    create?: XOR<PlayerCreateWithoutSubstitutionsOutInput, PlayerUncheckedCreateWithoutSubstitutionsOutInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutSubstitutionsOutInput
    upsert?: PlayerUpsertWithoutSubstitutionsOutInput
    connect?: PlayerWhereUniqueInput
    update?: XOR<XOR<PlayerUpdateToOneWithWhereWithoutSubstitutionsOutInput, PlayerUpdateWithoutSubstitutionsOutInput>, PlayerUncheckedUpdateWithoutSubstitutionsOutInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type PlayerCreateWithoutTeamInput = {
    nombre: string
    apellido: string
    numero: number
    posicion: string
    stats?: PlayerGameStatsCreateNestedManyWithoutPlayerInput
    substitutionsIn?: SubstitutionCreateNestedManyWithoutPlayerInInput
    substitutionsOut?: SubstitutionCreateNestedManyWithoutPlayerOutInput
    activeInGames?: GameCreateNestedManyWithoutActivePlayersInput
  }

  export type PlayerUncheckedCreateWithoutTeamInput = {
    id?: number
    nombre: string
    apellido: string
    numero: number
    posicion: string
    stats?: PlayerGameStatsUncheckedCreateNestedManyWithoutPlayerInput
    substitutionsIn?: SubstitutionUncheckedCreateNestedManyWithoutPlayerInInput
    substitutionsOut?: SubstitutionUncheckedCreateNestedManyWithoutPlayerOutInput
    activeInGames?: GameUncheckedCreateNestedManyWithoutActivePlayersInput
  }

  export type PlayerCreateOrConnectWithoutTeamInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutTeamInput, PlayerUncheckedCreateWithoutTeamInput>
  }

  export type PlayerCreateManyTeamInputEnvelope = {
    data: PlayerCreateManyTeamInput | PlayerCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type GameCreateWithoutTeamHomeInput = {
    fecha: Date | string
    estado: string
    gameTime?: number
    homeScore?: number
    awayScore?: number
    currentQuarter?: number
    quarterLength?: number
    totalQuarters?: number
    overtimeLength?: number
    quarterTime?: number
    isOvertime?: boolean
    event: EventCreateNestedOneWithoutGamesInput
    teamAway: TeamCreateNestedOneWithoutAwayGamesInput
    stats?: PlayerGameStatsCreateNestedManyWithoutGameInput
    substitutions?: SubstitutionCreateNestedManyWithoutGameInput
    activePlayers?: PlayerCreateNestedManyWithoutActiveInGamesInput
  }

  export type GameUncheckedCreateWithoutTeamHomeInput = {
    id?: number
    eventId: number
    teamAwayId: number
    fecha: Date | string
    estado: string
    gameTime?: number
    homeScore?: number
    awayScore?: number
    currentQuarter?: number
    quarterLength?: number
    totalQuarters?: number
    overtimeLength?: number
    quarterTime?: number
    isOvertime?: boolean
    stats?: PlayerGameStatsUncheckedCreateNestedManyWithoutGameInput
    substitutions?: SubstitutionUncheckedCreateNestedManyWithoutGameInput
    activePlayers?: PlayerUncheckedCreateNestedManyWithoutActiveInGamesInput
  }

  export type GameCreateOrConnectWithoutTeamHomeInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutTeamHomeInput, GameUncheckedCreateWithoutTeamHomeInput>
  }

  export type GameCreateManyTeamHomeInputEnvelope = {
    data: GameCreateManyTeamHomeInput | GameCreateManyTeamHomeInput[]
    skipDuplicates?: boolean
  }

  export type GameCreateWithoutTeamAwayInput = {
    fecha: Date | string
    estado: string
    gameTime?: number
    homeScore?: number
    awayScore?: number
    currentQuarter?: number
    quarterLength?: number
    totalQuarters?: number
    overtimeLength?: number
    quarterTime?: number
    isOvertime?: boolean
    event: EventCreateNestedOneWithoutGamesInput
    teamHome: TeamCreateNestedOneWithoutHomeGamesInput
    stats?: PlayerGameStatsCreateNestedManyWithoutGameInput
    substitutions?: SubstitutionCreateNestedManyWithoutGameInput
    activePlayers?: PlayerCreateNestedManyWithoutActiveInGamesInput
  }

  export type GameUncheckedCreateWithoutTeamAwayInput = {
    id?: number
    eventId: number
    teamHomeId: number
    fecha: Date | string
    estado: string
    gameTime?: number
    homeScore?: number
    awayScore?: number
    currentQuarter?: number
    quarterLength?: number
    totalQuarters?: number
    overtimeLength?: number
    quarterTime?: number
    isOvertime?: boolean
    stats?: PlayerGameStatsUncheckedCreateNestedManyWithoutGameInput
    substitutions?: SubstitutionUncheckedCreateNestedManyWithoutGameInput
    activePlayers?: PlayerUncheckedCreateNestedManyWithoutActiveInGamesInput
  }

  export type GameCreateOrConnectWithoutTeamAwayInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutTeamAwayInput, GameUncheckedCreateWithoutTeamAwayInput>
  }

  export type GameCreateManyTeamAwayInputEnvelope = {
    data: GameCreateManyTeamAwayInput | GameCreateManyTeamAwayInput[]
    skipDuplicates?: boolean
  }

  export type PlayerUpsertWithWhereUniqueWithoutTeamInput = {
    where: PlayerWhereUniqueInput
    update: XOR<PlayerUpdateWithoutTeamInput, PlayerUncheckedUpdateWithoutTeamInput>
    create: XOR<PlayerCreateWithoutTeamInput, PlayerUncheckedCreateWithoutTeamInput>
  }

  export type PlayerUpdateWithWhereUniqueWithoutTeamInput = {
    where: PlayerWhereUniqueInput
    data: XOR<PlayerUpdateWithoutTeamInput, PlayerUncheckedUpdateWithoutTeamInput>
  }

  export type PlayerUpdateManyWithWhereWithoutTeamInput = {
    where: PlayerScalarWhereInput
    data: XOR<PlayerUpdateManyMutationInput, PlayerUncheckedUpdateManyWithoutTeamInput>
  }

  export type PlayerScalarWhereInput = {
    AND?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
    OR?: PlayerScalarWhereInput[]
    NOT?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
    id?: IntFilter<"Player"> | number
    nombre?: StringFilter<"Player"> | string
    apellido?: StringFilter<"Player"> | string
    numero?: IntFilter<"Player"> | number
    posicion?: StringFilter<"Player"> | string
    teamId?: IntFilter<"Player"> | number
  }

  export type GameUpsertWithWhereUniqueWithoutTeamHomeInput = {
    where: GameWhereUniqueInput
    update: XOR<GameUpdateWithoutTeamHomeInput, GameUncheckedUpdateWithoutTeamHomeInput>
    create: XOR<GameCreateWithoutTeamHomeInput, GameUncheckedCreateWithoutTeamHomeInput>
  }

  export type GameUpdateWithWhereUniqueWithoutTeamHomeInput = {
    where: GameWhereUniqueInput
    data: XOR<GameUpdateWithoutTeamHomeInput, GameUncheckedUpdateWithoutTeamHomeInput>
  }

  export type GameUpdateManyWithWhereWithoutTeamHomeInput = {
    where: GameScalarWhereInput
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyWithoutTeamHomeInput>
  }

  export type GameScalarWhereInput = {
    AND?: GameScalarWhereInput | GameScalarWhereInput[]
    OR?: GameScalarWhereInput[]
    NOT?: GameScalarWhereInput | GameScalarWhereInput[]
    id?: IntFilter<"Game"> | number
    eventId?: IntFilter<"Game"> | number
    teamHomeId?: IntFilter<"Game"> | number
    teamAwayId?: IntFilter<"Game"> | number
    fecha?: DateTimeFilter<"Game"> | Date | string
    estado?: StringFilter<"Game"> | string
    gameTime?: IntFilter<"Game"> | number
    homeScore?: IntFilter<"Game"> | number
    awayScore?: IntFilter<"Game"> | number
    currentQuarter?: IntFilter<"Game"> | number
    quarterLength?: IntFilter<"Game"> | number
    totalQuarters?: IntFilter<"Game"> | number
    overtimeLength?: IntFilter<"Game"> | number
    quarterTime?: IntFilter<"Game"> | number
    isOvertime?: BoolFilter<"Game"> | boolean
  }

  export type GameUpsertWithWhereUniqueWithoutTeamAwayInput = {
    where: GameWhereUniqueInput
    update: XOR<GameUpdateWithoutTeamAwayInput, GameUncheckedUpdateWithoutTeamAwayInput>
    create: XOR<GameCreateWithoutTeamAwayInput, GameUncheckedCreateWithoutTeamAwayInput>
  }

  export type GameUpdateWithWhereUniqueWithoutTeamAwayInput = {
    where: GameWhereUniqueInput
    data: XOR<GameUpdateWithoutTeamAwayInput, GameUncheckedUpdateWithoutTeamAwayInput>
  }

  export type GameUpdateManyWithWhereWithoutTeamAwayInput = {
    where: GameScalarWhereInput
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyWithoutTeamAwayInput>
  }

  export type TeamCreateWithoutPlayersInput = {
    nombre: string
    logo?: string | null
    homeGames?: GameCreateNestedManyWithoutTeamHomeInput
    awayGames?: GameCreateNestedManyWithoutTeamAwayInput
  }

  export type TeamUncheckedCreateWithoutPlayersInput = {
    id?: number
    nombre: string
    logo?: string | null
    homeGames?: GameUncheckedCreateNestedManyWithoutTeamHomeInput
    awayGames?: GameUncheckedCreateNestedManyWithoutTeamAwayInput
  }

  export type TeamCreateOrConnectWithoutPlayersInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutPlayersInput, TeamUncheckedCreateWithoutPlayersInput>
  }

  export type PlayerGameStatsCreateWithoutPlayerInput = {
    puntos: number
    rebotes: number
    asistencias: number
    robos: number
    tapones: number
    tirosIntentados: number
    tirosAnotados: number
    tiros3Intentados: number
    tiros3Anotados: number
    minutos: number
    plusMinus: number
    game: GameCreateNestedOneWithoutStatsInput
  }

  export type PlayerGameStatsUncheckedCreateWithoutPlayerInput = {
    id?: number
    gameId: number
    puntos: number
    rebotes: number
    asistencias: number
    robos: number
    tapones: number
    tirosIntentados: number
    tirosAnotados: number
    tiros3Intentados: number
    tiros3Anotados: number
    minutos: number
    plusMinus: number
  }

  export type PlayerGameStatsCreateOrConnectWithoutPlayerInput = {
    where: PlayerGameStatsWhereUniqueInput
    create: XOR<PlayerGameStatsCreateWithoutPlayerInput, PlayerGameStatsUncheckedCreateWithoutPlayerInput>
  }

  export type PlayerGameStatsCreateManyPlayerInputEnvelope = {
    data: PlayerGameStatsCreateManyPlayerInput | PlayerGameStatsCreateManyPlayerInput[]
    skipDuplicates?: boolean
  }

  export type SubstitutionCreateWithoutPlayerInInput = {
    timestamp: Date | string
    game: GameCreateNestedOneWithoutSubstitutionsInput
    playerOut: PlayerCreateNestedOneWithoutSubstitutionsOutInput
  }

  export type SubstitutionUncheckedCreateWithoutPlayerInInput = {
    id?: number
    gameId: number
    playerOutId: number
    timestamp: Date | string
  }

  export type SubstitutionCreateOrConnectWithoutPlayerInInput = {
    where: SubstitutionWhereUniqueInput
    create: XOR<SubstitutionCreateWithoutPlayerInInput, SubstitutionUncheckedCreateWithoutPlayerInInput>
  }

  export type SubstitutionCreateManyPlayerInInputEnvelope = {
    data: SubstitutionCreateManyPlayerInInput | SubstitutionCreateManyPlayerInInput[]
    skipDuplicates?: boolean
  }

  export type SubstitutionCreateWithoutPlayerOutInput = {
    timestamp: Date | string
    game: GameCreateNestedOneWithoutSubstitutionsInput
    playerIn: PlayerCreateNestedOneWithoutSubstitutionsInInput
  }

  export type SubstitutionUncheckedCreateWithoutPlayerOutInput = {
    id?: number
    gameId: number
    playerInId: number
    timestamp: Date | string
  }

  export type SubstitutionCreateOrConnectWithoutPlayerOutInput = {
    where: SubstitutionWhereUniqueInput
    create: XOR<SubstitutionCreateWithoutPlayerOutInput, SubstitutionUncheckedCreateWithoutPlayerOutInput>
  }

  export type SubstitutionCreateManyPlayerOutInputEnvelope = {
    data: SubstitutionCreateManyPlayerOutInput | SubstitutionCreateManyPlayerOutInput[]
    skipDuplicates?: boolean
  }

  export type GameCreateWithoutActivePlayersInput = {
    fecha: Date | string
    estado: string
    gameTime?: number
    homeScore?: number
    awayScore?: number
    currentQuarter?: number
    quarterLength?: number
    totalQuarters?: number
    overtimeLength?: number
    quarterTime?: number
    isOvertime?: boolean
    event: EventCreateNestedOneWithoutGamesInput
    teamHome: TeamCreateNestedOneWithoutHomeGamesInput
    teamAway: TeamCreateNestedOneWithoutAwayGamesInput
    stats?: PlayerGameStatsCreateNestedManyWithoutGameInput
    substitutions?: SubstitutionCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutActivePlayersInput = {
    id?: number
    eventId: number
    teamHomeId: number
    teamAwayId: number
    fecha: Date | string
    estado: string
    gameTime?: number
    homeScore?: number
    awayScore?: number
    currentQuarter?: number
    quarterLength?: number
    totalQuarters?: number
    overtimeLength?: number
    quarterTime?: number
    isOvertime?: boolean
    stats?: PlayerGameStatsUncheckedCreateNestedManyWithoutGameInput
    substitutions?: SubstitutionUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutActivePlayersInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutActivePlayersInput, GameUncheckedCreateWithoutActivePlayersInput>
  }

  export type TeamUpsertWithoutPlayersInput = {
    update: XOR<TeamUpdateWithoutPlayersInput, TeamUncheckedUpdateWithoutPlayersInput>
    create: XOR<TeamCreateWithoutPlayersInput, TeamUncheckedCreateWithoutPlayersInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutPlayersInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutPlayersInput, TeamUncheckedUpdateWithoutPlayersInput>
  }

  export type TeamUpdateWithoutPlayersInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    homeGames?: GameUpdateManyWithoutTeamHomeNestedInput
    awayGames?: GameUpdateManyWithoutTeamAwayNestedInput
  }

  export type TeamUncheckedUpdateWithoutPlayersInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    homeGames?: GameUncheckedUpdateManyWithoutTeamHomeNestedInput
    awayGames?: GameUncheckedUpdateManyWithoutTeamAwayNestedInput
  }

  export type PlayerGameStatsUpsertWithWhereUniqueWithoutPlayerInput = {
    where: PlayerGameStatsWhereUniqueInput
    update: XOR<PlayerGameStatsUpdateWithoutPlayerInput, PlayerGameStatsUncheckedUpdateWithoutPlayerInput>
    create: XOR<PlayerGameStatsCreateWithoutPlayerInput, PlayerGameStatsUncheckedCreateWithoutPlayerInput>
  }

  export type PlayerGameStatsUpdateWithWhereUniqueWithoutPlayerInput = {
    where: PlayerGameStatsWhereUniqueInput
    data: XOR<PlayerGameStatsUpdateWithoutPlayerInput, PlayerGameStatsUncheckedUpdateWithoutPlayerInput>
  }

  export type PlayerGameStatsUpdateManyWithWhereWithoutPlayerInput = {
    where: PlayerGameStatsScalarWhereInput
    data: XOR<PlayerGameStatsUpdateManyMutationInput, PlayerGameStatsUncheckedUpdateManyWithoutPlayerInput>
  }

  export type PlayerGameStatsScalarWhereInput = {
    AND?: PlayerGameStatsScalarWhereInput | PlayerGameStatsScalarWhereInput[]
    OR?: PlayerGameStatsScalarWhereInput[]
    NOT?: PlayerGameStatsScalarWhereInput | PlayerGameStatsScalarWhereInput[]
    id?: IntFilter<"PlayerGameStats"> | number
    gameId?: IntFilter<"PlayerGameStats"> | number
    playerId?: IntFilter<"PlayerGameStats"> | number
    puntos?: IntFilter<"PlayerGameStats"> | number
    rebotes?: IntFilter<"PlayerGameStats"> | number
    asistencias?: IntFilter<"PlayerGameStats"> | number
    robos?: IntFilter<"PlayerGameStats"> | number
    tapones?: IntFilter<"PlayerGameStats"> | number
    tirosIntentados?: IntFilter<"PlayerGameStats"> | number
    tirosAnotados?: IntFilter<"PlayerGameStats"> | number
    tiros3Intentados?: IntFilter<"PlayerGameStats"> | number
    tiros3Anotados?: IntFilter<"PlayerGameStats"> | number
    minutos?: IntFilter<"PlayerGameStats"> | number
    plusMinus?: IntFilter<"PlayerGameStats"> | number
  }

  export type SubstitutionUpsertWithWhereUniqueWithoutPlayerInInput = {
    where: SubstitutionWhereUniqueInput
    update: XOR<SubstitutionUpdateWithoutPlayerInInput, SubstitutionUncheckedUpdateWithoutPlayerInInput>
    create: XOR<SubstitutionCreateWithoutPlayerInInput, SubstitutionUncheckedCreateWithoutPlayerInInput>
  }

  export type SubstitutionUpdateWithWhereUniqueWithoutPlayerInInput = {
    where: SubstitutionWhereUniqueInput
    data: XOR<SubstitutionUpdateWithoutPlayerInInput, SubstitutionUncheckedUpdateWithoutPlayerInInput>
  }

  export type SubstitutionUpdateManyWithWhereWithoutPlayerInInput = {
    where: SubstitutionScalarWhereInput
    data: XOR<SubstitutionUpdateManyMutationInput, SubstitutionUncheckedUpdateManyWithoutPlayerInInput>
  }

  export type SubstitutionScalarWhereInput = {
    AND?: SubstitutionScalarWhereInput | SubstitutionScalarWhereInput[]
    OR?: SubstitutionScalarWhereInput[]
    NOT?: SubstitutionScalarWhereInput | SubstitutionScalarWhereInput[]
    id?: IntFilter<"Substitution"> | number
    gameId?: IntFilter<"Substitution"> | number
    playerInId?: IntFilter<"Substitution"> | number
    playerOutId?: IntFilter<"Substitution"> | number
    timestamp?: DateTimeFilter<"Substitution"> | Date | string
  }

  export type SubstitutionUpsertWithWhereUniqueWithoutPlayerOutInput = {
    where: SubstitutionWhereUniqueInput
    update: XOR<SubstitutionUpdateWithoutPlayerOutInput, SubstitutionUncheckedUpdateWithoutPlayerOutInput>
    create: XOR<SubstitutionCreateWithoutPlayerOutInput, SubstitutionUncheckedCreateWithoutPlayerOutInput>
  }

  export type SubstitutionUpdateWithWhereUniqueWithoutPlayerOutInput = {
    where: SubstitutionWhereUniqueInput
    data: XOR<SubstitutionUpdateWithoutPlayerOutInput, SubstitutionUncheckedUpdateWithoutPlayerOutInput>
  }

  export type SubstitutionUpdateManyWithWhereWithoutPlayerOutInput = {
    where: SubstitutionScalarWhereInput
    data: XOR<SubstitutionUpdateManyMutationInput, SubstitutionUncheckedUpdateManyWithoutPlayerOutInput>
  }

  export type GameUpsertWithWhereUniqueWithoutActivePlayersInput = {
    where: GameWhereUniqueInput
    update: XOR<GameUpdateWithoutActivePlayersInput, GameUncheckedUpdateWithoutActivePlayersInput>
    create: XOR<GameCreateWithoutActivePlayersInput, GameUncheckedCreateWithoutActivePlayersInput>
  }

  export type GameUpdateWithWhereUniqueWithoutActivePlayersInput = {
    where: GameWhereUniqueInput
    data: XOR<GameUpdateWithoutActivePlayersInput, GameUncheckedUpdateWithoutActivePlayersInput>
  }

  export type GameUpdateManyWithWhereWithoutActivePlayersInput = {
    where: GameScalarWhereInput
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyWithoutActivePlayersInput>
  }

  export type GameCreateWithoutEventInput = {
    fecha: Date | string
    estado: string
    gameTime?: number
    homeScore?: number
    awayScore?: number
    currentQuarter?: number
    quarterLength?: number
    totalQuarters?: number
    overtimeLength?: number
    quarterTime?: number
    isOvertime?: boolean
    teamHome: TeamCreateNestedOneWithoutHomeGamesInput
    teamAway: TeamCreateNestedOneWithoutAwayGamesInput
    stats?: PlayerGameStatsCreateNestedManyWithoutGameInput
    substitutions?: SubstitutionCreateNestedManyWithoutGameInput
    activePlayers?: PlayerCreateNestedManyWithoutActiveInGamesInput
  }

  export type GameUncheckedCreateWithoutEventInput = {
    id?: number
    teamHomeId: number
    teamAwayId: number
    fecha: Date | string
    estado: string
    gameTime?: number
    homeScore?: number
    awayScore?: number
    currentQuarter?: number
    quarterLength?: number
    totalQuarters?: number
    overtimeLength?: number
    quarterTime?: number
    isOvertime?: boolean
    stats?: PlayerGameStatsUncheckedCreateNestedManyWithoutGameInput
    substitutions?: SubstitutionUncheckedCreateNestedManyWithoutGameInput
    activePlayers?: PlayerUncheckedCreateNestedManyWithoutActiveInGamesInput
  }

  export type GameCreateOrConnectWithoutEventInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutEventInput, GameUncheckedCreateWithoutEventInput>
  }

  export type GameCreateManyEventInputEnvelope = {
    data: GameCreateManyEventInput | GameCreateManyEventInput[]
    skipDuplicates?: boolean
  }

  export type GameUpsertWithWhereUniqueWithoutEventInput = {
    where: GameWhereUniqueInput
    update: XOR<GameUpdateWithoutEventInput, GameUncheckedUpdateWithoutEventInput>
    create: XOR<GameCreateWithoutEventInput, GameUncheckedCreateWithoutEventInput>
  }

  export type GameUpdateWithWhereUniqueWithoutEventInput = {
    where: GameWhereUniqueInput
    data: XOR<GameUpdateWithoutEventInput, GameUncheckedUpdateWithoutEventInput>
  }

  export type GameUpdateManyWithWhereWithoutEventInput = {
    where: GameScalarWhereInput
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyWithoutEventInput>
  }

  export type EventCreateWithoutGamesInput = {
    nombre: string
    fechaInicio: Date | string
    fechaFin: Date | string
  }

  export type EventUncheckedCreateWithoutGamesInput = {
    id?: number
    nombre: string
    fechaInicio: Date | string
    fechaFin: Date | string
  }

  export type EventCreateOrConnectWithoutGamesInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutGamesInput, EventUncheckedCreateWithoutGamesInput>
  }

  export type TeamCreateWithoutHomeGamesInput = {
    nombre: string
    logo?: string | null
    players?: PlayerCreateNestedManyWithoutTeamInput
    awayGames?: GameCreateNestedManyWithoutTeamAwayInput
  }

  export type TeamUncheckedCreateWithoutHomeGamesInput = {
    id?: number
    nombre: string
    logo?: string | null
    players?: PlayerUncheckedCreateNestedManyWithoutTeamInput
    awayGames?: GameUncheckedCreateNestedManyWithoutTeamAwayInput
  }

  export type TeamCreateOrConnectWithoutHomeGamesInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutHomeGamesInput, TeamUncheckedCreateWithoutHomeGamesInput>
  }

  export type TeamCreateWithoutAwayGamesInput = {
    nombre: string
    logo?: string | null
    players?: PlayerCreateNestedManyWithoutTeamInput
    homeGames?: GameCreateNestedManyWithoutTeamHomeInput
  }

  export type TeamUncheckedCreateWithoutAwayGamesInput = {
    id?: number
    nombre: string
    logo?: string | null
    players?: PlayerUncheckedCreateNestedManyWithoutTeamInput
    homeGames?: GameUncheckedCreateNestedManyWithoutTeamHomeInput
  }

  export type TeamCreateOrConnectWithoutAwayGamesInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutAwayGamesInput, TeamUncheckedCreateWithoutAwayGamesInput>
  }

  export type PlayerGameStatsCreateWithoutGameInput = {
    puntos: number
    rebotes: number
    asistencias: number
    robos: number
    tapones: number
    tirosIntentados: number
    tirosAnotados: number
    tiros3Intentados: number
    tiros3Anotados: number
    minutos: number
    plusMinus: number
    player: PlayerCreateNestedOneWithoutStatsInput
  }

  export type PlayerGameStatsUncheckedCreateWithoutGameInput = {
    id?: number
    playerId: number
    puntos: number
    rebotes: number
    asistencias: number
    robos: number
    tapones: number
    tirosIntentados: number
    tirosAnotados: number
    tiros3Intentados: number
    tiros3Anotados: number
    minutos: number
    plusMinus: number
  }

  export type PlayerGameStatsCreateOrConnectWithoutGameInput = {
    where: PlayerGameStatsWhereUniqueInput
    create: XOR<PlayerGameStatsCreateWithoutGameInput, PlayerGameStatsUncheckedCreateWithoutGameInput>
  }

  export type PlayerGameStatsCreateManyGameInputEnvelope = {
    data: PlayerGameStatsCreateManyGameInput | PlayerGameStatsCreateManyGameInput[]
    skipDuplicates?: boolean
  }

  export type SubstitutionCreateWithoutGameInput = {
    timestamp: Date | string
    playerIn: PlayerCreateNestedOneWithoutSubstitutionsInInput
    playerOut: PlayerCreateNestedOneWithoutSubstitutionsOutInput
  }

  export type SubstitutionUncheckedCreateWithoutGameInput = {
    id?: number
    playerInId: number
    playerOutId: number
    timestamp: Date | string
  }

  export type SubstitutionCreateOrConnectWithoutGameInput = {
    where: SubstitutionWhereUniqueInput
    create: XOR<SubstitutionCreateWithoutGameInput, SubstitutionUncheckedCreateWithoutGameInput>
  }

  export type SubstitutionCreateManyGameInputEnvelope = {
    data: SubstitutionCreateManyGameInput | SubstitutionCreateManyGameInput[]
    skipDuplicates?: boolean
  }

  export type PlayerCreateWithoutActiveInGamesInput = {
    nombre: string
    apellido: string
    numero: number
    posicion: string
    team: TeamCreateNestedOneWithoutPlayersInput
    stats?: PlayerGameStatsCreateNestedManyWithoutPlayerInput
    substitutionsIn?: SubstitutionCreateNestedManyWithoutPlayerInInput
    substitutionsOut?: SubstitutionCreateNestedManyWithoutPlayerOutInput
  }

  export type PlayerUncheckedCreateWithoutActiveInGamesInput = {
    id?: number
    nombre: string
    apellido: string
    numero: number
    posicion: string
    teamId: number
    stats?: PlayerGameStatsUncheckedCreateNestedManyWithoutPlayerInput
    substitutionsIn?: SubstitutionUncheckedCreateNestedManyWithoutPlayerInInput
    substitutionsOut?: SubstitutionUncheckedCreateNestedManyWithoutPlayerOutInput
  }

  export type PlayerCreateOrConnectWithoutActiveInGamesInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutActiveInGamesInput, PlayerUncheckedCreateWithoutActiveInGamesInput>
  }

  export type EventUpsertWithoutGamesInput = {
    update: XOR<EventUpdateWithoutGamesInput, EventUncheckedUpdateWithoutGamesInput>
    create: XOR<EventCreateWithoutGamesInput, EventUncheckedCreateWithoutGamesInput>
    where?: EventWhereInput
  }

  export type EventUpdateToOneWithWhereWithoutGamesInput = {
    where?: EventWhereInput
    data: XOR<EventUpdateWithoutGamesInput, EventUncheckedUpdateWithoutGamesInput>
  }

  export type EventUpdateWithoutGamesInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EventUncheckedUpdateWithoutGamesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    fechaInicio?: DateTimeFieldUpdateOperationsInput | Date | string
    fechaFin?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamUpsertWithoutHomeGamesInput = {
    update: XOR<TeamUpdateWithoutHomeGamesInput, TeamUncheckedUpdateWithoutHomeGamesInput>
    create: XOR<TeamCreateWithoutHomeGamesInput, TeamUncheckedCreateWithoutHomeGamesInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutHomeGamesInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutHomeGamesInput, TeamUncheckedUpdateWithoutHomeGamesInput>
  }

  export type TeamUpdateWithoutHomeGamesInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    players?: PlayerUpdateManyWithoutTeamNestedInput
    awayGames?: GameUpdateManyWithoutTeamAwayNestedInput
  }

  export type TeamUncheckedUpdateWithoutHomeGamesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    players?: PlayerUncheckedUpdateManyWithoutTeamNestedInput
    awayGames?: GameUncheckedUpdateManyWithoutTeamAwayNestedInput
  }

  export type TeamUpsertWithoutAwayGamesInput = {
    update: XOR<TeamUpdateWithoutAwayGamesInput, TeamUncheckedUpdateWithoutAwayGamesInput>
    create: XOR<TeamCreateWithoutAwayGamesInput, TeamUncheckedCreateWithoutAwayGamesInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutAwayGamesInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutAwayGamesInput, TeamUncheckedUpdateWithoutAwayGamesInput>
  }

  export type TeamUpdateWithoutAwayGamesInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    players?: PlayerUpdateManyWithoutTeamNestedInput
    homeGames?: GameUpdateManyWithoutTeamHomeNestedInput
  }

  export type TeamUncheckedUpdateWithoutAwayGamesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    logo?: NullableStringFieldUpdateOperationsInput | string | null
    players?: PlayerUncheckedUpdateManyWithoutTeamNestedInput
    homeGames?: GameUncheckedUpdateManyWithoutTeamHomeNestedInput
  }

  export type PlayerGameStatsUpsertWithWhereUniqueWithoutGameInput = {
    where: PlayerGameStatsWhereUniqueInput
    update: XOR<PlayerGameStatsUpdateWithoutGameInput, PlayerGameStatsUncheckedUpdateWithoutGameInput>
    create: XOR<PlayerGameStatsCreateWithoutGameInput, PlayerGameStatsUncheckedCreateWithoutGameInput>
  }

  export type PlayerGameStatsUpdateWithWhereUniqueWithoutGameInput = {
    where: PlayerGameStatsWhereUniqueInput
    data: XOR<PlayerGameStatsUpdateWithoutGameInput, PlayerGameStatsUncheckedUpdateWithoutGameInput>
  }

  export type PlayerGameStatsUpdateManyWithWhereWithoutGameInput = {
    where: PlayerGameStatsScalarWhereInput
    data: XOR<PlayerGameStatsUpdateManyMutationInput, PlayerGameStatsUncheckedUpdateManyWithoutGameInput>
  }

  export type SubstitutionUpsertWithWhereUniqueWithoutGameInput = {
    where: SubstitutionWhereUniqueInput
    update: XOR<SubstitutionUpdateWithoutGameInput, SubstitutionUncheckedUpdateWithoutGameInput>
    create: XOR<SubstitutionCreateWithoutGameInput, SubstitutionUncheckedCreateWithoutGameInput>
  }

  export type SubstitutionUpdateWithWhereUniqueWithoutGameInput = {
    where: SubstitutionWhereUniqueInput
    data: XOR<SubstitutionUpdateWithoutGameInput, SubstitutionUncheckedUpdateWithoutGameInput>
  }

  export type SubstitutionUpdateManyWithWhereWithoutGameInput = {
    where: SubstitutionScalarWhereInput
    data: XOR<SubstitutionUpdateManyMutationInput, SubstitutionUncheckedUpdateManyWithoutGameInput>
  }

  export type PlayerUpsertWithWhereUniqueWithoutActiveInGamesInput = {
    where: PlayerWhereUniqueInput
    update: XOR<PlayerUpdateWithoutActiveInGamesInput, PlayerUncheckedUpdateWithoutActiveInGamesInput>
    create: XOR<PlayerCreateWithoutActiveInGamesInput, PlayerUncheckedCreateWithoutActiveInGamesInput>
  }

  export type PlayerUpdateWithWhereUniqueWithoutActiveInGamesInput = {
    where: PlayerWhereUniqueInput
    data: XOR<PlayerUpdateWithoutActiveInGamesInput, PlayerUncheckedUpdateWithoutActiveInGamesInput>
  }

  export type PlayerUpdateManyWithWhereWithoutActiveInGamesInput = {
    where: PlayerScalarWhereInput
    data: XOR<PlayerUpdateManyMutationInput, PlayerUncheckedUpdateManyWithoutActiveInGamesInput>
  }

  export type GameCreateWithoutStatsInput = {
    fecha: Date | string
    estado: string
    gameTime?: number
    homeScore?: number
    awayScore?: number
    currentQuarter?: number
    quarterLength?: number
    totalQuarters?: number
    overtimeLength?: number
    quarterTime?: number
    isOvertime?: boolean
    event: EventCreateNestedOneWithoutGamesInput
    teamHome: TeamCreateNestedOneWithoutHomeGamesInput
    teamAway: TeamCreateNestedOneWithoutAwayGamesInput
    substitutions?: SubstitutionCreateNestedManyWithoutGameInput
    activePlayers?: PlayerCreateNestedManyWithoutActiveInGamesInput
  }

  export type GameUncheckedCreateWithoutStatsInput = {
    id?: number
    eventId: number
    teamHomeId: number
    teamAwayId: number
    fecha: Date | string
    estado: string
    gameTime?: number
    homeScore?: number
    awayScore?: number
    currentQuarter?: number
    quarterLength?: number
    totalQuarters?: number
    overtimeLength?: number
    quarterTime?: number
    isOvertime?: boolean
    substitutions?: SubstitutionUncheckedCreateNestedManyWithoutGameInput
    activePlayers?: PlayerUncheckedCreateNestedManyWithoutActiveInGamesInput
  }

  export type GameCreateOrConnectWithoutStatsInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutStatsInput, GameUncheckedCreateWithoutStatsInput>
  }

  export type PlayerCreateWithoutStatsInput = {
    nombre: string
    apellido: string
    numero: number
    posicion: string
    team: TeamCreateNestedOneWithoutPlayersInput
    substitutionsIn?: SubstitutionCreateNestedManyWithoutPlayerInInput
    substitutionsOut?: SubstitutionCreateNestedManyWithoutPlayerOutInput
    activeInGames?: GameCreateNestedManyWithoutActivePlayersInput
  }

  export type PlayerUncheckedCreateWithoutStatsInput = {
    id?: number
    nombre: string
    apellido: string
    numero: number
    posicion: string
    teamId: number
    substitutionsIn?: SubstitutionUncheckedCreateNestedManyWithoutPlayerInInput
    substitutionsOut?: SubstitutionUncheckedCreateNestedManyWithoutPlayerOutInput
    activeInGames?: GameUncheckedCreateNestedManyWithoutActivePlayersInput
  }

  export type PlayerCreateOrConnectWithoutStatsInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutStatsInput, PlayerUncheckedCreateWithoutStatsInput>
  }

  export type GameUpsertWithoutStatsInput = {
    update: XOR<GameUpdateWithoutStatsInput, GameUncheckedUpdateWithoutStatsInput>
    create: XOR<GameCreateWithoutStatsInput, GameUncheckedCreateWithoutStatsInput>
    where?: GameWhereInput
  }

  export type GameUpdateToOneWithWhereWithoutStatsInput = {
    where?: GameWhereInput
    data: XOR<GameUpdateWithoutStatsInput, GameUncheckedUpdateWithoutStatsInput>
  }

  export type GameUpdateWithoutStatsInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: StringFieldUpdateOperationsInput | string
    gameTime?: IntFieldUpdateOperationsInput | number
    homeScore?: IntFieldUpdateOperationsInput | number
    awayScore?: IntFieldUpdateOperationsInput | number
    currentQuarter?: IntFieldUpdateOperationsInput | number
    quarterLength?: IntFieldUpdateOperationsInput | number
    totalQuarters?: IntFieldUpdateOperationsInput | number
    overtimeLength?: IntFieldUpdateOperationsInput | number
    quarterTime?: IntFieldUpdateOperationsInput | number
    isOvertime?: BoolFieldUpdateOperationsInput | boolean
    event?: EventUpdateOneRequiredWithoutGamesNestedInput
    teamHome?: TeamUpdateOneRequiredWithoutHomeGamesNestedInput
    teamAway?: TeamUpdateOneRequiredWithoutAwayGamesNestedInput
    substitutions?: SubstitutionUpdateManyWithoutGameNestedInput
    activePlayers?: PlayerUpdateManyWithoutActiveInGamesNestedInput
  }

  export type GameUncheckedUpdateWithoutStatsInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    teamHomeId?: IntFieldUpdateOperationsInput | number
    teamAwayId?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: StringFieldUpdateOperationsInput | string
    gameTime?: IntFieldUpdateOperationsInput | number
    homeScore?: IntFieldUpdateOperationsInput | number
    awayScore?: IntFieldUpdateOperationsInput | number
    currentQuarter?: IntFieldUpdateOperationsInput | number
    quarterLength?: IntFieldUpdateOperationsInput | number
    totalQuarters?: IntFieldUpdateOperationsInput | number
    overtimeLength?: IntFieldUpdateOperationsInput | number
    quarterTime?: IntFieldUpdateOperationsInput | number
    isOvertime?: BoolFieldUpdateOperationsInput | boolean
    substitutions?: SubstitutionUncheckedUpdateManyWithoutGameNestedInput
    activePlayers?: PlayerUncheckedUpdateManyWithoutActiveInGamesNestedInput
  }

  export type PlayerUpsertWithoutStatsInput = {
    update: XOR<PlayerUpdateWithoutStatsInput, PlayerUncheckedUpdateWithoutStatsInput>
    create: XOR<PlayerCreateWithoutStatsInput, PlayerUncheckedCreateWithoutStatsInput>
    where?: PlayerWhereInput
  }

  export type PlayerUpdateToOneWithWhereWithoutStatsInput = {
    where?: PlayerWhereInput
    data: XOR<PlayerUpdateWithoutStatsInput, PlayerUncheckedUpdateWithoutStatsInput>
  }

  export type PlayerUpdateWithoutStatsInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    posicion?: StringFieldUpdateOperationsInput | string
    team?: TeamUpdateOneRequiredWithoutPlayersNestedInput
    substitutionsIn?: SubstitutionUpdateManyWithoutPlayerInNestedInput
    substitutionsOut?: SubstitutionUpdateManyWithoutPlayerOutNestedInput
    activeInGames?: GameUpdateManyWithoutActivePlayersNestedInput
  }

  export type PlayerUncheckedUpdateWithoutStatsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    posicion?: StringFieldUpdateOperationsInput | string
    teamId?: IntFieldUpdateOperationsInput | number
    substitutionsIn?: SubstitutionUncheckedUpdateManyWithoutPlayerInNestedInput
    substitutionsOut?: SubstitutionUncheckedUpdateManyWithoutPlayerOutNestedInput
    activeInGames?: GameUncheckedUpdateManyWithoutActivePlayersNestedInput
  }

  export type GameCreateWithoutSubstitutionsInput = {
    fecha: Date | string
    estado: string
    gameTime?: number
    homeScore?: number
    awayScore?: number
    currentQuarter?: number
    quarterLength?: number
    totalQuarters?: number
    overtimeLength?: number
    quarterTime?: number
    isOvertime?: boolean
    event: EventCreateNestedOneWithoutGamesInput
    teamHome: TeamCreateNestedOneWithoutHomeGamesInput
    teamAway: TeamCreateNestedOneWithoutAwayGamesInput
    stats?: PlayerGameStatsCreateNestedManyWithoutGameInput
    activePlayers?: PlayerCreateNestedManyWithoutActiveInGamesInput
  }

  export type GameUncheckedCreateWithoutSubstitutionsInput = {
    id?: number
    eventId: number
    teamHomeId: number
    teamAwayId: number
    fecha: Date | string
    estado: string
    gameTime?: number
    homeScore?: number
    awayScore?: number
    currentQuarter?: number
    quarterLength?: number
    totalQuarters?: number
    overtimeLength?: number
    quarterTime?: number
    isOvertime?: boolean
    stats?: PlayerGameStatsUncheckedCreateNestedManyWithoutGameInput
    activePlayers?: PlayerUncheckedCreateNestedManyWithoutActiveInGamesInput
  }

  export type GameCreateOrConnectWithoutSubstitutionsInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutSubstitutionsInput, GameUncheckedCreateWithoutSubstitutionsInput>
  }

  export type PlayerCreateWithoutSubstitutionsInInput = {
    nombre: string
    apellido: string
    numero: number
    posicion: string
    team: TeamCreateNestedOneWithoutPlayersInput
    stats?: PlayerGameStatsCreateNestedManyWithoutPlayerInput
    substitutionsOut?: SubstitutionCreateNestedManyWithoutPlayerOutInput
    activeInGames?: GameCreateNestedManyWithoutActivePlayersInput
  }

  export type PlayerUncheckedCreateWithoutSubstitutionsInInput = {
    id?: number
    nombre: string
    apellido: string
    numero: number
    posicion: string
    teamId: number
    stats?: PlayerGameStatsUncheckedCreateNestedManyWithoutPlayerInput
    substitutionsOut?: SubstitutionUncheckedCreateNestedManyWithoutPlayerOutInput
    activeInGames?: GameUncheckedCreateNestedManyWithoutActivePlayersInput
  }

  export type PlayerCreateOrConnectWithoutSubstitutionsInInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutSubstitutionsInInput, PlayerUncheckedCreateWithoutSubstitutionsInInput>
  }

  export type PlayerCreateWithoutSubstitutionsOutInput = {
    nombre: string
    apellido: string
    numero: number
    posicion: string
    team: TeamCreateNestedOneWithoutPlayersInput
    stats?: PlayerGameStatsCreateNestedManyWithoutPlayerInput
    substitutionsIn?: SubstitutionCreateNestedManyWithoutPlayerInInput
    activeInGames?: GameCreateNestedManyWithoutActivePlayersInput
  }

  export type PlayerUncheckedCreateWithoutSubstitutionsOutInput = {
    id?: number
    nombre: string
    apellido: string
    numero: number
    posicion: string
    teamId: number
    stats?: PlayerGameStatsUncheckedCreateNestedManyWithoutPlayerInput
    substitutionsIn?: SubstitutionUncheckedCreateNestedManyWithoutPlayerInInput
    activeInGames?: GameUncheckedCreateNestedManyWithoutActivePlayersInput
  }

  export type PlayerCreateOrConnectWithoutSubstitutionsOutInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutSubstitutionsOutInput, PlayerUncheckedCreateWithoutSubstitutionsOutInput>
  }

  export type GameUpsertWithoutSubstitutionsInput = {
    update: XOR<GameUpdateWithoutSubstitutionsInput, GameUncheckedUpdateWithoutSubstitutionsInput>
    create: XOR<GameCreateWithoutSubstitutionsInput, GameUncheckedCreateWithoutSubstitutionsInput>
    where?: GameWhereInput
  }

  export type GameUpdateToOneWithWhereWithoutSubstitutionsInput = {
    where?: GameWhereInput
    data: XOR<GameUpdateWithoutSubstitutionsInput, GameUncheckedUpdateWithoutSubstitutionsInput>
  }

  export type GameUpdateWithoutSubstitutionsInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: StringFieldUpdateOperationsInput | string
    gameTime?: IntFieldUpdateOperationsInput | number
    homeScore?: IntFieldUpdateOperationsInput | number
    awayScore?: IntFieldUpdateOperationsInput | number
    currentQuarter?: IntFieldUpdateOperationsInput | number
    quarterLength?: IntFieldUpdateOperationsInput | number
    totalQuarters?: IntFieldUpdateOperationsInput | number
    overtimeLength?: IntFieldUpdateOperationsInput | number
    quarterTime?: IntFieldUpdateOperationsInput | number
    isOvertime?: BoolFieldUpdateOperationsInput | boolean
    event?: EventUpdateOneRequiredWithoutGamesNestedInput
    teamHome?: TeamUpdateOneRequiredWithoutHomeGamesNestedInput
    teamAway?: TeamUpdateOneRequiredWithoutAwayGamesNestedInput
    stats?: PlayerGameStatsUpdateManyWithoutGameNestedInput
    activePlayers?: PlayerUpdateManyWithoutActiveInGamesNestedInput
  }

  export type GameUncheckedUpdateWithoutSubstitutionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    teamHomeId?: IntFieldUpdateOperationsInput | number
    teamAwayId?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: StringFieldUpdateOperationsInput | string
    gameTime?: IntFieldUpdateOperationsInput | number
    homeScore?: IntFieldUpdateOperationsInput | number
    awayScore?: IntFieldUpdateOperationsInput | number
    currentQuarter?: IntFieldUpdateOperationsInput | number
    quarterLength?: IntFieldUpdateOperationsInput | number
    totalQuarters?: IntFieldUpdateOperationsInput | number
    overtimeLength?: IntFieldUpdateOperationsInput | number
    quarterTime?: IntFieldUpdateOperationsInput | number
    isOvertime?: BoolFieldUpdateOperationsInput | boolean
    stats?: PlayerGameStatsUncheckedUpdateManyWithoutGameNestedInput
    activePlayers?: PlayerUncheckedUpdateManyWithoutActiveInGamesNestedInput
  }

  export type PlayerUpsertWithoutSubstitutionsInInput = {
    update: XOR<PlayerUpdateWithoutSubstitutionsInInput, PlayerUncheckedUpdateWithoutSubstitutionsInInput>
    create: XOR<PlayerCreateWithoutSubstitutionsInInput, PlayerUncheckedCreateWithoutSubstitutionsInInput>
    where?: PlayerWhereInput
  }

  export type PlayerUpdateToOneWithWhereWithoutSubstitutionsInInput = {
    where?: PlayerWhereInput
    data: XOR<PlayerUpdateWithoutSubstitutionsInInput, PlayerUncheckedUpdateWithoutSubstitutionsInInput>
  }

  export type PlayerUpdateWithoutSubstitutionsInInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    posicion?: StringFieldUpdateOperationsInput | string
    team?: TeamUpdateOneRequiredWithoutPlayersNestedInput
    stats?: PlayerGameStatsUpdateManyWithoutPlayerNestedInput
    substitutionsOut?: SubstitutionUpdateManyWithoutPlayerOutNestedInput
    activeInGames?: GameUpdateManyWithoutActivePlayersNestedInput
  }

  export type PlayerUncheckedUpdateWithoutSubstitutionsInInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    posicion?: StringFieldUpdateOperationsInput | string
    teamId?: IntFieldUpdateOperationsInput | number
    stats?: PlayerGameStatsUncheckedUpdateManyWithoutPlayerNestedInput
    substitutionsOut?: SubstitutionUncheckedUpdateManyWithoutPlayerOutNestedInput
    activeInGames?: GameUncheckedUpdateManyWithoutActivePlayersNestedInput
  }

  export type PlayerUpsertWithoutSubstitutionsOutInput = {
    update: XOR<PlayerUpdateWithoutSubstitutionsOutInput, PlayerUncheckedUpdateWithoutSubstitutionsOutInput>
    create: XOR<PlayerCreateWithoutSubstitutionsOutInput, PlayerUncheckedCreateWithoutSubstitutionsOutInput>
    where?: PlayerWhereInput
  }

  export type PlayerUpdateToOneWithWhereWithoutSubstitutionsOutInput = {
    where?: PlayerWhereInput
    data: XOR<PlayerUpdateWithoutSubstitutionsOutInput, PlayerUncheckedUpdateWithoutSubstitutionsOutInput>
  }

  export type PlayerUpdateWithoutSubstitutionsOutInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    posicion?: StringFieldUpdateOperationsInput | string
    team?: TeamUpdateOneRequiredWithoutPlayersNestedInput
    stats?: PlayerGameStatsUpdateManyWithoutPlayerNestedInput
    substitutionsIn?: SubstitutionUpdateManyWithoutPlayerInNestedInput
    activeInGames?: GameUpdateManyWithoutActivePlayersNestedInput
  }

  export type PlayerUncheckedUpdateWithoutSubstitutionsOutInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    posicion?: StringFieldUpdateOperationsInput | string
    teamId?: IntFieldUpdateOperationsInput | number
    stats?: PlayerGameStatsUncheckedUpdateManyWithoutPlayerNestedInput
    substitutionsIn?: SubstitutionUncheckedUpdateManyWithoutPlayerInNestedInput
    activeInGames?: GameUncheckedUpdateManyWithoutActivePlayersNestedInput
  }

  export type PlayerCreateManyTeamInput = {
    id?: number
    nombre: string
    apellido: string
    numero: number
    posicion: string
  }

  export type GameCreateManyTeamHomeInput = {
    id?: number
    eventId: number
    teamAwayId: number
    fecha: Date | string
    estado: string
    gameTime?: number
    homeScore?: number
    awayScore?: number
    currentQuarter?: number
    quarterLength?: number
    totalQuarters?: number
    overtimeLength?: number
    quarterTime?: number
    isOvertime?: boolean
  }

  export type GameCreateManyTeamAwayInput = {
    id?: number
    eventId: number
    teamHomeId: number
    fecha: Date | string
    estado: string
    gameTime?: number
    homeScore?: number
    awayScore?: number
    currentQuarter?: number
    quarterLength?: number
    totalQuarters?: number
    overtimeLength?: number
    quarterTime?: number
    isOvertime?: boolean
  }

  export type PlayerUpdateWithoutTeamInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    posicion?: StringFieldUpdateOperationsInput | string
    stats?: PlayerGameStatsUpdateManyWithoutPlayerNestedInput
    substitutionsIn?: SubstitutionUpdateManyWithoutPlayerInNestedInput
    substitutionsOut?: SubstitutionUpdateManyWithoutPlayerOutNestedInput
    activeInGames?: GameUpdateManyWithoutActivePlayersNestedInput
  }

  export type PlayerUncheckedUpdateWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    posicion?: StringFieldUpdateOperationsInput | string
    stats?: PlayerGameStatsUncheckedUpdateManyWithoutPlayerNestedInput
    substitutionsIn?: SubstitutionUncheckedUpdateManyWithoutPlayerInNestedInput
    substitutionsOut?: SubstitutionUncheckedUpdateManyWithoutPlayerOutNestedInput
    activeInGames?: GameUncheckedUpdateManyWithoutActivePlayersNestedInput
  }

  export type PlayerUncheckedUpdateManyWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    posicion?: StringFieldUpdateOperationsInput | string
  }

  export type GameUpdateWithoutTeamHomeInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: StringFieldUpdateOperationsInput | string
    gameTime?: IntFieldUpdateOperationsInput | number
    homeScore?: IntFieldUpdateOperationsInput | number
    awayScore?: IntFieldUpdateOperationsInput | number
    currentQuarter?: IntFieldUpdateOperationsInput | number
    quarterLength?: IntFieldUpdateOperationsInput | number
    totalQuarters?: IntFieldUpdateOperationsInput | number
    overtimeLength?: IntFieldUpdateOperationsInput | number
    quarterTime?: IntFieldUpdateOperationsInput | number
    isOvertime?: BoolFieldUpdateOperationsInput | boolean
    event?: EventUpdateOneRequiredWithoutGamesNestedInput
    teamAway?: TeamUpdateOneRequiredWithoutAwayGamesNestedInput
    stats?: PlayerGameStatsUpdateManyWithoutGameNestedInput
    substitutions?: SubstitutionUpdateManyWithoutGameNestedInput
    activePlayers?: PlayerUpdateManyWithoutActiveInGamesNestedInput
  }

  export type GameUncheckedUpdateWithoutTeamHomeInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    teamAwayId?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: StringFieldUpdateOperationsInput | string
    gameTime?: IntFieldUpdateOperationsInput | number
    homeScore?: IntFieldUpdateOperationsInput | number
    awayScore?: IntFieldUpdateOperationsInput | number
    currentQuarter?: IntFieldUpdateOperationsInput | number
    quarterLength?: IntFieldUpdateOperationsInput | number
    totalQuarters?: IntFieldUpdateOperationsInput | number
    overtimeLength?: IntFieldUpdateOperationsInput | number
    quarterTime?: IntFieldUpdateOperationsInput | number
    isOvertime?: BoolFieldUpdateOperationsInput | boolean
    stats?: PlayerGameStatsUncheckedUpdateManyWithoutGameNestedInput
    substitutions?: SubstitutionUncheckedUpdateManyWithoutGameNestedInput
    activePlayers?: PlayerUncheckedUpdateManyWithoutActiveInGamesNestedInput
  }

  export type GameUncheckedUpdateManyWithoutTeamHomeInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    teamAwayId?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: StringFieldUpdateOperationsInput | string
    gameTime?: IntFieldUpdateOperationsInput | number
    homeScore?: IntFieldUpdateOperationsInput | number
    awayScore?: IntFieldUpdateOperationsInput | number
    currentQuarter?: IntFieldUpdateOperationsInput | number
    quarterLength?: IntFieldUpdateOperationsInput | number
    totalQuarters?: IntFieldUpdateOperationsInput | number
    overtimeLength?: IntFieldUpdateOperationsInput | number
    quarterTime?: IntFieldUpdateOperationsInput | number
    isOvertime?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GameUpdateWithoutTeamAwayInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: StringFieldUpdateOperationsInput | string
    gameTime?: IntFieldUpdateOperationsInput | number
    homeScore?: IntFieldUpdateOperationsInput | number
    awayScore?: IntFieldUpdateOperationsInput | number
    currentQuarter?: IntFieldUpdateOperationsInput | number
    quarterLength?: IntFieldUpdateOperationsInput | number
    totalQuarters?: IntFieldUpdateOperationsInput | number
    overtimeLength?: IntFieldUpdateOperationsInput | number
    quarterTime?: IntFieldUpdateOperationsInput | number
    isOvertime?: BoolFieldUpdateOperationsInput | boolean
    event?: EventUpdateOneRequiredWithoutGamesNestedInput
    teamHome?: TeamUpdateOneRequiredWithoutHomeGamesNestedInput
    stats?: PlayerGameStatsUpdateManyWithoutGameNestedInput
    substitutions?: SubstitutionUpdateManyWithoutGameNestedInput
    activePlayers?: PlayerUpdateManyWithoutActiveInGamesNestedInput
  }

  export type GameUncheckedUpdateWithoutTeamAwayInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    teamHomeId?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: StringFieldUpdateOperationsInput | string
    gameTime?: IntFieldUpdateOperationsInput | number
    homeScore?: IntFieldUpdateOperationsInput | number
    awayScore?: IntFieldUpdateOperationsInput | number
    currentQuarter?: IntFieldUpdateOperationsInput | number
    quarterLength?: IntFieldUpdateOperationsInput | number
    totalQuarters?: IntFieldUpdateOperationsInput | number
    overtimeLength?: IntFieldUpdateOperationsInput | number
    quarterTime?: IntFieldUpdateOperationsInput | number
    isOvertime?: BoolFieldUpdateOperationsInput | boolean
    stats?: PlayerGameStatsUncheckedUpdateManyWithoutGameNestedInput
    substitutions?: SubstitutionUncheckedUpdateManyWithoutGameNestedInput
    activePlayers?: PlayerUncheckedUpdateManyWithoutActiveInGamesNestedInput
  }

  export type GameUncheckedUpdateManyWithoutTeamAwayInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    teamHomeId?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: StringFieldUpdateOperationsInput | string
    gameTime?: IntFieldUpdateOperationsInput | number
    homeScore?: IntFieldUpdateOperationsInput | number
    awayScore?: IntFieldUpdateOperationsInput | number
    currentQuarter?: IntFieldUpdateOperationsInput | number
    quarterLength?: IntFieldUpdateOperationsInput | number
    totalQuarters?: IntFieldUpdateOperationsInput | number
    overtimeLength?: IntFieldUpdateOperationsInput | number
    quarterTime?: IntFieldUpdateOperationsInput | number
    isOvertime?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PlayerGameStatsCreateManyPlayerInput = {
    id?: number
    gameId: number
    puntos: number
    rebotes: number
    asistencias: number
    robos: number
    tapones: number
    tirosIntentados: number
    tirosAnotados: number
    tiros3Intentados: number
    tiros3Anotados: number
    minutos: number
    plusMinus: number
  }

  export type SubstitutionCreateManyPlayerInInput = {
    id?: number
    gameId: number
    playerOutId: number
    timestamp: Date | string
  }

  export type SubstitutionCreateManyPlayerOutInput = {
    id?: number
    gameId: number
    playerInId: number
    timestamp: Date | string
  }

  export type PlayerGameStatsUpdateWithoutPlayerInput = {
    puntos?: IntFieldUpdateOperationsInput | number
    rebotes?: IntFieldUpdateOperationsInput | number
    asistencias?: IntFieldUpdateOperationsInput | number
    robos?: IntFieldUpdateOperationsInput | number
    tapones?: IntFieldUpdateOperationsInput | number
    tirosIntentados?: IntFieldUpdateOperationsInput | number
    tirosAnotados?: IntFieldUpdateOperationsInput | number
    tiros3Intentados?: IntFieldUpdateOperationsInput | number
    tiros3Anotados?: IntFieldUpdateOperationsInput | number
    minutos?: IntFieldUpdateOperationsInput | number
    plusMinus?: IntFieldUpdateOperationsInput | number
    game?: GameUpdateOneRequiredWithoutStatsNestedInput
  }

  export type PlayerGameStatsUncheckedUpdateWithoutPlayerInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
    puntos?: IntFieldUpdateOperationsInput | number
    rebotes?: IntFieldUpdateOperationsInput | number
    asistencias?: IntFieldUpdateOperationsInput | number
    robos?: IntFieldUpdateOperationsInput | number
    tapones?: IntFieldUpdateOperationsInput | number
    tirosIntentados?: IntFieldUpdateOperationsInput | number
    tirosAnotados?: IntFieldUpdateOperationsInput | number
    tiros3Intentados?: IntFieldUpdateOperationsInput | number
    tiros3Anotados?: IntFieldUpdateOperationsInput | number
    minutos?: IntFieldUpdateOperationsInput | number
    plusMinus?: IntFieldUpdateOperationsInput | number
  }

  export type PlayerGameStatsUncheckedUpdateManyWithoutPlayerInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
    puntos?: IntFieldUpdateOperationsInput | number
    rebotes?: IntFieldUpdateOperationsInput | number
    asistencias?: IntFieldUpdateOperationsInput | number
    robos?: IntFieldUpdateOperationsInput | number
    tapones?: IntFieldUpdateOperationsInput | number
    tirosIntentados?: IntFieldUpdateOperationsInput | number
    tirosAnotados?: IntFieldUpdateOperationsInput | number
    tiros3Intentados?: IntFieldUpdateOperationsInput | number
    tiros3Anotados?: IntFieldUpdateOperationsInput | number
    minutos?: IntFieldUpdateOperationsInput | number
    plusMinus?: IntFieldUpdateOperationsInput | number
  }

  export type SubstitutionUpdateWithoutPlayerInInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: GameUpdateOneRequiredWithoutSubstitutionsNestedInput
    playerOut?: PlayerUpdateOneRequiredWithoutSubstitutionsOutNestedInput
  }

  export type SubstitutionUncheckedUpdateWithoutPlayerInInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
    playerOutId?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubstitutionUncheckedUpdateManyWithoutPlayerInInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
    playerOutId?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubstitutionUpdateWithoutPlayerOutInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: GameUpdateOneRequiredWithoutSubstitutionsNestedInput
    playerIn?: PlayerUpdateOneRequiredWithoutSubstitutionsInNestedInput
  }

  export type SubstitutionUncheckedUpdateWithoutPlayerOutInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
    playerInId?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubstitutionUncheckedUpdateManyWithoutPlayerOutInput = {
    id?: IntFieldUpdateOperationsInput | number
    gameId?: IntFieldUpdateOperationsInput | number
    playerInId?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameUpdateWithoutActivePlayersInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: StringFieldUpdateOperationsInput | string
    gameTime?: IntFieldUpdateOperationsInput | number
    homeScore?: IntFieldUpdateOperationsInput | number
    awayScore?: IntFieldUpdateOperationsInput | number
    currentQuarter?: IntFieldUpdateOperationsInput | number
    quarterLength?: IntFieldUpdateOperationsInput | number
    totalQuarters?: IntFieldUpdateOperationsInput | number
    overtimeLength?: IntFieldUpdateOperationsInput | number
    quarterTime?: IntFieldUpdateOperationsInput | number
    isOvertime?: BoolFieldUpdateOperationsInput | boolean
    event?: EventUpdateOneRequiredWithoutGamesNestedInput
    teamHome?: TeamUpdateOneRequiredWithoutHomeGamesNestedInput
    teamAway?: TeamUpdateOneRequiredWithoutAwayGamesNestedInput
    stats?: PlayerGameStatsUpdateManyWithoutGameNestedInput
    substitutions?: SubstitutionUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutActivePlayersInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    teamHomeId?: IntFieldUpdateOperationsInput | number
    teamAwayId?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: StringFieldUpdateOperationsInput | string
    gameTime?: IntFieldUpdateOperationsInput | number
    homeScore?: IntFieldUpdateOperationsInput | number
    awayScore?: IntFieldUpdateOperationsInput | number
    currentQuarter?: IntFieldUpdateOperationsInput | number
    quarterLength?: IntFieldUpdateOperationsInput | number
    totalQuarters?: IntFieldUpdateOperationsInput | number
    overtimeLength?: IntFieldUpdateOperationsInput | number
    quarterTime?: IntFieldUpdateOperationsInput | number
    isOvertime?: BoolFieldUpdateOperationsInput | boolean
    stats?: PlayerGameStatsUncheckedUpdateManyWithoutGameNestedInput
    substitutions?: SubstitutionUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateManyWithoutActivePlayersInput = {
    id?: IntFieldUpdateOperationsInput | number
    eventId?: IntFieldUpdateOperationsInput | number
    teamHomeId?: IntFieldUpdateOperationsInput | number
    teamAwayId?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: StringFieldUpdateOperationsInput | string
    gameTime?: IntFieldUpdateOperationsInput | number
    homeScore?: IntFieldUpdateOperationsInput | number
    awayScore?: IntFieldUpdateOperationsInput | number
    currentQuarter?: IntFieldUpdateOperationsInput | number
    quarterLength?: IntFieldUpdateOperationsInput | number
    totalQuarters?: IntFieldUpdateOperationsInput | number
    overtimeLength?: IntFieldUpdateOperationsInput | number
    quarterTime?: IntFieldUpdateOperationsInput | number
    isOvertime?: BoolFieldUpdateOperationsInput | boolean
  }

  export type GameCreateManyEventInput = {
    id?: number
    teamHomeId: number
    teamAwayId: number
    fecha: Date | string
    estado: string
    gameTime?: number
    homeScore?: number
    awayScore?: number
    currentQuarter?: number
    quarterLength?: number
    totalQuarters?: number
    overtimeLength?: number
    quarterTime?: number
    isOvertime?: boolean
  }

  export type GameUpdateWithoutEventInput = {
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: StringFieldUpdateOperationsInput | string
    gameTime?: IntFieldUpdateOperationsInput | number
    homeScore?: IntFieldUpdateOperationsInput | number
    awayScore?: IntFieldUpdateOperationsInput | number
    currentQuarter?: IntFieldUpdateOperationsInput | number
    quarterLength?: IntFieldUpdateOperationsInput | number
    totalQuarters?: IntFieldUpdateOperationsInput | number
    overtimeLength?: IntFieldUpdateOperationsInput | number
    quarterTime?: IntFieldUpdateOperationsInput | number
    isOvertime?: BoolFieldUpdateOperationsInput | boolean
    teamHome?: TeamUpdateOneRequiredWithoutHomeGamesNestedInput
    teamAway?: TeamUpdateOneRequiredWithoutAwayGamesNestedInput
    stats?: PlayerGameStatsUpdateManyWithoutGameNestedInput
    substitutions?: SubstitutionUpdateManyWithoutGameNestedInput
    activePlayers?: PlayerUpdateManyWithoutActiveInGamesNestedInput
  }

  export type GameUncheckedUpdateWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    teamHomeId?: IntFieldUpdateOperationsInput | number
    teamAwayId?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: StringFieldUpdateOperationsInput | string
    gameTime?: IntFieldUpdateOperationsInput | number
    homeScore?: IntFieldUpdateOperationsInput | number
    awayScore?: IntFieldUpdateOperationsInput | number
    currentQuarter?: IntFieldUpdateOperationsInput | number
    quarterLength?: IntFieldUpdateOperationsInput | number
    totalQuarters?: IntFieldUpdateOperationsInput | number
    overtimeLength?: IntFieldUpdateOperationsInput | number
    quarterTime?: IntFieldUpdateOperationsInput | number
    isOvertime?: BoolFieldUpdateOperationsInput | boolean
    stats?: PlayerGameStatsUncheckedUpdateManyWithoutGameNestedInput
    substitutions?: SubstitutionUncheckedUpdateManyWithoutGameNestedInput
    activePlayers?: PlayerUncheckedUpdateManyWithoutActiveInGamesNestedInput
  }

  export type GameUncheckedUpdateManyWithoutEventInput = {
    id?: IntFieldUpdateOperationsInput | number
    teamHomeId?: IntFieldUpdateOperationsInput | number
    teamAwayId?: IntFieldUpdateOperationsInput | number
    fecha?: DateTimeFieldUpdateOperationsInput | Date | string
    estado?: StringFieldUpdateOperationsInput | string
    gameTime?: IntFieldUpdateOperationsInput | number
    homeScore?: IntFieldUpdateOperationsInput | number
    awayScore?: IntFieldUpdateOperationsInput | number
    currentQuarter?: IntFieldUpdateOperationsInput | number
    quarterLength?: IntFieldUpdateOperationsInput | number
    totalQuarters?: IntFieldUpdateOperationsInput | number
    overtimeLength?: IntFieldUpdateOperationsInput | number
    quarterTime?: IntFieldUpdateOperationsInput | number
    isOvertime?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PlayerGameStatsCreateManyGameInput = {
    id?: number
    playerId: number
    puntos: number
    rebotes: number
    asistencias: number
    robos: number
    tapones: number
    tirosIntentados: number
    tirosAnotados: number
    tiros3Intentados: number
    tiros3Anotados: number
    minutos: number
    plusMinus: number
  }

  export type SubstitutionCreateManyGameInput = {
    id?: number
    playerInId: number
    playerOutId: number
    timestamp: Date | string
  }

  export type PlayerGameStatsUpdateWithoutGameInput = {
    puntos?: IntFieldUpdateOperationsInput | number
    rebotes?: IntFieldUpdateOperationsInput | number
    asistencias?: IntFieldUpdateOperationsInput | number
    robos?: IntFieldUpdateOperationsInput | number
    tapones?: IntFieldUpdateOperationsInput | number
    tirosIntentados?: IntFieldUpdateOperationsInput | number
    tirosAnotados?: IntFieldUpdateOperationsInput | number
    tiros3Intentados?: IntFieldUpdateOperationsInput | number
    tiros3Anotados?: IntFieldUpdateOperationsInput | number
    minutos?: IntFieldUpdateOperationsInput | number
    plusMinus?: IntFieldUpdateOperationsInput | number
    player?: PlayerUpdateOneRequiredWithoutStatsNestedInput
  }

  export type PlayerGameStatsUncheckedUpdateWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    playerId?: IntFieldUpdateOperationsInput | number
    puntos?: IntFieldUpdateOperationsInput | number
    rebotes?: IntFieldUpdateOperationsInput | number
    asistencias?: IntFieldUpdateOperationsInput | number
    robos?: IntFieldUpdateOperationsInput | number
    tapones?: IntFieldUpdateOperationsInput | number
    tirosIntentados?: IntFieldUpdateOperationsInput | number
    tirosAnotados?: IntFieldUpdateOperationsInput | number
    tiros3Intentados?: IntFieldUpdateOperationsInput | number
    tiros3Anotados?: IntFieldUpdateOperationsInput | number
    minutos?: IntFieldUpdateOperationsInput | number
    plusMinus?: IntFieldUpdateOperationsInput | number
  }

  export type PlayerGameStatsUncheckedUpdateManyWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    playerId?: IntFieldUpdateOperationsInput | number
    puntos?: IntFieldUpdateOperationsInput | number
    rebotes?: IntFieldUpdateOperationsInput | number
    asistencias?: IntFieldUpdateOperationsInput | number
    robos?: IntFieldUpdateOperationsInput | number
    tapones?: IntFieldUpdateOperationsInput | number
    tirosIntentados?: IntFieldUpdateOperationsInput | number
    tirosAnotados?: IntFieldUpdateOperationsInput | number
    tiros3Intentados?: IntFieldUpdateOperationsInput | number
    tiros3Anotados?: IntFieldUpdateOperationsInput | number
    minutos?: IntFieldUpdateOperationsInput | number
    plusMinus?: IntFieldUpdateOperationsInput | number
  }

  export type SubstitutionUpdateWithoutGameInput = {
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    playerIn?: PlayerUpdateOneRequiredWithoutSubstitutionsInNestedInput
    playerOut?: PlayerUpdateOneRequiredWithoutSubstitutionsOutNestedInput
  }

  export type SubstitutionUncheckedUpdateWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    playerInId?: IntFieldUpdateOperationsInput | number
    playerOutId?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubstitutionUncheckedUpdateManyWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    playerInId?: IntFieldUpdateOperationsInput | number
    playerOutId?: IntFieldUpdateOperationsInput | number
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerUpdateWithoutActiveInGamesInput = {
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    posicion?: StringFieldUpdateOperationsInput | string
    team?: TeamUpdateOneRequiredWithoutPlayersNestedInput
    stats?: PlayerGameStatsUpdateManyWithoutPlayerNestedInput
    substitutionsIn?: SubstitutionUpdateManyWithoutPlayerInNestedInput
    substitutionsOut?: SubstitutionUpdateManyWithoutPlayerOutNestedInput
  }

  export type PlayerUncheckedUpdateWithoutActiveInGamesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    posicion?: StringFieldUpdateOperationsInput | string
    teamId?: IntFieldUpdateOperationsInput | number
    stats?: PlayerGameStatsUncheckedUpdateManyWithoutPlayerNestedInput
    substitutionsIn?: SubstitutionUncheckedUpdateManyWithoutPlayerInNestedInput
    substitutionsOut?: SubstitutionUncheckedUpdateManyWithoutPlayerOutNestedInput
  }

  export type PlayerUncheckedUpdateManyWithoutActiveInGamesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nombre?: StringFieldUpdateOperationsInput | string
    apellido?: StringFieldUpdateOperationsInput | string
    numero?: IntFieldUpdateOperationsInput | number
    posicion?: StringFieldUpdateOperationsInput | string
    teamId?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use TeamCountOutputTypeDefaultArgs instead
     */
    export type TeamCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeamCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlayerCountOutputTypeDefaultArgs instead
     */
    export type PlayerCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlayerCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventCountOutputTypeDefaultArgs instead
     */
    export type EventCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GameCountOutputTypeDefaultArgs instead
     */
    export type GameCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GameCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TeamDefaultArgs instead
     */
    export type TeamArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TeamDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlayerDefaultArgs instead
     */
    export type PlayerArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlayerDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventDefaultArgs instead
     */
    export type EventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GameDefaultArgs instead
     */
    export type GameArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = GameDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlayerGameStatsDefaultArgs instead
     */
    export type PlayerGameStatsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlayerGameStatsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubstitutionDefaultArgs instead
     */
    export type SubstitutionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SubstitutionDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}